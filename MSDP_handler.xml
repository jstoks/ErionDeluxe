<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- MuClient version 5.01 -->
<!-- Plugin "MSDP_handler" generated by Plugin Wizard -->
<muclient>
<plugin
   name="MSDP_handler"
   author="Aelyn"
   id="0cca324658121f0704191069"
   language="Lua"
   purpose="Support of MSDP protocol and soundpack for Erion MUD"
   save_state="y"
   date_written="2016-04-27 11:40:50"
   requires="4.94"
   version="1.0"
   >

</plugin>

<!--  Get our standard constants -->

<include name="constants.lua"/>

<!--  Script  -->

<aliases>
   <alias script="msdpdebug" match="^msdpdebug (.*)$" enabled="y" regexp="y" send_to="12" sequence="100"></alias>
   <alias script="msdpdebug" match="^msdpdebug$" enabled="y" regexp="y" send_to="12" sequence="100"></alias>
   <alias script="soundpack_music" match="^sound music$" ignore_case = "y" enabled="y" regexp="y" send_to="12" sequence="100"></alias>
   <alias script="soundpack_weather" match="^sound weather$" ignore_case = "y" enabled="y" regexp="y" send_to="12" sequence="100"></alias>
   <alias script="soundpack_combat_music" match="^sound combat music$" ignore_case = "y" enabled="y" regexp="y" send_to="12" sequence="100"></alias>
   <alias script="soundpack_paths" match="^sound paths$" ignore_case = "y" enabled="y" regexp="y" send_to="12" sequence="100"></alias>
   <alias script="soundpack_help" match="^sound help$" ignore_case = "y" enabled="y" regexp="y" send_to="12" sequence="100"></alias>
   <alias script="soundpack_off" match="^sound off$" ignore_case = "y" enabled="y" regexp="y" send_to="12" sequence="100"></alias>
   <alias script="soundpack_on" match="^sound on$" ignore_case = "y" enabled="y" regexp="y" send_to="12" sequence="100"></alias>
   <alias script="soundpack_print" match="^sound print$" ignore_case = "y" enabled="y" regexp="y" send_to="12" sequence="100"></alias>
   <alias script="soundpack_toggle" match="^sound toggle (.*)$" ignore_case = "y" enabled="y" regexp="y" send_to="12" sequence="100"></alias>
   <alias script="soundpack_list" match="^sound list(.*)$" ignore_case = "y" enabled="y" regexp="y" send_to="12" sequence="100"></alias>
   <alias script="soundpack_homemusic" match="^sound homemusic(.*)$" ignore_case = "y" enabled="y" regexp="y" send_to="12" sequence="100"></alias>
   <alias script="soundpack_combat" match="^sound combat$" ignore_case = "y" enabled="y" regexp="y" send_to="12" sequence="100"></alias>
   <alias script="soundpack_ambiance" match="^sound ambiance$" ignore_case = "y" enabled="y" regexp="y" send_to="12" sequence="100"></alias>
   <alias script="soundpack_ambiance" match="^sound ambience$" ignore_case = "y" enabled="y" regexp="y" send_to="12" sequence="100"></alias>
   <alias script="soundpack_socials" match="^sound socials$" ignore_case = "y" enabled="y" regexp="y" send_to="12" sequence="100"></alias>

   <alias match="voldown" enabled="y" group="setup" send_to="12" sequence="100">
      <send>volchange(2)</send>
   </alias>
  <alias match="voltoggle" enabled="y" group="setup" send_to="12" sequence="100" >
      <send>
         current_volume = current_volume + 1
         if current_volume == 8 then
            current_volume = 1
         end
         print("Switching to "..volume_names[current_volume]..", current value "..getCurrentVolume()..".")
      </send>
  </alias>
  <alias match="volup" enabled="y" group="setup" send_to="12" sequence="100" >
     <send>volchange(1)</send>
  </alias>
  <alias match="recall" enabled="y" group="setup" send_to="12" sequence="100" >
     <send>SendNoEcho("recall")</send>
  </alias>
  <alias match="limitbreak" enabled="y" group="setup" send_to="12" sequence="100" >
     <send>SendNoEcho("limit percent")</send>
  </alias>
  <alias match="hpfull" enabled="y" group="setup" send_to="12" sequence="100" >
    <send>SendNoEcho("score hps")
  AddTriggerEx("AnnounceHPFull",
    "^(.*?) of (.*?) hp$", "",
    bit.bor(trigger_flag.Enabled, trigger_flag.RegularExpression,
      trigger_flag.Temporary, trigger_flag.Replace, trigger_flag.OneShot),
    custom_colour.NoChange, 0, "", "SpeakFullHp", 12, 100) </send>
  </alias>
    <alias match="manafull" enabled="y" group="setup" send_to="12" sequence="100" >
     <send>SendNoEcho("score mana")
  AddTriggerEx("AnnounceManaFull",
    "^(.*?) of (.*?) mana$", "",
    bit.bor(trigger_flag.Enabled, trigger_flag.RegularExpression,
      trigger_flag.Temporary, trigger_flag.Replace, trigger_flag.OneShot),
    custom_colour.NoChange, 0, "", "SpeakFullMana", 12, 100) </send>
  </alias>
  <alias match="hppercent" enabled="y" group="setup" send_to="12" sequence="100" >
     <send>SendNoEcho("score hppercent")
  AddTriggerEx("AnnounceHPPercent",
    "^(.*?)\% hp$", "",
    bit.bor(trigger_flag.Enabled, trigger_flag.RegularExpression,
      trigger_flag.Temporary, trigger_flag.Replace, trigger_flag.OneShot),
    custom_colour.NoChange, 0, "", "SpeakHpPercent", 12, 100) </send>
  </alias>
  <alias match="manapercent" enabled="y" group="setup" send_to="12" sequence="100" >
     <send>SendNoEcho("score manapercent")
  AddTriggerEx("AnnounceManaPercent",
    "^(.*?)\% mana$", "",
    bit.bor(trigger_flag.Enabled, trigger_flag.RegularExpression,
      trigger_flag.Temporary, trigger_flag.Replace, trigger_flag.OneShot),
    custom_colour.NoChange, 0, "", "SpeakManaPercent", 12, 100) </send>
  </alias>
    <alias match="tnl" enabled="y" group="setup" send_to="12" sequence="100" >
     <send>SendNoEcho("score tnl")
  AddTriggerEx("AnnounceTnl",
    "^(.*?) experience to level.$", "",
    bit.bor(trigger_flag.Enabled, trigger_flag.RegularExpression,
      trigger_flag.Temporary, trigger_flag.Replace, trigger_flag.OneShot),
    custom_colour.NoChange, 0, "", "SpeakTnl", 12, 100) </send>
  </alias>
</aliases>

<variables>
   <variable name="msdpTable">msdpTable={}</variable>  
   <variable name="music">music=0</variable>
   <variable name="combatmusic">combatmusic=0</variable>
   <variable name="musicFile">musicFile=0</variable>
   <variable name="areaVnum">areaVnum=0</variable>
   <variable name="fightType">fightType=0</variable>
   <variable name="weatherType">weatherType=0</variable>
   <variable name="weatherAmbiencePPI">weatherAmbiencePPI=0</variable>
   <variable name="weatherAmbienceFile">weatherAmbienceFile=0</variable>
   <variable name="combatMusicFile">combatMusicFile=0</variable>
   <variable name="effect">effect=0</variable>
   <variable name="fleesound">fleesound=0</variable>
   <variable name="playerIsPlaying">playerIsPlaying=0</variable>

</variables>

<triggers>

<trigger
   enabled="y" keep_evaluating="y" match="^Welcome to the account menu of.*\.$" regexp="y" send_to="12" sequence="100">
  <send>
    SetVariable("lastterain", "")
    num = tonumber(GetVariable("music"))
    if num ~= nil then
       ppi.fadeout(num)
    end
    SetVariable("music", 0)

    num = tonumber(GetVariable("combatmusic"))
    if num ~= nil then
       ppi.fadeout(num)
    end
    SetVariable("combatmusic", 0)

    num = tonumber(GetVariable("weatherAmbiencePPI"))
    if num ~= nil then
       ppi.fadeout(num)
    end
    SetVariable("weatherAmbiencePPI", 0)

    if tonumber(GetVariable("toggleMenu")) == 1 then
      num = tonumber(GetVariable("music"))
      if num == nil or num == 0 or ppi.isPlaying(tonumber(GetVariable("music"))) ~= 1 then
        result = playsoundloop(GetSoundKeyword("toggleMenu"), "misc/account_menu.ogg", "music", 1)
        if result ~= nil then
           SetVariable("music", result)
        end
      end
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You have deposited.*into your.*account.*" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleDeposit")) == 1 then
      playsound(GetSoundKeyword("toggleDeposit"), "misc/gold_deposit.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You stand up\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleStand")) == 1 then
      playsound(GetSoundKeyword("toggleStand"), "misc/stand.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^Erion has crashed\. Initiating copyover\!$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleCrash")) == 1 then
      playsound(GetSoundKeyword("toggleCrash"), "notifications/crash.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^It yields nothing\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleClusterYield")) == 1 then
      playsound(GetSoundKeyword("toggleClusterYield"), "crafting/mining/cluster_yield.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You clear away dirt and rock from the cluster and start hacking away\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleClearDebris")) == 1 then
      playsound(GetSoundKeyword("toggleClearDebris"), "crafting/mining/clear_debris.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^\w.* sings jubilantly, '.*'$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleMinstrel")) == 1 then
      playsound(GetSoundKeyword("toggleMinstrel"), "channels/minstrel.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You whisper.*to.*\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleWhisper")) == 1 then
      playsound(GetSoundKeyword("toggleWhisper"), "channels/whisper.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You suck the soul out of.*and it crumbles into the dust\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleSucksoul")) == 1 then
      playsound(GetSoundKeyword("toggleSucksoul"), "hp/sucksoul.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You are now a level.*!!$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleLevelUp")) == 1 then
      playsound(GetSoundKeyword("toggleLevelUp"), "exp/level_up.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You zap yourself with.*\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleZap")) == 1 then
      playsound(GetSoundKeyword("toggleZap"), "items/zap.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You zap.*with.*\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleZap")) == 1 then
      playsound(GetSoundKeyword("toggleZap"), "items/zap.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^\w* zaps you with.*\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleZap")) == 1 then
      playsound(GetSoundKeyword("toggleZap"), "items/zap.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^The total dice roll is.*\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleDice")) == 1 then
      playsound(GetSoundKeyword("toggleDice"), "misc/dice.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You obediently remove.*\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleEqStrip")) == 1 then
      playsound(GetSoundKeyword("toggleEqStrip"), "wear/eq_strip.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^.*snaps.*fingers and strips you of your equipment\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleEqStrip")) == 1 then
      playsound(GetSoundKeyword("toggleEqStrip"), "wear/eq_strip.ogg")
    end
  </send>
</trigger>


<trigger
   enabled="y" keep_evaluating="y" match="^You whistle to your familiars to call them to you\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("togglePetcall")) == 1 then
      playsound(GetSoundKeyword("togglePetcall"), "mobs/petcall.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^Reconnecting\.\.\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("ambianceEnabled")) == 1 then
      StartAmbiance()
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You attempt to reel in.*but it's too heavy and swims off with.*!$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleFishEscape")) == 1 then
      playsound(GetSoundKeyword("toggleFishEscape"), "fishing/fishescape.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You tug too hard! The hook slips out of the fish's mouth and it swims off\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleFishEscape")) == 1 then
      playsound(GetSoundKeyword("toggleFishEscape"), "fishing/fishescape.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You tug too gently and the fish quickly swims off\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleFishEscape")) == 1 then
      playsound(GetSoundKeyword("toggleFishEscape"), "fishing/fishescape.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^Your line slackens as a fish frees itself from the hook and swims off!$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleFishSlack")) == 1 then
      playsound(GetSoundKeyword("toggleFishSlack"), "fishing/slackline.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^Your line slackens as a fish stops biting and returns to nibbling the bait\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleFishSlack")) == 1 then
      playsound(GetSoundKeyword("toggleFishSlack"), "fishing/slackline.ogg")
    end
  </send>
</trigger>


<trigger
   enabled="y" keep_evaluating="y" match="^Your fishing line goes slack as the fish frees itself from the hook\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleFishSlack")) == 1 then
      playsound(GetSoundKeyword("toggleFishSlack"), "fishing/slackline.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^Your fishing line goes slack as a fish lets go of the bait\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleFishSlack")) == 1 then
      playsound(GetSoundKeyword("toggleFishSlack"), "fishing/slackline.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^Your fishing line snaps taut as something bites the bait\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleFishSnap")) == 1 then
      playsound(GetSoundKeyword("toggleFishSnap"), "fishing/linesnap.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You feel movement along the fishing line as something nibbles at the bait\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleFishEating")) == 1 then
      playsound(GetSoundKeyword("toggleFishEating"), "fishing/fisheating.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You feel movement along the line as a fish nibbles at the bait\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleFishEating")) == 1 then
      playsound(GetSoundKeyword("toggleFishEating"), "fishing/fisheating.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^A fish eats the last of the chum\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleFishEating")) == 1 then
      playsound(GetSoundKeyword("toggleFishEating"), "fishing/fisheating.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You toss.*into the water to entice the fish to come closer\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleFishChum")) == 1 then
      playsound(GetSoundKeyword("toggleFishChum"), "fishing/chum.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You feel less movement along the line as a fish darts off, spooked by the jiggling line\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleFishSpooked")) == 1 then
      playsound(GetSoundKeyword("toggleFishSpooked"), "fishing/spooked.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^A fish darts away from the bait, spooked by the chum\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleFishSpooked")) == 1 then
      playsound(GetSoundKeyword("toggleFishSpooked"), "fishing/spooked.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You jiggle the fishing line up and down in consistent motions\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleFishJiggle")) == 1 then
      playsound(GetSoundKeyword("toggleFishJiggle"), "fishing/jiggle.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You tug.*and set the hook!$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleFishTug")) == 1 then
      playsound(GetSoundKeyword("toggleFishTug"), "fishing/tug.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^A fish starts to circle the bait\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleFishCircle")) == 1 then
      playsound(GetSoundKeyword("toggleFishCircle"), "fishing/circling.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^\w* casts out a line.*" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleFishCast")) == 1 then
      playsound(GetSoundKeyword("toggleFishCast"), "fishing/fishcast.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You cast out a line.*" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleFishCast")) == 1 then
      playsound(GetSoundKeyword("toggleFishCast"), "fishing/fishcast.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You reel in the line and stop fishing\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleReel")) == 1 then
      playsound(GetSoundKeyword("toggleReel"), "fishing/reel.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You reel in.*!$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleReel")) == 1 then
      playsound(GetSoundKeyword("toggleReel"), "fishing/reel.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match=".*snaps in half from the weight of.*!$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("togglePoleSnap")) == 1 then
      playsound(GetSoundKeyword("togglePoleSnap"), "fishing/polesnap.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You now follow.*\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleFollow")) == 1 then
      playsound(GetSoundKeyword("toggleFollow"), "grouping/follow.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You stop following.*\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleUnfollow")) == 1 then
      playsound(GetSoundKeyword("toggleUnfollow"), "grouping/unfollow.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^The Gods have forsaken you\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleRecallFail")) == 1 then
      playsound(GetSoundKeyword("toggleRecallFail"), "movement/recall_fail.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^\D* has sent you a friend request\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleFriendRequest")) == 1 then
      playsound(GetSoundKeyword("toggleFriendRequest"), "notifications/received_friend_request.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^\D* has reciprocated your friend request\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleFriendAccept")) == 1 then
      playsound(GetSoundKeyword("toggleFriendAccept"), "notifications/accepted_friend_request.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You give.*a gift of.*!$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleGiftSend")) == 1 then
      playsound(GetSoundKeyword("toggleGiftSend"), "notifications/gift_send.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^\D* has given you a gift of.*!$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleGift")) == 1 then
      playsound(GetSoundKeyword("toggleGift"), "notifications/gift.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You are stunned!$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleStun")) == 1 then
      playsound(GetSoundKeyword("toggleStun"), "combat/stun_you.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^\D* is stunned!$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleStunVictim")) == 1 then
      playsound(GetSoundKeyword("toggleStunVictim"), "combat/stun_victim.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You are dazed for the next.*second.*!$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleDaze")) == 1 then
      playsound(GetSoundKeyword("toggleDaze"), "combat/daze_you.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^\D* is dazed!$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleDazeVictim")) == 1 then
      playsound(GetSoundKeyword("toggleDazeVictim"), "combat/daze_victim.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^Your beloved \w* reunites with you\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleReunion")) == 1 then
      playsound(GetSoundKeyword("toggleReunion"), "misc/reunion.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You reunite with your loved one, \w*\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleReunion")) == 1 then
      playsound(GetSoundKeyword("toggleReunion"), "misc/reunion.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match=".*DISARMS you and sends your weapon flying!$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleDisarm")) == 1 then
      playsound(GetSoundKeyword("toggleDisarm"), "combat/disarmed.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match=".*disarms.*and sends.*weapon flying!$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleDisarm")) == 1 then
      playsound(GetSoundKeyword("toggleDisarm"), "combat/disarmed.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^The cooldown for.* has ended\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleCooldown")) == 1 then
      playsound(GetSoundKeyword("toggleCooldown"), "combat/cooldown.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^An arrow sticks in the ground at.*feet!$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleArrowMiss")) == 1 then
      playsound(GetSoundKeyword("toggleArrowMiss"), "skills/arrow_miss.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You disarm.*and send.*weapon flying!$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleDisarm")) == 1 then
      playsound(GetSoundKeyword("toggleDisarm"), "combat/you_disarm.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You donate.*and it appears in .*" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleDonate")) == 1 then
      playsound(GetSoundKeyword("toggleDonate"), "items/donate.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You put.*in.*\." regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("togglePut")) == 1 then
      playsound(GetSoundKeyword("togglePut"), "items/put.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You attempt to polish.*and scratch the surface instead*\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("togglePolishGem")) == 1 then
      playsound(GetSoundKeyword("togglePolishGem"), "crafting/polish_gem_fail.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match=".*fails to bind with .*\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleRuneBind")) == 1 then
      playsound(GetSoundKeyword("toggleRuneBind"), "items/rune_fail.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match=".*glows brightly with.*causing it to shatter\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleRuneBind")) == 1 then
      playsound(GetSoundKeyword("toggleRuneBind"), "items/rune_fail.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match=".*was successfully bound to.*\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleRuneBind")) == 1 then
      playsound(GetSoundKeyword("toggleRuneBind"), "items/rune_success.ogg")
    end
  </send>
</trigger>


<trigger
   enabled="y" keep_evaluating="y" match="^You bind.*with.*\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleRuneBind")) == 1 then
      playsound(GetSoundKeyword("toggleRuneBind"), "items/rune_success.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You destroy.*!$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleDestroy")) == 1 then
      playsound(GetSoundKeyword("toggleDestroy"), "items/destroy.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You fertilize.*with a pile of dung\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleGardenFertilize")) == 1 then
      playsound(GetSoundKeyword("toggleGardenFertilize"), "crafting/gardening/fertilize.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You scoop away a handful of dirt and unearth.*\!$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleForageSeed")) == 1 then
       playsound(GetSoundKeyword("toggleForageSeed"), "crafting/forage/seed.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You dispose of.*seed.*\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleGardenDestroy")) == 1 then
      playsound(GetSoundKeyword("toggleGardenDestroy"), "crafting/gardening/destroy_garden.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You unearth.*and dispose of it\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleGardenDestroy")) == 1 then
      playsound(GetSoundKeyword("toggleGardenDestroy"), "crafting/gardening/destroy_garden.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You twist the fibers of the willow shoot until flexible as a rope and begin winding them into a handle\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleCraftTwist")) == 1 then
      playsound(GetSoundKeyword("toggleCraftTwist"), "crafting/creation/twist_begin.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You twist too forcefully and the willow shoot snaps and breaks!$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleCraftTwistFail")) == 1 then
      playsound(GetSoundKeyword("toggleCraftTwistFail"), "crafting/creation/twist_fail.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You begin blowing the glass into shape\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleCraftBlowGlass")) == 1 then
      playsound(GetSoundKeyword("toggleCraftBlowGlass"), "crafting/creation/blow_glass.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You tuck.*into.*\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleGardenPlant")) == 1 then
      playsound(GetSoundKeyword("toggleGardenPlant"), "crafting/gardening/plant.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You extract.*from.*\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleDestroy")) == 1 then
      playsound(GetSoundKeyword("toggleDestroy"), "items/destroy.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You engrave.*with your name\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleEngrave")) == 1 then
      playsound(GetSoundKeyword("toggleEngrave"), "crafting/engrave.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You imbue.*with.*\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleImbue")) == 1 then
      playsound(GetSoundKeyword("toggleImbue"), "crafting/imbue"..math.random(1,3)..".ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^Alas, you cannot go.*\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleAlas")) == 1 then
      playsound(GetSoundKeyword("toggleAlas"), "movement/alas.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^.* is sucked into Limbo\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("togglePetDeath")) == 1 then
      playsound(GetSoundKeyword("togglePetDeath"), "mobs/pet_died.ogg")
    end
  </send>
</trigger>


<trigger
   enabled="y" keep_evaluating="y" match="^You are out of throwing stars!$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleThrowEmpty")) == 1 then
      playsound(GetSoundKeyword("toggleThrowEmpty"), "skills/empty.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You need an arrow to shoot!$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleArrowEmpty")) == 1 then
      playsound(GetSoundKeyword("toggleArrowEmpty"), "skills/empty.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^PANIC! You couldn't escape!$" regexp="y" send_to="12" sequence="100">
  <send>
    num = tonumber(GetVariable("fleesound"))
    -- If panic sound is playing, don't play it again
    if tonumber(GetVariable("toggleFleeFail")) == 1 and (num == nil or num == 0 or ppi.isPlaying(num) ~= 1) then
      result = playsound(GetSoundKeyword("toggleFleeFail"), "combat/flee_fail.ogg")
      if result ~= nil then
         SetVariable("fleesound", result)
      end
    end
  </send>
</trigger>

  <trigger
    enabled="y" keep_evaluating="y" match="^\[SCRAMBLE\] Can you unscramble the phrase\?$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleUnscrambleStart")) == 1 then
       playsound(GetSoundKeyword("toggleUnscrambleStart"), "games/unscramble_start.ogg")
    end
  </send>
  </trigger>

  <trigger
    enabled="y" keep_evaluating="y" match="^\[SCRAMBLE\] .*has correctly unscrambled the phrase!$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleUnscramble")) == 1 then
       playsound(GetSoundKeyword("toggleUnscramble"), "games/unscramble_end.ogg")
    end
  </send>
  </trigger>

  <trigger
    enabled="y" keep_evaluating="y" match="^YOU UNSCRAMBLED THE PHRASE! YOU WIN.*!!$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleUnscramble")) == 1 then
       playsound(GetSoundKeyword("toggleUnscramble"), "games/unscramble_phrase.ogg")
    end
  </send>
  </trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^\[.*\] You have conquered the Colosseum!$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleColosseumWin")) == 1 then
      playsound(GetSoundKeyword("toggleColosseumWin"), "misc/colosseum_win.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^Your limit break has reached 100%!!!$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleLimitBreak")) == 1 then
      playsound(GetSoundKeyword("toggleLimitBreak"), "misc/limit_break.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match=".*charges to attack!$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleAggro")) == 1 then
      playsound(GetSoundKeyword("toggleAggro"), "combat/aggro.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match=".* screams and attacks!$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleAggro")) == 1 then
      playsound(GetSoundKeyword("toggleAggro"), "combat/aggro.ogg")
    end
  </send>
</trigger>

  <trigger
   enabled="y" keep_evaluating="y" match="^QUEST: You may now quest again\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleQuestTimer")) == 1 then
      playsound(GetSoundKeyword("toggleQuestTimer"), "quests/quest_timer.ogg")
    end
  </send>
</trigger>

  <trigger
   enabled="y" keep_evaluating="y" match="^GQ: You may now join a global quest again\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleGqTimer")) == 1 then
      playsound(GetSoundKeyword("toggleGqTimer"), "quests/gq_timer.ogg")
    end
  </send>
</trigger>

  <trigger
   enabled="y" keep_evaluating="y" match="^You take a bite out of.*$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleEat")) == 1 then
       playsound(GetSoundKeyword("toggleEat"), "items/eat"..math.random(1,3)..".ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You crush up.*$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleCrush")) == 1 then
       playsound(GetSoundKeyword("toggleCrush"), "crafting/crush.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You dip the wood into a pool of liquid sulfur and wait for it to dry\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleCraftDip")) == 1 then
       playsound(GetSoundKeyword("toggleCraftDip"), "crafting/creation/dip_match.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You eat.*$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleEat")) == 1 then
       playsound(GetSoundKeyword("toggleEat"), "items/eat"..math.random(1,3)..".ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You quaff.*$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleQuaff")) == 1 then
       playsound(GetSoundKeyword("toggleQuaff"), "items/quaff.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You start shredding.*into chips of wood\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleCraftCarve")) == 1 then
       playsound(GetSoundKeyword("toggleCraftCarve"), "crafting/creation/carve.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You begin carving.*\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleCraftCarve")) == 1 then
       playsound(GetSoundKeyword("toggleCraftCarve"), "crafting/creation/carve.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You finish weaving the strands together, creating.*\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleCraftWoven")) == 1 then
       playsound(GetSoundKeyword("toggleCraftWoven"), "crafting/woven.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You have crafted.*!.*" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleCraftComplete")) == 1 then
       playsound(GetSoundKeyword("toggleCraftComplete"), "crafting/creation/craft_complete.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You begin cutting the leather.*\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleCraftCutLeather")) == 1 then
       playsound(GetSoundKeyword("toggleCraftCutLeather"), "crafting/creation/cut_leather.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You begin cutting the willow.*\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleCraftCutWillow")) == 1 then
       playsound(GetSoundKeyword("toggleCraftCutWillow"), "crafting/creation/cut_willow.ogg")
    end
  </send>
</trigger>


<trigger
   enabled="y" keep_evaluating="y" match="^You arrange the wood and coal and prepare to heat.*\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleCraftArrange")) == 1 then
       playsound(GetSoundKeyword("toggleCraftArrange"), "crafting/creation/arrange.ogg")
    end
  </send>
</trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You grip.*and prepare.*\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleCraftGrip")) == 1 then
       playsound(GetSoundKeyword("toggleCraftGrip"), "crafting/creation/grip_tool.ogg")
    end
  </send>
</trigger>

  <trigger
   enabled="y" keep_evaluating="y" match="^You brew.*more potions using.*as a base\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleBrew")) == 1 then
       playsound(GetSoundKeyword("toggleBrew"), "alchemy/brew_potion.ogg")
    end
  </send>
</trigger>

  <trigger
   enabled="y" keep_evaluating="y" match=".*explodes violently!$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleFumble")) == 1 then
       playsound(GetSoundKeyword("toggleFumble"), "alchemy/fumble.ogg")
    end
  </send>
</trigger>

  <trigger
   enabled="y" keep_evaluating="y" match="^You can't concentrate enough\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleCannotConcentrate")) == 1 then
       playsound(GetSoundKeyword("toggleCannotConcentrate"), "spells/cannot_concentrate.ogg")
    end
  </send>
</trigger>

  <trigger
   enabled="y" keep_evaluating="y" match="^You lost your concentration while trying to cast.*\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleLostConcentration")) == 1 then
       playsound(GetSoundKeyword("toggleLostConcentration"), "spells/lose_concentration.ogg")
    end
  </send>
</trigger>

  <trigger
   enabled="y" keep_evaluating="y" match="^Page \d+ of \d+:.*" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("togglePage")) == 1 then
       playsound(GetSoundKeyword("togglePage"), "items/turn_page.ogg")
    end
  </send>
</trigger>

  <trigger
   enabled="y" keep_evaluating="y" match=".*has killed the.*monster! 2x EXP.*Minutes!.*" regexp="y" send_to="12" sequence="100">
  <send>

    if tonumber(GetVariable("toggleMonsterBonus")) == 1 then
       playsound(GetSoundKeyword("toggleMonsterBonus"), "mobs/monster_bonus.ogg")
    end
  </send>
</trigger>

  <trigger
   enabled="y" keep_evaluating="y" match="^You clear away a pile of leaves and.*leaps forth with a snarl!$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleForageLeafSnarl")) == 1 then
       playsound(GetSoundKeyword("toggleForageLeafSnarl"), "crafting/forage/leaves_growl.ogg")
    end
  </send>
  </trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You splash through mud and grime, hoping to find loot\.$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleForageMudGrime")) == 1 then
       playsound(GetSoundKeyword("toggleForageMudGrime"), "crafting/forage/mud_walking.ogg")
    end
  </send>
  </trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You dip your hands into the water, fishing for something near the bottom\.$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleForageDipFish")) == 1 then
       playsound(GetSoundKeyword("toggleForageDipFish"), "crafting/forage/water_sifting.ogg")
    end
  </send>
  </trigger>

<trigger
   enabled="y" keep_evaluating="y" match="You comb through the silt, seeking hidden treasures\.$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleForageCombSilt")) == 1 then
       playsound(GetSoundKeyword("toggleForageCombSilt"), "crafting/forage/comb_silt.ogg")
    end
  </send>
  </trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You wipe gunk off your hand, inspecting it closely\.$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleForageWipeGunk")) == 1 then
       playsound(GetSoundKeyword("toggleForageWipeGunk"), "crafting/forage/wipe_gunk.ogg")
    end
  </send>
  </trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You pluck.*caught on a branch\.$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleForagePluckBranch")) == 1 then
       playsound(GetSoundKeyword("toggleForagePluckBranch"), "crafting/forage/pluck_branch.ogg")
    end
  </send>
  </trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You pluck.*caught on a branch\.$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleForagePluckBranch")) == 1 then
       playsound(GetSoundKeyword("toggleForagePluckBranch"), "crafting/forage/pluck_branch.ogg")
    end
  </send>
  </trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You pluck.*from the ground where it clings to a bit of moss\.$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleForagePickBush")) == 1 then
       playsound(GetSoundKeyword("toggleForagePickBush"), "crafting/forage/pick_bush.ogg")
    end
  </send>
  </trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You rinse.*off in the water\!$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleForageRinseWater")) == 1 then
       playsound(GetSoundKeyword("toggleForageRinseWater"), "crafting/forage/rinse_water.ogg")
    end
  </send>
  </trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You dig into the soil and unearth.*\.$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleForageDigSoil")) == 1 then
       playsound(GetSoundKeyword("toggleForageDigSoil"), "crafting/forage/dig_soil.ogg")
    end
  </send>
  </trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You turn over a rock and find.*in the dirt\.$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleForageRockTurnover")) == 1 then
       playsound(GetSoundKeyword("toggleForageRockTurnover"), "crafting/forage/rock_turnover.ogg")
    end
  </send>
  </trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You dig into the soil and extract.*\.$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleForageDigSoil")) == 1 then
       playsound(GetSoundKeyword("toggleForageDigSoil"), "crafting/forage/dig_soil.ogg")
    end
  </send>
  </trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You nudge a rotten log aside with your toe and discover .*\!$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleForageRottenLog")) == 1 then
       playsound(GetSoundKeyword("toggleForageRottenLog"), "crafting/forage/rotten_log.ogg")
    end
  </send>
  </trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You scoop up.*before it floats on by\!$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleForageScoopFloat")) == 1 then
       playsound(GetSoundKeyword("toggleForageScoopFloat"), "crafting/forage/scoop_float.ogg")
    end
  </send>
  </trigger>


<trigger
   enabled="y" keep_evaluating="y" match="^You toe at a pile of wet leaves\.$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleForageToeWetLeaves")) == 1 then
       playsound(GetSoundKeyword("toggleForageToeWetLeaves"), "crafting/forage/toe_dead_leaves.ogg")
    end
  </send>
  </trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You lift a low branch of a tree and examine the ground\.$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleForageLiftBranch")) == 1 then
       playsound(GetSoundKeyword("toggleForageLiftBranch"), "crafting/forage/lift_branch.ogg")
    end
  </send>
  </trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You part some tall grass and comb the area\.$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleForageCombGrass")) == 1 then
       playsound(GetSoundKeyword("toggleForageCombGrass"), "crafting/forage/comb_grass.ogg")
    end
  </send>
  </trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You comb through some low grass\.$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleForageCombGrass")) == 1 then
       playsound(GetSoundKeyword("toggleForageCombGrass"), "crafting/forage/comb_grass.ogg")
    end
  </send>
  </trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You examine a berry growing from a bush\.$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleForageBerryBush")) == 1 then
       playsound(GetSoundKeyword("toggleForageBerryBush"), "crafting/forage/berry_bush.ogg")
    end
  </send>
  </trigger>

  <trigger
   enabled="y" keep_evaluating="y" match="^You examine some colorful berries on a branch\.$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleForageBerryBush")) == 1 then
       playsound(GetSoundKeyword("toggleForageBerryBush"), "crafting/forage/berry_bush.ogg")
    end
  </send>
  </trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You peek inside the knothole of a tree\.$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleForagePeekKnothole")) == 1 then
       playsound(GetSoundKeyword("toggleForagePeekKnothole"), "crafting/forage/peek_knothole.ogg")
    end
  </send>
  </trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You peek under a rock\.$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleForagePeekRock")) == 1 then
       playsound(GetSoundKeyword("toggleForagePeekRock"), "crafting/forage/peek_rock.ogg")
    end
  </send>
  </trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You roll over a log covered in moss\.$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleForageRollLog")) == 1 then
       playsound(GetSoundKeyword("toggleForageRollLog"), "crafting/forage/roll_log.ogg")
    end
  </send>
  </trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You didn't find anything useful\.$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleForageFoundNothing")) == 1 then
       playsound(GetSoundKeyword("toggleForageFoundNothing"), "crafting/forage/found_nothing.ogg")
    end
  </send>
  </trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^The area looks picked over\.$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleForagePickedOver")) == 1 then
       playsound(GetSoundKeyword("toggleForagePickedOver"), "crafting/forage/picked_over.ogg")
    end
  </send>
  </trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You scrape resin off of a tree\!$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleForageScrapeResin")) == 1 then
       playsound(GetSoundKeyword("toggleForageScrapeResin"), "crafting/forage/scrape_resin.ogg")
    end
  </send>
  </trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You discover.*among a patch of stones\!$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleForageGem")) == 1 then
       playsound(GetSoundKeyword("toggleForageGem"), "crafting/forage/gem.ogg")
    end
  </send>
  </trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You carefully loosen.*from a tree branch\.$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleForageTreeBranch")) == 1 then
       playsound(GetSoundKeyword("toggleForageTreeBranch"), "crafting/forage/tree_branch.ogg")
    end
  </send>
  </trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You spot.*pulsing in a hollow tree stump\!$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleForageRune")) == 1 then
       playsound(GetSoundKeyword("toggleForageRune"), "crafting/forage/rune.ogg")
    end
  </send>
  </trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You spot.*glowing at the base of a tree\!$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleForageRune")) == 1 then
       playsound(GetSoundKeyword("toggleForageRune"), "crafting/forage/rune.ogg")
    end
  </send>
  </trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You clear away some leaves and discover.*underneath a gnarled tree root\!$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleForageRune")) == 1 then
       playsound(GetSoundKeyword("toggleForageRune"), "crafting/forage/rune.ogg")
    end
  </send>
  </trigger>

  <trigger
   enabled="y" keep_evaluating="y" match="^You find.*gleaming at the bottom of a puddle\!$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleForageGem")) == 1 then
       playsound(GetSoundKeyword("toggleForageGem"), "crafting/forage/gem.ogg")
    end
  </send>
  </trigger>

  <trigger
   enabled="y" keep_evaluating="y" match="^You spot.*tucked inside the knothole of a tree\!$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleForageGem")) == 1 then
       playsound(GetSoundKeyword("toggleForageGem"), "crafting/forage/gem.ogg")
    end
  </send>
  </trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^Your hand brushes against something and you quickly yank out.*from the water\!$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleForageWaterYank")) == 1 then
       playsound(GetSoundKeyword("toggleForageWaterYank"), "crafting/forage/water_yank.ogg")
    end
  </send>
  </trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You scoop your hand into the muck and pull out.*\!$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleForageScoopMuck")) == 1 then
       playsound(GetSoundKeyword("toggleForageScoopMuck"), "crafting/forage/scoop_muck.ogg")
    end
  </send>
  </trigger>


<trigger
   enabled="y" keep_evaluating="y" match="^You sift through the muck\.$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleForageSiftMuck")) == 1 then
       playsound(GetSoundKeyword("toggleForageSiftMuck"), "crafting/forage/mud_bubble.ogg")
    end
  </send>
  </trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You sift through a handful of muck and pebbles\.$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleForageSift")) == 1 then
       playsound(GetSoundKeyword("toggleForageSift"), "crafting/forage/water_sifting.ogg")
    end
  </send>
  </trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^Something brushes your hand and you yank it out, clutching a handful of muck\.$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleForageMuck")) == 1 then
       playsound(GetSoundKeyword("toggleForageMuck"), "crafting/forage/sift_muck.ogg")
    end
  </send>
  </trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You dip your hand into the water and hope it comes back out again\.$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleForageDip")) == 1 then
       playsound(GetSoundKeyword("toggleForageDip"), "crafting/forage/water_dip.ogg")
    end
  </send>
  </trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You push over a log and.*scuttles out!$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleForageScuttle")) == 1 then
       playsound(GetSoundKeyword("toggleForageScuttle"), "crafting/forage/scuttle.ogg")
    end
  </send>
  </trigger>

  <trigger
   enabled="y" keep_evaluating="y" match="^You push a rock to turn it over and.*wakes with a rumbling growl!$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleForageRockGrowl")) == 1 then
       playsound(GetSoundKeyword("toggleForageRockGrowl"), "crafting/forage/monster_growl.ogg")
    end
  </send>
  </trigger>

  <trigger
   enabled="y" keep_evaluating="y" match="^You polish.*to a shine\.$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("togglePolishGem")) == 1 then
       playsound(GetSoundKeyword("togglePolishGem"), "crafting/polish_gem.ogg")
    end
  </send>
  </trigger>

  <trigger
   enabled="y" keep_evaluating="y" match="^Hint:.*" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleTips")) == 1 then
       playsound(GetSoundKeyword("toggleTips"), "misc/hint.ogg")
    end
  </send>
  </trigger>

  <trigger
   enabled="y" keep_evaluating="y" match=".*You have \d+:\d+ to complete this quest.'.*" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleQuestRequest")) == 1 then
       playsound(GetSoundKeyword("toggleQuestRequest"), "quests/quest_request.ogg")
    end
  </send>
  </trigger>

  <trigger
   enabled="y" keep_evaluating="y" match="^You are carrying:$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleInventory")) == 1 then
       playsound(GetSoundKeyword("toggleInventory"), "items/inventory.ogg")
    end
  </send>
  </trigger>

  <trigger
   enabled="y" keep_evaluating="y" match="^You die! R\.I\.P\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleDied")) == 1 then
       playsound(GetSoundKeyword("toggleDied"), "hp/you_died.ogg")
    end
  </send>
  </trigger>

  <trigger enabled="y" ignore_case="y" keep_evaluating="y" match="*[Exits: *]*" send_to="12" sequence="100">
     <send>historyadd("exits","%0")</send>
  </trigger>

  <trigger enabled="y" group="sounds/events" ignore_case="y" keep_evaluating="y" match="*You spot 'Guess the Phrase' letter*" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleGuessFind")) == 1 then
       playsound(GetSoundKeyword("toggleGuessFind"), "games/scrabble.ogg")
    end
  </send>
  </trigger>

<trigger enabled="y" keep_evaluating="y" match="^\D* has gone linkdead\.$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleLinkdead")) == 1 then
       playsound(GetSoundKeyword("toggleLinkdead"), "misc/linkdead.ogg")
    end
  </send>
  </trigger>

    <trigger
   enabled="y" keep_evaluating="y" match="^You recall!$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleRecall")) == 1 then
       playsound(GetSoundKeyword("toggleRecall"), "movement/recall.ogg")
    end
  </send>
  </trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You drop .*\." regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleDrop")) == 1 then
       playsound(GetSoundKeyword("toggleDrop"), "items/drop.ogg")
    end
</send>
  </trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^A warm feeling fills your body. \(\d+hp.*" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleHeal")) == 1 then
       playsound(GetSoundKeyword("toggleHeal"), "hp/heal.ogg")
    end
</send>
  </trigger>

  <trigger
   enabled="y" keep_evaluating="y" match=".*The fabled.*of Erion lies here.*" regexp="y" send_to="12" sequence="100" >
  <send>
      if tonumber(GetVariable("toggleQuestItem")) == 1 then
         playsound(GetSoundKeyword("toggleQuestItem"), "quests/fabled.ogg")
      end
</send>
  </trigger>

  <trigger
   enabled="y" keep_evaluating="y" match="\[QUEST TARGET\].*" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleQTarget")) == 1 then
       playsound(GetSoundKeyword("toggleQTarget"), "quests/quest_target.ogg")
    end
</send>
  </trigger>

<trigger
   enabled="y" keep_evaluating="y" match="\[EXPEDITION TARGET\].*" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleETarget")) == 1 then
       playsound(GetSoundKeyword("toggleETarget"), "quests/expedition_target.ogg")
    end
</send>
  </trigger>

    <trigger
   enabled="y" keep_evaluating="y" match=".* just sent you a tell\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleTell")) == 1 then
       playsound(GetSoundKeyword("toggleTell"), "channels/tell.ogg")
    end
  </send>
  </trigger>


  <trigger
   enabled="y" keep_evaluating="y" match="\[GQ TARGET\].*" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleGqTarget")) == 1 then
       playsound(GetSoundKeyword("toggleGqTarget"), "quests/gq_target.ogg")
    end
</send>
  </trigger>

  <trigger
   enabled="y" keep_evaluating="y" match="\[GROUP TARGET\].*" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleGqTarget")) == 1 then
       playsound(GetSoundKeyword("toggleGqTarget"), "quests/group_target.ogg")
    end
</send>
  </trigger>

  <trigger
   enabled="y" keep_evaluating="y" match="\[Global Quest\] .*" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleGquest")) == 1 then
       playsound(GetSoundKeyword("toggleGquest"), "quests/gquest.ogg")
    end
    historyadd("global quests","%0")
</send>
  </trigger>

  <trigger
   enabled="y"  keep_evaluating="y"  match="^A Legend has been born! Congratulations, .*!$"  regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleLegend")) == 1 then
       playsound(GetSoundKeyword("toggleLegend"), "exp/legend.ogg")
    end
</send>
  </trigger>

    <trigger
   enabled="y"  keep_evaluating="y"  match=".*the newest.*HERO of Erion.*"  regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleHero")) == 1 then
       playsound(GetSoundKeyword("toggleHero"), "exp/newbornhero.ogg")
    end
</send>
  </trigger>

  <trigger
   enabled="y" keep_evaluating="y" match="^Congratulations! You have added the.* *class\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleAddclass")) == 1 then
       playsound(GetSoundKeyword("toggleAddclass"), "misc/addclass.ogg")
    end
</send>
  </trigger>

  <trigger
   enabled="y" keep_evaluating="y" match="^You WIN your .* global quest.*" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleGqwin")) == 1 then
       playsound(GetSoundKeyword("toggleGqwin"), "quests/gqwin.ogg")
    end
</send>
  </trigger>

  <trigger
   enabled="y" keep_evaluating="y" match="^You buy.*for \d+ gold\.$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleBuy")) == 1 then
       playsound(GetSoundKeyword("toggleBuy"), "items/buy.ogg")
    end
</send>
  </trigger>

  <trigger
   enabled="y" keep_evaluating="y" match="^You are wearing:$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleEq")) == 1 then
       playsound(GetSoundKeyword("toggleEq"), "items/eq.ogg")
    end
</send>
  </trigger>

  <trigger
   enabled="y" keep_evaluating="y" match=".*shatters upon use!$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleShatterKey")) == 1 then
       playsound(GetSoundKeyword("toggleShatterKey"), "items/shatter_key.ogg")
    end
</send>
  </trigger>

  <trigger
   enabled="y" keep_evaluating="y" match=".*Click.*You unlock.*with.*\.$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleUnlockDoor")) == 1 then
       playsound(GetSoundKeyword("toggleUnlockDoor"), "exits/unlock_door.ogg")
    end
</send>
  </trigger>

  <trigger
   enabled="y" keep_evaluating="y" match="^You throw.*at.*but.*sees it coming and is able to dodge it just in time\.$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleSnowballDodge")) == 1 then
       playsound(GetSoundKeyword("toggleSnowballDodge"), "misc/snowball_dodge.ogg")
    end
</send>
  </trigger>

  <trigger
   enabled="y" keep_evaluating="y" match="^Incoming!.*throws.*at you but you see it coming and dodge it just in time\.$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleSnowballDodge")) == 1 then
       playsound(GetSoundKeyword("toggleSnowballDodge"), "misc/snowball_dodge.ogg")
    end
</send>
  </trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You throw.*at.*and it hits.*square in the face!$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleSnowball")) == 1 then
       playsound(GetSoundKeyword("toggleSnowball"), "misc/snowball.ogg")
    end
</send>
  </trigger>


<trigger
   enabled="y" keep_evaluating="y" match="^Whoosh!.*throws.*at you and it hits you square in the face!$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleSnowball")) == 1 then
       playsound(GetSoundKeyword("toggleSnowball"), "misc/snowball.ogg")
    end
</send>
  </trigger>

  <trigger
   enabled="y" keep_evaluating="y" match="^You get Scrabble Tile.* from .*corpse.*" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleScrabble")) == 1 then
       playsound(GetSoundKeyword("toggleScrabble"), "games/scrabble.ogg")
    end
</send>
  </trigger>

  <trigger
   enabled="y" keep_evaluating="y" match=".*Scrabble Tile \[.*\] lies here\..*" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleScrabble")) == 1 then
       playsound(GetSoundKeyword("toggleScrabble"), "games/scrabble.ogg")
    end
</send>
  </trigger>

  <trigger
   enabled="y" keep_evaluating="y" match=".*goes up in flames and burns to ashes!$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleCookBurnt")) == 1 then
       playsound(GetSoundKeyword("toggleCookBurnt"), "crafting/cooking/burnt.ogg")
    end
</send>
  </trigger>

  <trigger
   enabled="y" keep_evaluating="y" match=".*sizzles deliciously over the fire\.$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleCookSizzle")) == 1 then
       playsound(GetSoundKeyword("toggleCookSizzle"), "crafting/cooking/sizzle.ogg")
    end
</send>
  </trigger>

  <trigger
   enabled="y" keep_evaluating="y" match="^The fire hisses as fat drips from.*\.$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleCookSizzle")) == 1 then
       playsound(GetSoundKeyword("toggleCookSizzle"), "crafting/cooking/sizzle.ogg")
    end
</send>
  </trigger>

  <trigger
   enabled="y" keep_evaluating="y" match="^You pierce.*with a spit and it begins to sizzle over the fire\.$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleCookSizzle")) == 1 then
       playsound(GetSoundKeyword("toggleCookSizzle"), "crafting/cooking/sizzle.ogg")
    end
</send>
  </trigger>

  <trigger
   enabled="y" keep_evaluating="y" match="^You slide.*off the spit. Mmm, perfect!$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleCookDing")) == 1 then
       playsound(GetSoundKeyword("toggleCookDing"), "crafting/cooking/ding.ogg")
    end
</send>
  </trigger>

  <trigger
   enabled="y" keep_evaluating="y" match="\[Rankings\].*" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleRank")) == 1 then
       playsound(GetSoundKeyword("toggleRank"), "notifications/rankup.ogg")
    end
</send>
  </trigger>

  <trigger
   enabled="y" keep_evaluating="y" match="^You swing.*and create the first notch in.*" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleChop")) == 1 then
       playsound(GetSoundKeyword("toggleChop"), "crafting/woodwork/chop"..math.random(1,3)..".ogg")
    end
</send>
  </trigger>

  <trigger
   enabled="y" keep_evaluating="y" match="^You swing the pickaxe at.*\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("togglePickaxe")) == 1 then
       playsound(GetSoundKeyword("togglePickaxe"), "crafting/mining/swing/"..math.random(1,6)..".ogg")
    end
</send>
  </trigger>


  <trigger
   enabled="y" keep_evaluating="y" match="^You swing the axe at.*\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleChop")) == 1 then
       playsound(GetSoundKeyword("toggleChop"), "crafting/woodwork/chop"..math.random(1,3)..".ogg")
    end
</send>
  </trigger>

  <trigger
   enabled="y" keep_evaluating="y" match="^You split.*into.*of wood\.$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleSplitLog")) == 1 then
       playsound(GetSoundKeyword("toggleSplitLog"), "crafting/woodwork/split_log.ogg")
    end
</send>
  </trigger>

   <trigger
   enabled="y" keep_evaluating="y" match="^Dirt and rock tumble over the cluster\.$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleDebris")) == 1 then
       playsound(GetSoundKeyword("toggleDebris"), "crafting/mining/debris.ogg")
    end
</send>
  </trigger>

   <trigger
   enabled="y" keep_evaluating="y" match="^You strike a match and .*" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleStrikeMatch")) == 1 then
       playsound(GetSoundKeyword("toggleStrikeMatch"), "crafting/strike_match.ogg")
    end
</send>
  </trigger>

   <trigger
   enabled="y" keep_evaluating="y" match="^A thick layer of dross has accumulated on the surface of .*\.$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleDross")) == 1 then
       playsound(GetSoundKeyword("toggleDross"), "crafting/smelting/dross.ogg")
    end
</send>
  </trigger>

   <trigger
   enabled="y" keep_evaluating="y" match="^You skim the layer of dross off a .*" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleSkimDross")) == 1 then
       playsound(GetSoundKeyword("toggleSkimDross"), "crafting/smelting/skim_dross.ogg")
    end
</send>
  </trigger>

   <trigger
   enabled="y" keep_evaluating="y" match="^You dismiss.*, your loyal protector, and set.*free\.$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("togglePetDismiss")) == 1 then
       playsound(GetSoundKeyword("togglePetDismiss"), "mobs/pet_dismiss.ogg")
    end
</send>
  </trigger>

   <trigger
   enabled="y" keep_evaluating="y" match="^You pluck.*from the center of the blossom\!$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleHarvest")) == 1 then
       playsound(GetSoundKeyword("toggleHarvest"), "crafting/gardening/harvest.ogg")
    end
</send>
  </trigger>

   <trigger
   enabled="y" keep_evaluating="y" match="^You sure are DYING!$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleBleed")) == 1 then
       playsound(GetSoundKeyword("toggleBleed"), "hp/bleed.ogg")
    end
</send>
  </trigger>

   <trigger
   enabled="y" keep_evaluating="y" match="^You snap a willow shoot from the base of a willow tree\.$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleWillow")) == 1 then
       playsound(GetSoundKeyword("toggleWillow"), "crafting/forage/willow.ogg")
    end
</send>
  </trigger>

     <trigger
   enabled="y" keep_evaluating="y" match="^The flames change from.*to.*\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleFlamesChange")) == 1 then
       playsound(GetSoundKeyword("toggleFlamesChange"), "crafting/smelting/flames_change.ogg")
    end
</send>
  </trigger>

     <trigger
   enabled="y" keep_evaluating="y" match="^You skim off too much dross and destroy the liquid ores\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleStoke")) == 1 then
       playsound(GetSoundKeyword("toggleStoke"), "crafting/smelting/skim_fail.ogg")
    end
</send>
  </trigger>

     <trigger
   enabled="y" keep_evaluating="y" match="^You stoke the flames and .*" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleStoke")) == 1 then
       playsound(GetSoundKeyword("toggleStoke"), "crafting/smelting/stoke.ogg")
    end
</send>
  </trigger>

   <trigger
   enabled="y" keep_evaluating="y" match="^You swing.*at the cluster, picking up where you left off\.$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleMine")) == 1 then
       playsound(GetSoundKeyword("toggleMine"), "crafting/mining/mine.ogg")
    end
</send>
  </trigger>

   <trigger
   enabled="y" keep_evaluating="y" match="^You swing.*and hack away at a cluster that another miner abandoned\.$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleMine")) == 1 then
       playsound(GetSoundKeyword("toggleMine"), "crafting/mining/mine.ogg")
    end
</send>
  </trigger>


   <trigger
   enabled="y" keep_evaluating="y" match="^You swing.*and start hacking away at a cluster\.$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleMine")) == 1 then
       playsound(GetSoundKeyword("toggleMine"), "crafting/mining/mine.ogg")
    end
</send>
  </trigger>

   <trigger
   enabled="y" keep_evaluating="y" match="^You swing too hard and.*breaks!$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleFellingaxeBreak")) == 1 then
       playsound(GetSoundKeyword("toggleFellingaxeBreak"), "crafting/mining/pickaxe_break.ogg")
    end
</send>
  </trigger>


   <trigger
   enabled="y" keep_evaluating="y" match="^.*'s handle cracks in half\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("togglePickaxeBreak")) == 1 then
       playsound(GetSoundKeyword("togglePickaxeBreak"), "crafting/mining/pickaxe_break.ogg")
    end
</send>
  </trigger>

   <trigger
   enabled="y" keep_evaluating="y" match="^You extract .*ore!$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleOre")) == 1 then
       playsound(GetSoundKeyword("toggleOre"), "crafting/mining/ore.ogg")
    end
</send>
  </trigger>

   <trigger
   enabled="y" keep_evaluating="y" match="^You extract .*coal!$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleCoal")) == 1 then
       playsound(GetSoundKeyword("toggleCoal"), "crafting/mining/coal.ogg")
    end
</send>
  </trigger>

   <trigger
   enabled="y" keep_evaluating="y" match="^You extract .*salt!$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleSalt")) == 1 then
       playsound(GetSoundKeyword("toggleSalt"), "crafting/mining/salt.ogg")
    end
</send>
  </trigger>

  <trigger
   enabled="y" keep_evaluating="y" match="^.*starts to fall in your direction and knocks you down with bone-crushing force! OUCH!$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleTreefall")) == 1 then
       playsound(GetSoundKeyword("toggleTreefall"), "crafting/woodwork/treefall1.ogg")
    end
</send>
  </trigger>

  <trigger
   enabled="y" keep_evaluating="y" match="^.*starts to fall away from you and lands with a CRASH!$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleTreefall")) == 1 then
       playsound(GetSoundKeyword("toggleTreefall"), "crafting/woodwork/treefall1.ogg")
    end
</send>
  </trigger>

  <trigger
   enabled="y" keep_evaluating="y" match="^You push.*over and it falls to the ground with a CRASH!$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleTreefall")) == 1 then
       playsound(GetSoundKeyword("toggleTreefall"), "crafting/woodwork/treefall2.ogg")
    end
</send>
  </trigger>

  <trigger
   enabled="y" keep_evaluating="y" match="\[INFO\] .*" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleInfo")) == 1 then
       playsound(GetSoundKeyword("toggleInfo"), "channels/info.ogg")
    end
    historyadd ("info","%0")
</send>
  </trigger>

  <trigger
   enabled="y" keep_evaluating="y" match="\[Forum\] .*" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleInfo")) == 1 then
       playsound(GetSoundKeyword("toggleInfo"), "channels/info.ogg")
    end
    historyadd ("info","%0")
</send>
  </trigger>

  <trigger
   enabled="y" keep_evaluating="y" match="^You get .*\." regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleGet")) == 1 then
       playsound(GetSoundKeyword("toggleGet"), "items/get.ogg")
    end
</send>
  </trigger>

    <trigger
   enabled="y" keep_evaluating="y" match=".* is dead! R\.I\.P\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleMobdeath")) == 1 then
       playsound(GetSoundKeyword("toggleMobdeath"), "mobs/mobdeath.ogg")
    end
</send>
  </trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You don't have enough mana to cast '.*'$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleManaDrained")) == 1 then
       playsound(GetSoundKeyword("toggleManaDrained"), "mana/mana_drained.ogg")
    end
</send>
  </trigger>

  <trigger
   enabled="y" keep_evaluating="y" match="^EXPEDITION: You may now request an expedition again\.$" regexp="y" send_to="12" sequence="100" >
  <send>
    if tonumber(GetVariable("toggleExpedTimer")) == 1 then
       playsound(GetSoundKeyword("toggleExpedTimer"), "quests/expedition_timer.ogg")
    end
</send>
  </trigger>

<trigger
   enabled="y" keep_evaluating="y" match="^You inform .* you have completed.*expedition\.$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleExpedComplete")) == 1 then
       playsound(GetSoundKeyword("toggleExpedComplete"), "quests/expedition_complete.ogg")
    end
</send>
  </trigger>


  <trigger enabled="y" keep_evaluating="y" match="^\+\=\= .* You have spelled up everyone! .* \=\=\+$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleSpellup")) == 1 then
       playsound(GetSoundKeyword("toggleSpellup"), "misc/spellup.ogg")
    end
  </send>
  </trigger>


<trigger enabled="y" keep_evaluating="y" match="^\+\=\= .* You have spelled yourself up! .* \=\=\+$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleSpellup")) == 1 then
       playsound(GetSoundKeyword("toggleSpellup"), "misc/spellup.ogg")
    end
  </send>
  </trigger>

  <trigger enabled="y" keep_evaluating="y" match="^\+\=\= .* has spelled you up! .* \=\=\+$" regexp="y" send_to="12" sequence="100">
  <send>
    if tonumber(GetVariable("toggleSpellup")) == 1 then
       playsound(GetSoundKeyword("toggleSpellup"), "misc/spellup.ogg")
    end
  </send>
  </trigger>

</triggers>

<script>
<![CDATA[

require "serialize"
utils = require "common_utils"

local NUL, IAC, SB, SE, DO = 0x00, 0xFF, 0xFA, 0xF0, 0xFD

local MSDP = 69

local MSDP_VAR = 1
local MSDP_VAL = 2

local MSDP_TABLE_OPEN = 3
local MSDP_TABLE_CLOSE = 4

local MSDP_ARRAY_OPEN = 5
local MSDP_ARRAY_CLOSE = 6

local SPECIAL_CHARS = string.char(NUL) .. string.char(MSDP_VAL) .. string.char(MSDP_VAR) .. string.char(MSDP_TABLE_OPEN) .. string.char(MSDP_TABLE_CLOSE) .. string.char(MSDP_ARRAY_OPEN) .. string.char(MSDP_ARRAY_CLOSE)

local MSDPDebug = tonumber(GetVariable("MSDPDebug")) or 0

--[[

These old_* values are values that are saved with SetVariable() and SaveState(), so that when
a copyover is initiated, player does not hear all the sounds go off due to variables resetting.
Only need these for stats and things linked to the character.

Character name starts as None so that when you first log in, it will initialize variables, and
not spam the character with sounds.

]]

-- No variables here

--[[

These are for when you log in a different character and certain values change like
the amount of you have, your level, your trains, practices, etc. It will check
if you're logging on a new character, and if so, save the new value but don't send
a sound.

]]

-- Currently no variables set here

--[[

These are the toggles for the sounds. Players can turn them on/off with the
soundpack command. They are on by default.

]]

running = 0

-- [1]keyword, [2]toggleVariable, [3]Description, [4]Sound file, [5]isMusic, [6]isAmbiance, [7]isAreaSong, [8]sectorName, [9]onByDefault, [10]isCombatSound
soundpackTable = {

    -- Sounds that trigger via MSDP variable comparisons
    {"money",         "toggleMoney",         "Increase in on-hand gold.", "", 0, 0, 0, "", 1, 0},
    {"mininggem",     "toggleMiningGem",     "Obtain a gem while mining.", "", 0, 0, 0, "", 1, 0},
    {"bosslaugh",     "toggleBossLaugh",     "Enter a room with a boss.", "", 0, 0, 0, "", 1, 0},
    {"steps",         "toggleStep",          "Move room to room without runto.", "", 0, 0, 0, "", 1, 0},
    {"enterarea",     "toggleEnterArea",     "Notification when you enter a new area.", "", 0, 0, 0, "", 1, 0},
    {"look",          "toggleLook",          "Plays sound based on room sector when you look.", "", 0, 0, 0, "", 1, 0},
    {"levelup",       "toggleLevelUp",       "Character level ups.", "", 0, 0, 0, "", 1, 0},
    {"levelother",    "toggleLevelOther",    "When someone other than you levels up.", "", 0, 0, 0, "", 1, 0},
    {"tierup",        "toggleTierup",        "When you legend tier up.", "", 0, 0, 0, "", 1, 0},
    {"tierupother",   "toggleTierupOTher",   "When someone other than you legend tier ups.", "", 0, 0, 0, "", 1, 0},
    {"fauxup",        "toggleFauxUp",        "Character faux level ups.", "", 0, 0, 0, "", 1, 0},
    {"shopbell",      "toggleShopBell",      "Enter a shop.", "", 0, 0, 0, "", 1, 0},
    {"instrument",    "toggleInstrument",    "Instrument sound.", "", 0, 0, 0, "", 1, 0},
    {"dailystart",    "toggleDailyStart",    "Starting daily challenge.", "", 0, 0, 0, "", 1, 0},
    {"dailycomplete", "toggleDailyComplete", "Completing daily challenge.", "", 0, 0, 0, "", 1, 0},
    {"dailytask",     "toggleDailyTask",     "Completing one daily challenge task.", "", 0, 0, 0, "", 1, 0},
    {"chickenegg",    "toggleChickenEgg",    "Collecting a chicken egg.", "", 0, 0, 0, "", 1, 0},
    {"sheepeat",      "toggleSheepEat",      "Sheep grazing.", "", 0, 0, 0, "", 1, 0},
    {"cowpoop",       "toggleCowPoop",       "Cow pooping.", "", 0, 0, 0, "", 1, 0},
    {"coweat",        "toggleCowEat",        "Cow eating.", "", 0, 0, 0, "", 1, 0},
    {"cowmilk",       "toggleCowMilk",       "Milking cow.", "", 0, 0, 0, "", 1, 0},  
    {"chickeneat",    "toggleChickenEat",    "Chicken eating.", "", 0, 0, 0, "", 1, 0},
    {"hiddenexit",    "toggleHiddenExit",    "Open up a hidden exit.", "", 0, 0, 0, "", 1, 0},

    -- Sounds that trigger via text comparison
    {"get",           "toggleGet",           "Pick up an item.", "", 0, 0, 0, "", 1, 0},
    {"readpage",      "togglePage",          "Read a page in a book.", "", 0, 0, 0, "", 1, 0},
    {"copyrecipe",    "toggleCopyRecipe",    "Copy a recipe from another player.", "", 0, 0, 0, "", 1, 0},
    {"fumble",        "toggleFumble",        "Potion explosion while brewing.", "", 0, 0, 0, "", 1, 0},
    {"brewpotion",    "toggleBrew",          "Brew a potion with alchemy skill.", "", 0, 0, 0, "", 1, 0},
    {"eat",           "toggleEat",           "Eat food.", "", 0, 0, 0, "", 1, 0},
    {"drink",         "toggleDrink",         "Drink liquid.", "", 0, 0, 0, "", 1, 0},
    {"petrelease",    "togglePetRelease",    "Release a pet from limbo.", "", 0, 0, 0, "", 1, 0},
    {"petdismiss",    "togglePetDismiss",    "Dismiss a pet.", "", 0, 0, 0, "", 1, 0},
    {"monsterbonus",  "toggleMonsterBonus",  "Mob death toll experience bonus.", "", 0, 0, 0, "", 1, 0},
    {"questrequest",  "toggleQuestRequest",  "Request a quest.", "", 0, 0, 0, "", 1, 0},
    {"pilgrimagerequest", "togglePilgrimageRequest", "Request a pilgrimage.", "", 0, 0, 0, "", 1, 0},
    {"pilgrimagecomplete", "togglePilgrimageComplete", "Complete a pilgrimage.", "", 0, 0, 0, "", 1, 0},
    {"pilgrimagetimer", "togglePilgrimageTimer", "Pilgrimage cooldown ended.", "", 0, 0, 0, "", 1, 0},
    {"pilgrimageoffering", "togglePilgrimageOffering", "Pilgrimage offering found.", "", 0, 0, 0, "", 1, 0},
    {"tips",          "toggleTips",          "Sound for newbie tips.", "", 0, 0, 0, "", 1, 0},
    {"inventory",     "toggleInventory",     "Inventory command.", "", 0, 0, 0, "", 1, 0},
    {"questcomplete", "toggleQuestComplete", "Complete a quest.", "", 0, 0, 0, "", 1, 0},
    {"qlasttarget",   "toggleQLastTarget",   "You've killed your last quest/expedition target or picked up your last junkyard item.", "", 0, 0, 0, "", 1, 0},
    {"died",          "toggleDied",          "You die.", "", 0, 0, 0, "", 1, 0},
    {"artisans",      "toggleArtisans",      "Artisans channel notification.", "", 0, 0, 0, "", 1, 0},
    {"chat",          "toggleChat",          "Chat channel notification.", "", 0, 0, 0, "", 1, 0},
    {"roleplay",      "toggleRoleplay",      "Roleplay channel notification.", "", 0, 0, 0, "", 1, 0},
    {"trivia",        "toggleTrivia",        "Trivia channel notification.", "", 0, 0, 0, "", 1, 0},
    {"hchat",         "toggleHchat",         "Hchat channel notification.", "", 0, 0, 0, "", 1, 0},
    {"faith",         "toggleFaith",         "Faith channel notification.", "", 0, 0, 0, "", 1, 0},
    {"faithrankup",   "toggleFaithRankUp",   "Faith rank up notification.", "", 0, 0, 0, "", 1, 0},
    {"joinfaith",     "toggleJoinFaith",     "New faith member notification.", "", 0, 0, 0, "", 1, 0},
    {"demigods",      "toggleDemigods",      "Demigods channel notification.", "", 0, 0, 0, "", 1, 0},
    {"auction",       "toggleAuction",       "Auction channel notification.", "", 0, 0, 0, "", 1, 0},
    {"colosseumwin",  "toggleColosseumWin",  "Notification when you've completed the Colosseum.", "", 0, 0, 0, "", 1, 0},
    {"colosseumlose", "toggleColosseumLose", "Notification when you've died in the Colosseum.", "", 0, 0, 0, "", 1, 0},
    {"colosseumwinother", "toggleColosseumWinOther","Notification when other players have completed the Colosseum.", "", 0, 0, 0, "", 1, 0},
    {"say",           "toggleSay",           "Say channel notification.", "", 0, 0, 0, "", 1, 0},
    {"whisper",       "toggleWhisper",       "The whisper channel.", "", 0, 0, 0, "", 1, 0},
    {"spouse",        "toggleSpouse",        "The spouse channel.", "", 0, 0, 0, "", 1, 0},
    {"mudevent",      "toggleMudevent",      "Mudevent channel notification.", "", 0, 0, 0, "", 1, 0},
    {"event",         "toggleEvent",         "Event starting notification.", "", 0, 0, 0, "", 1, 0},
    {"music",         "toggleMusic",         "Music channel notification.", "", 0, 0, 0, "", 1, 0},
    {"dev",           "toggleDev",           "Dev channel notification.", "", 0, 0, 0, "", 1, 0},
    {"feedback",      "toggleFeedback",      "Feedback channel notification.", "", 0, 0, 0, "", 1, 0},
    {"tell",          "toggleTell",          "Tell notification.", "", 0, 0, 0, "", 1, 0},
    {"linkdead",      "toggleLinkdead",      "When a player goes linkdead.", "", 0, 0, 0, "", 1, 0},
    {"recall",        "toggleRecall",        "Recall command.", "", 0, 0, 0, "", 1, 0},
    {"waypointpray",  "toggleWaypointPray",  "When you use the waypoint command.", "", 0, 0, 0, "", 1, 0},
    {"waypointappear", "toggleWaypointAppear", "When someone appears using the waypoint command.", "", 0, 0, 0, "", 1, 0},
    {"waypointvanish", "toggleWaypointVanish", "When someone vanishes using the waypoint command.", "", 0, 0, 0, "", 1, 0},
    {"aggro",         "toggleAggro",         "When aggressive monsters attack you.", "", 0, 0, 0, "", 1, 0},
    {"enterportal",   "toggleEnterPortal",   "Enter a portal.", "",  0, 0, 0, "", 1, 0},
    {"drop",          "toggleDrop",          "Drop an item.", "", 0, 0, 0, "", 1, 0},
    {"knockhome",     "toggleKnockHome",     "Hear a knock when someone knocks on your player home door.", "", 0, 0, 0, "", 1, 0},
    {"pray",          "togglePray",          "Pray command.", "", 0, 0, 0, "", 1, 0},
    {"heal",          "toggleHeal",          "Get healed through the heal spell.", "", 0, 0, 0, "", 1, 0},
    {"fullhp",        "toggleFullHp",        "Notification when hitpoints reach full health.", "", 0, 0, 0, "", 1, 0},
    {"fullmana",      "toggleFullMana",      "Notification when mana reaches full health.", "", 0, 0, 0, "", 1, 0},
    {"senditem",      "toggleSendItem",      "Sound when you send an item to a player.", "", 0, 0, 0, "", 1, 0},
    {"receiveitem",   "toggleReceiveItem",   "Sound when you receive an item from a player.", "", 0, 0, 0, "", 1, 0},
    {"questitem",     "toggleQuestItem",     "Notification when a fabled quest item is in the room.", "", 0, 0, 0, "", 1, 0},
    {"seed",          "toggleSeed",          "Notification when you forage a seed.", "", 0, 0, 0, "", 1, 0},
    {"bunny",         "toggleBunny",         "Notification when a quest bunny item is in the room.", "", 0, 0, 0, "", 1, 0},
    {"treasure",      "toggleTreasure",      "Notification when a treasure event item is in the room.", "", 0, 0, 0, "", 1, 0},
    {"junkyard",      "toggleJunkyard",      "Notification when a junkyard item is in the room.", "", 0, 0, 0, "", 1, 0},
    {"junkyardtimer", "toggleJunkyardTimer", "Notification when you can do another junkyard quest.", "", 0, 0, 0, "", 1, 0},
    {"questcoin",     "toggleQuestCoin",     "Notification when you receive a quest coin.", "", 0, 0, 0, "", 1, 0},
    {"rogueelf",      "toggleRogueElf",      "Notification when a Christmas event Rogue Elf is in the room.", "", 0, 0, 0, "", 1, 0},
    {"reindeer",      "toggleReindeer",      "Notification when a Christmas event Reindeer is in the room.", "", 0, 0, 0, "", 1, 0},
    {"sprite",        "toggleSprite",        "Notification when an event Sprite is in the room.", "", 0, 0, 0, "", 1, 0},
    {"immortal",      "toggleImmortal",      "Notification when an Immortal in the room.", "", 0, 0, 0, "", 1, 0},
    {"qtarget",       "toggleQTarget",       "See your quest target in the room.", "", 0, 0, 0, "", 1, 0},
    {"etarget",       "toggleETarget",       "See your expedition target in the room.", "", 0, 0, 0, "", 1, 0},
    {"gtell",         "toggleGtell",         "Group tell notification.", "", 0, 0, 0, "", 1, 0},
    {"beepchannel",   "toggleBeepChannel",   "Beep Channel notification.", "", 0, 0, 0, "", 1, 0},
    {"yell",          "toggleYell",          "Yell notification.", "", 0, 0, 0, "", 1, 0},
    {"logins",        "toggleLogins",        "Sound for the login channel.", "", 0, 0, 0, "", 1, 0},
    {"logouts",       "toggleLogouts",       "Sound for the logout channel.", "", 0, 0, 0, "", 1, 0},
    {"gqtarget",      "toggleGqTarget",      "See your global quest target in the room.", "", 0, 0, 0, "", 1, 0},
    {"sac",           "toggleSac",           "Sacrifice an item.", "", 0, 0, 0, "", 1, 0},
    {"buffcommand",   "toggleBuffCommand",   "Buff command sound.", "", 0, 0, 0, "", 1, 0},
    {"minstrel",      "toggleMinstrel",      "When a minstrel NPC sings a message to passersby.", "", 0, 0, 0, "", 1, 0},
    {"gquest",        "toggleGquest",        "Global quest notifications.", "", 0, 0, 0, "", 1, 0},
    {"legend",        "toggleLegend",        "Notification for when a player becomes legend-level.", "", 0, 0, 0, "", 1, 0},
    {"quaff",         "toggleQuaff",         "Quaff a potion.", "", 0, 0, 0, "", 1, 0},
    {"spinwheel",     "toggleSpin",          "Spin yarn on a spinning wheel.", "", 0, 0, 0, "", 1, 0},
    {"tattoo",        "toggleTattoo",        "Tattoo design.", "", 0, 0, 0, "", 1, 0},
    {"leathercreak",  "toggleLeatherCreak",  "Leather creaking sound.", "", 0, 0, 0, "", 1, 0},
    {"applyresin",    "toggleApplyResin",    "Applying resin to a surface.", "", 0, 0, 0, "", 1, 0},
    {"stainglass",    "toggleStainGlass",    "Staining glass.", "", 0, 0, 0, "", 1, 0},
    {"cutpaper",      "toggleCutPaper",      "Cutting paper.", "", 0, 0, 0, "", 1, 0},
    {"foldingpaper",  "toggleFoldingPaper",  "Folding paper sound.", "", 0, 0, 0, "", 1, 0},
    {"attach",        "toggleAttach",        "Attaching something to an item.", "", 0, 0, 0, "", 1, 0},
    {"mould",         "toggleMould",         "Pouring molten material into a mould.", "", 0, 0, 0, "", 1, 0},
    {"paint",         "togglePaint",         "Painting sound.", "", 0, 0, 0, "", 1, 0},
    {"knit",          "toggleKnit",          "Knitting sound.", "", 0, 0, 0, "", 1, 0},
    {"sew",           "toggleSew",           "Sewing fabrics.", "", 0, 0, 0, "", 1, 0},
    {"dress",         "toggleDress",         "Dressing something with clothes.", "", 0, 0, 0, "", 1, 0},
    {"griptool",      "toggleCraftGrip",     "Grip tool while crafting.", "", 0, 0, 0, "", 1, 0},
    {"craftarrange",  "toggleCraftArrange",  "Prepare to heat something.", "", 0, 0, 0, "", 1, 0},
    {"craftcomplete", "toggleCraftComplete", "Finish crafting an item.", "", 0, 0, 0, "", 1, 0},
    {"cutleather",    "toggleCraftCutLeather", "Cutting leather into shape.", "", 0, 0, 0, "", 1, 0},
    {"cutwillow",     "toggleCraftCutWillow", "Cutting willow into shape.", "", 0, 0, 0, "", 1, 0},
    {"woven",         "toggleCraftWoven",    "Finish weaving strands of magic together.", "", 0, 0, 0, "", 1, 0},
    {"tuckwool",      "toggleCraftTuckWool", "Begin tucking wool into something.", "", 0, 0, 0, "", 1, 0},
    {"twistfail",     "toggleCraftTwistFail", "Twist the willow shoot too forcefully and it breaks.", "", 0, 0, 0, "", 1, 0},
    {"twist",         "toggleCraftTwist",    "Begin twisting the willow shoots.", "", 0, 0, 0, "", 1, 0},
    {"hammermetal",   "toggleCraftHammerMetal", "Hammering metal materials.", "", 0, 0, 0, "", 1, 0},
    {"hammerwood",    "toggleCraftHammerWood", "Hammering wood materials.", "", 0, 0, 0, "", 1, 0},
    {"blowglass",     "toggleCraftBlowGlass", "Blow glass into shape.", "", 0, 0, 0, "", 1, 0},
    {"craftsoak",     "toggleCraftSoak",     "Soak and dipping.", "", 0, 0, 0, "", 1, 0},
    {"craftdrawcompass", "toggleCraftDrawCompass", "Draw a compass on a map.", "", 0, 0, 0, "", 1, 0},
    {"craftlabelmap", "toggleCraftLabelMap", "Label a map.", "", 0, 0, 0, "", 1, 0},
    {"craftmarkmap", "toggleCraftMarkMap",   "Mark a room on a map.", "", 0, 0, 0, "", 1, 0},
    {"craftdrypaper", "toggleCraftDryPaper", "Drying paper.", "", 0, 0, 0, "", 1, 0},
    {"craftunpick",   "toggleCraftUnpick",   "Unpick cotton from a prayer rug.", "", 0, 0, 0, "", 1, 0},
    {"craftmash",     "toggleCraftMash",     "Mash wood chips.", "", 0, 0, 0, "", 1, 0},
    {"craftdip",      "toggleCraftDip",      "Dip matchstick into liquid sulfur.", "", 0, 0, 0, "", 1, 0},
    {"craftcarve",    "toggleCraftCarve",    "Carving something.", "", 0, 0, 0, "", 1, 0},
    {"hero",          "toggleHero",          "Notification for when a player becomes hero-level.", "", 0, 0, 0, "", 1, 0},
    {"addclass",      "toggleAddclass",      "Add a main class or subclass with the class command.", "", 0, 0, 0, "", 1, 0},
    {"addclassother", "toggleAddclassOther", "Other player adds a main class or subclass with the class command.", "", 0, 0, 0, "", 1, 0},
    {"replaceclassother", "toggleReplaceclassOther", "Other player replaces a class.", "", 0, 0, 0, "", 1, 0},
    {"replaceclassself", "toggleReplaceclassSelf", "You replace a class.", "", 0, 0, 0, "", 1, 0},
    {"evolveother", "toggleEvolveOther", "Other player evolves.", "", 0, 0, 0, "", 1, 0},
    {"evolveself", "toggleEvolveSelf", "You evolve.", "", 0, 0, 0, "", 1, 0},
    {"restartother", "toggleRestartOther", "Other player restarts.", "", 0, 0, 0, "", 1, 0},
    {"restartself", "toggleRestartSelf", "You restart.", "", 0, 0, 0, "", 1, 0},
    {"gqwin",         "toggleGqwin",         "You win a global quest.", "", 0, 0, 0, "", 1, 0},
    {"buy",           "toggleBuy",           "You buy an item or pet.", "", 0, 0, 0, "", 1, 0},
    {"eq",            "toggleEq",            "Equipment command.", "", 0, 0, 0, "", 1, 0},
    {"shatterkey",    "toggleShatterKey",    "Unlock a door and shatter the key.", "", 0, 0, 0, "", 1, 0},
    {"unlockdoor",    "toggleUnlockDoor",    "Unlock a door.", "", 0, 0, 0, "", 1, 0},
    {"achievement",   "toggleAchievement",   "Unlock an achievement.", "", 0, 0, 0, "", 1, 0},
    {"achievementchannel", "toggleAchievementChannel", "Achievement channel notification.", "", 0, 0, 0, "", 1, 0},
    {"rank",          "toggleRank",          "The rankings channel.", "", 0, 0, 0, "", 1, 0},
    {"snowballdodge", "toggleSnowballDodge", "Dodge an incoming snowball.", "", 0, 0, 0, "", 1, 0},
    {"snowball",      "toggleSnowball",      "Get hit with an incoming snowball.", "", 0, 0, 0, "", 1, 0},
    {"cookburnt",     "toggleCookBurnt",     "Food goes up in flames while.", "", 0, 0, 0, "", 1, 0},
    {"cooksizzle",    "toggleCookSizzle",    "Food sizzles while cooking.", "", 0, 0, 0, "", 1, 0},
    {"cookding",      "toggleCookDing",      "Food is done cooking.", "", 0, 0, 0, "", 1, 0},
    {"scrabble",      "toggleScrabble",      "Get a scrabble tile from a corpse.", "", 0, 0, 0, "", 1, 0},
    {"guessfind",     "toggleGuessFind",     "Stumble across a Guess the Phrase letter in a room.", "", 0, 0, 0, "", 1, 0},
    {"guessphrase",   "toggleGuessPhrase",   "Guess the Phrase begins, ends, or you pick up a letter.", "", 0, 0, 0, "", 1, 0},
    {"unscramble",    "toggleUnscramble",    "Correctly unscramble a Scrambled Phrase.", "", 0, 0, 0, "", 1, 0},
    {"unscramblestart", "toggleUnscrambleStart", "A new round of Scrambled Phrase starts.", "", 0, 0, 0, "", 1, 0},
    {"chop",          "toggleChop",          "Chop down a tree.", "", 0, 0, 0, "", 1, 0},
    {"splitlog",      "toggleSplitLog",      "Split a log into blocks of wood.", "", 0, 0, 0, "", 1, 0},
    {"debris",        "toggleDebris",        "Debris tumble over the mining site.", "", 0, 0, 0, "", 1, 0},
    {"cleardebris",   "toggleClearDebris",   "Clear away debris while mining.", "", 0, 0, 0, "", 1, 0},
    {"strikematch",   "toggleStrikeMatch",   "Strike a match to light something.", "", 0, 0, 0, "", 1, 0},
    {"dross",         "toggleDross",         "Dross has accumulated during the smelting process.", "", 0, 0, 0, "", 1, 0},
    {"skimdross",     "toggleSkimDross",     "Clear away dross during the smelting process.", "", 0, 0, 0, "", 1, 0},
    {"harvest",       "toggleHarvest",       "Harvest a seed while gardening.", "", 0, 0, 0, "", 1, 0},
    {"newplayer",     "toggleNewPlayer",     "New player notification.", "", 0, 0, 0, "", 1, 0},
    {"returnedplayer","toggleReturnedPlayer", "Returned player notification.", "", 0, 0, 0, "", 1, 0},
    {"blindedself",   "toggleBlindedSelf",   "You got blinded.", "", 0, 0, 0, "", 1, 0},
    {"blindedtarget", "toggleBlindedTarget", "Your target got blinded.", "", 0, 0, 0, "", 1, 0},
    {"bleed",         "toggleBleed",         "Notification combat message: You sure are DYING!", "", 0, 0, 0, "", 1, 0},
    {"leafsnarl",     "toggleForageLeafSnarl", "Clear away leaves while foraging and monster jumps out and snarls.", "", 0, 0, 0, "", 1, 0},
    {"rockgrowl",     "toggleForageRockGrowl", "Turn over a rock while foraging and monster jumps out and growls.", "", 0, 0, 0, "", 1, 0},
    {"scuttle",       "toggleForageScuttle", "Push over a log while foraging and monster scuttles out.", "", 0, 0, 0, "", 1, 0},
    {"mudgrime",      "toggleForageMudGrime", "Splashing through mud and grime while foraging.", "", 0, 0, 0, "", 1, 0},
    {"muck",          "toggleForageMuck",    "Muck sound while foraging.", "", 0, 0, 0, "", 1, 0},
    {"sift",          "toggleForageSift",    "Sifting through muck while foraging.", "", 0, 0, 0, "", 1, 0},
    {"siftmuck",      "toggleForageSiftMuck", "Sifting through muck while foraging.", "", 0, 0, 0, "", 1, 0},
    {"wipegunk",      "toggleForageWipeGunk", "Wiping gunk off your hands while foraging.", "", 0, 0, 0, "", 1, 0},
    {"spotgem",       "toggleForageGem",     "Find a gem while foraging.", "", 0, 0, 0, "", 1, 0},
    {"scraperesin",   "toggleForageScrapeResin", "Scrape resin off a tree while foraging.", "", 0, 0, 0, "", 1, 0},
    {"scoopsand",     "toggleForageSand",    "Scoop up sand while foraging.", "", 0, 0, 0, "", 1, 0},
    {"poursand",      "togglePourSand",      "Pouring sand.", "", 0, 0, 0, "", 1, 0},
    {"pickedover",    "toggleForagePickedOver", "The area is picked over while foraging.", "", 0, 0, 0, "", 1, 0},
    {"forageseed",    "toggleForageSeed",    "Unearth a seed while foraging.", "", 0, 0, 0, "", 1, 0},
    {"foundnothing",  "toggleForageFoundNothing", "Found nothing useful while foraging.", "", 0, 0, 0, "", 1, 0},
    {"rolllog",       "toggleForageRollLog",  "Rolling over a log while foraging.", "", 0, 0, 0, "", 1, 0},
    {"peekrock",      "toggleForagePeekRock", "Peek under a rock while foraging.", "", 0, 0, 0, "", 1, 0},
    {"peekknothole",  "toggleForagePeekKnothole", "Peek in the knothole of a tree while foraging.", "", 0, 0, 0, "", 1, 0},
    {"berrybush",     "toggleForageBerryBush", "Examining a berry bush while foraging.", "", 0, 0, 0, "", 1, 0},
    {"combgrass",     "toggleForageCombGrass", "Comb through grass while foraging.", "", 0, 0, 0, "", 1, 0},
    {"toewetleaves",  "toggleForageToeWetLeaves", "Toe at a pile of wet leaves while foraging.", "", 0, 0, 0, "", 1, 0},
    {"liftbranch",    "toggleForageLiftBranch", "Lifting a branch while foraging.", "", 0, 0, 0, "", 1, 0},
    {"unearth",       "toggleForageUnearth", "Unearth or collect something while foraging.", "", 0, 0, 0, "", 1, 0},
    {"collectwet",    "toggleForageCollectWet", "Collecting something from the wetlands while foraging.", "", 0, 0, 0, "", 1, 0},
    {"collectrare",   "toggleForageCollectRare", "Collecting a rare item while foraging.", "", 0, 0, 0, "", 1, 0},
    {"spotrune",      "toggleForageRune",    "Find a rune while foraging.", "", 0, 0, 0, "", 1, 0},
    {"pluckbranch",   "toggleForagePluckBranch", "Pluck something from a branch while foraging.", "", 0, 0, 0, "", 1, 0},
    {"treebranch",    "toggleForageTreeBranch", "Loosen something from a tree branch while foraging.", "", 0, 0, 0, "", 1, 0},
    {"scoopmuck",     "toggleForageScoopMuck", "Scooping muck while foraging.", "", 0, 0, 0, "", 1, 0},
    {"scoopfloat",    "toggleForageScoopFloat", "Scooping up an item before it floats away while foraging.", "", 0, 0, 0, "", 1, 0},
    {"digsoil",       "toggleForageDigSoil", "Digging into the soil to unearth something while foraging.", "", 0, 0, 0, "", 1, 0},
    {"rockturnover",  "toggleForageRockTurnover", "Turning over a rock while foraging.", "", 0, 0, 0, "", 1, 0},
    {"rinsewater",    "toggleForageRinseWater", "Rinsing water off something while foraging.", "", 0, 0, 0, "", 1, 0},
    {"rottenlog",     "toggleForageRottenLog", "Pushing over a rotten log while foraging.", "", 0, 0, 0, "", 1, 0},
    {"pickbush",      "toggleForagePickBush", "Picking something from a bush while foraging.", "", 0, 0, 0, "", 1, 0},
    {"wateryank",     "toggleForageWaterYank", "Yanking hand out of water while foraging.", "", 0, 0, 0, "", 1, 0},
    {"dip",           "toggleForageDip",     "Dipping hands into water while foraging.", "", 0, 0, 0, "", 1, 0},
    {"dipfish",       "toggleForageDipFish", "Dipping and fishing around in water while foraging.", "", 0, 0, 0, "", 1, 0},
    {"combsilt",      "toggleForageCombSilt", "Combing through silt while foraging.", "", 0, 0, 0, "", 1, 0},
    {"willow",        "toggleWillow",        "Forage for willow shoots.", "", 0, 0, 0, "", 1, 0},
    {"stoke",         "toggleStoke",         "Stoke the flames during the smelting process.", "", 0, 0, 0, "", 1, 0},
    {"flameschange",  "toggleFlamesChange",  "Flames weaken during the smelting process.", "", 0, 0, 0, "", 1, 0},
    {"mine",          "toggleMine",          "Begin mining.", "", 0, 0, 0, "", 1, 0},
    {"pickaxe",       "togglePickaxe",       "Swing your pickaxe at a cluster.", "", 0, 0, 0, "", 1, 0},
    {"pickaxebreak",  "togglePickaxeBreak",  "Pickaxe breaks while mining.", "", 0, 0, 0, "", 1, 0},
    {"fellingaxebreak", "toggleFellingaxeBreak", "Felling axe breaks while chopping trees.", "", 0, 0, 0, "", 1, 0},
    {"ore",           "toggleOre",           "Obtain ore while mining.", "", 0, 0, 0, "", 1, 0},
    {"coal",          "toggleCoal",          "Obtain coal while mining.", "", 0, 0, 0, "", 1, 0},
    {"salt",          "toggleSalt",          "Obtain salt while mining.", "", 0, 0, 0, "", 1, 0},
    {"treefall",      "toggleTreefall",      "Push over a tree during the felling process.", "", 0, 0, 0, "", 1, 0},
    {"info",          "toggleInfo",          "Info channel notification.", "", 0, 0, 0, "", 1, 0},
    {"skillimprove",  "toggleSkillImprove",  "Notification for skill or spell percent increase.", "", 0, 0, 0, "", 1, 0},
    {"newbie",        "toggleNewbie",        "Newbie channel notification.", "", 0, 0, 0, "", 1, 0},
    {"grats",         "toggleGrats",         "Grats channel notification.", "", 0, 0, 0, "", 1, 0},
    {"flame",         "toggleFlame",         "Flame channel notification.", "", 0, 0, 0, "", 1, 0},
    {"imt",           "toggleImt",           "(Imm-only) Imt channel notification.", "", 0, 0, 0, "", 1, 0},
    {"channels",      "toggleChannels",      "General custom channels notification.", "", 0, 0, 0, "", 1, 0},
    {"mobdeath",      "toggleMobdeath",      "Kill a mob.", "", 0, 0, 0, "", 1, 0},
    {"bossbeep",      "toggleBossBeep",      "Beeps when boss's health changes.", "", 0, 0, 0, "", 1, 0},
    {"mobhealthbeep", "toggleMobHealthBeep",    "Beeps when a non-boss mob's health changes.", "", 0, 0, 0, "", 1, 0},
    {"runto",         "toggleRunto",         "Footstep sounds while using the runto command.", "", 0, 0, 0, "", 1, 0},
    {"wiznet",        "toggleWiznet",        "Wiznet notification.", "", 0, 0, 0, "", 1, 0},
    {"leftpets",      "toggleLeftPets",      "Notification when you leave pets behind while moving.", "", 0, 0, 0, "", 1, 0},
    {"hrecallmale",   "toggleHrecallMale",   "Home recall (male).", "", 0, 0, 0, "", 1, 0},
    {"hrecallfemale", "toggleHrecallFemale", "Home recall (female).", "", 0, 0, 0, "", 1, 0},
    {"groupquestcooldown", "toggleGroupQuestCooldown", "Group quest cooldown ending.", "", 0, 0, 0, "", 1, 0},
    {"groupqueststart", "toggleGroupQuestStart", "Starting a group quest.", "", 0, 0, 0, "", 1, 0},
    {"groupquestrewardstart", "toggleGroupQuestRewardStart", "Group quest reward starting.", "", 0, 0, 0, "", 1, 0},
    {"groupquestrewardclose", "toggleGroupQuestRewardClose", "Group quest reward ending.", "", 0, 0, 0, "", 1, 0},
    {"giveitem",      "toggleGiveItem",      "Giving an item.", "", 0, 0, 0, "", 1, 0},
    {"obtainitem",    "toggleObtainItem",    "Receiving an item from a player.", "", 0, 0, 0, "", 1, 0},
    {"fleepcself",    "toggleFleePcSelf",    "You successfully flee.", "", 0, 0, 0, "", 1, 0},
    {"fleepcother",   "toggleFleePcOther",   "PC other than yourself fleeing.", "", 0, 0, 0, "", 1, 0},
    {"fleenpc",       "toggleFleeNpc",       "NPC fleeing.", "", 0, 0, 0, "", 1, 0},
    {"arearepop",     "toggleAreaRepop",     "Area repop.", "", 0, 0, 0, "", 1, 0},
    {"itemsurprise",  "toggleItemSurprise",  "Sound when you receive a surprise item from an Immortal.", "", 0, 0, 0, "", 1, 0},
    {"potionsteal",   "togglePotionSteal",   "Sound when a mob steals a potion from you.", "", 0, 0, 0, "", 1, 0},
    {"potionsmash",   "togglePotionSmash",   "Sound when a mob steals a potion from you and smashes it.", "", 0, 0, 0, "", 1, 0},
    {"potionquaff",   "togglePotionQuaff",   "Sound when a mob steals a potion from you and quaffs it.", "", 0, 0, 0, "", 1, 0},
    {"weather",       "toggleWeather",       "Sound for changing weather.", "", 0, 0, 0, "", 1, 0},
    {"uniquemob",     "toggleUniqueMob",     "Sound for a unique mob.", "", 0, 0, 0, "", 1, 0},
    {"questfail",     "toggleQuestFail",     "Sound for failing a quest.", "", 0, 0, 0, "", 1, 0},
    {"damageitem",    "toggleDamageItem",    "Sound when an item gets damaged.", "", 0, 0, 0, "", 1, 0},
    {"poofin",        "togglePoofin",        "Sound when an immortal pops into the room.", "", 0, 0, 0, "", 1, 0},
    {"poofout",       "togglePoofout",       "Sound when an immortal pops out of the room.", "", 0, 0, 0, "", 1, 0},
    {"poofself",      "togglePoofself",      "Sound for Immortals using the goto command.", "", 0, 0, 0, "", 1, 0},
    {"goldpile",      "toggleGoldPile",      "Sound for gold pile in the room.", "", 0, 0, 0, "", 1, 0},
    {"fullyinfused",  "toggleFullyInfused",  "Sound for gem reaching full infusion.", "", 0, 0, 0, "", 1, 0},
    {"waterballoon1", "toggleWaterBalloon1", "Sound for smashing a water balloon over yourself.", "", 0, 0, 0, "", 1, 0},
    {"waterballoon2", "toggleWaterBalloon2", "Sound for drenching someone with a water balloon.", "", 0, 0, 0, "", 1, 0},
    {"waterballoon3", "toggleWaterBalloon3", "Sound for missing someone with a water balloon.", "", 0, 0, 0, "", 1, 0},
    {"fillwaterballoon", "toggleFillWaterBalloon", "Sound for filling a water balloon with water.", "", 0, 0, 0, "", 1, 0},
    {"hint",          "toggleHint",          "Sound for receiving a new page in the guide.", "", 0, 0, 0, "", 1, 0},
    {"beginsmelting", "toggleBeginSmelting", "Sound for beginning the smelting process.", "", 0, 0, 0, "", 1, 0},
    {"keyring",       "toggleKeyring",       "Sound for adding a key to your keyring.", "", 0, 0, 0, "", 1, 0},
    {"loginreminder", "toggleLoginReminder", "Sound for reminders upon logging in.", "", 0, 0, 0, "", 1, 0},
    {"emptydrink",    "toggleEmptyDrink",    "Sound for an empty drink container.", "", 0, 0, 0, "", 1, 0},
    {"emptyfountain", "toggleEmptyFountain", "Sound for a fountain drying up.", "", 0, 0, 0, "", 1, 0},
    {"birthday",      "toggleBirthday",      "Birthday congratulations upon logging in.", "", 0, 0, 0, "", 1, 0},
    {"armorroulette", "toggleArmorRoulette", "Sound for armor roulette failure.", "", 0, 0, 0, "", 1, 0},
    {"sit",           "toggleSit",           "Sound for changing positions.", "", 0, 0, 0, "", 1, 0},
    {"enterinstance", "toggleEnterInstance", "Sound for entering an instance.", "", 0, 0, 0, "", 1, 0},
    {"exitinstance",  "toggleExitInstance",  "Sound for exiting an instance.", "", 0, 0, 0, "", 1, 0},
    {"reveal",        "toggleReveal",        "Sound for finding hidden things.", "", 0, 0, 0, "", 1, 0},
    {"creditbuy",     "toggleCreditBuy",     "Sound for buying rewards with credits.", "", 0, 0, 0, "", 1, 0},
    {"creditgift",    "toggleCreditGift",    "Sound for buying gifting credits to someone.", "", 0, 0, 0, "", 1, 0},
    {"creditreceive", "toggleCreditReceive", "Sound when someone gifts you credits.", "", 0, 0, 0, "", 1, 0},
    {"woosh",         "toggleWoosh",         "A woosh sound.", "", 0, 0, 0, "", 1, 0},
    {"restock",       "toggleRestock",       "Notification when items in your player shop need restocking.", "", 0, 0, 0, "", 1, 0},
    {"tannincomplete", "toggleTanninComplete", "Sound for skin turning to leather in a vat.", "", 0, 0, 0, "", 1, 0},
    {"file",          "toggleFile",          "Sound for filing down a material.", "", 0, 0, 0, "", 1, 0},
    {"lowhealth",     "toggleLowHealth",     "Sound for group members with low health in combat.", "", 0, 0, 0, "", 1, 0},
    {"lightout",      "toggleLightOut",     "Sound for when your light goes out.", "", 0, 0, 0, "", 1, 0},
    {"sharpenweapon", "toggleSharpenWeapon", "Sound for sharpening a weapon.", "", 0, 0, 0, "", 1, 0},
    {"dullweapon",    "toggleDullWeapon",    "Sound for when a weapon dulls.", "", 0, 0, 0, "", 1, 0},
    {"recipeunlock",  "toggleRecipeUnlock",  "Sound for unlocking an alchemy recipe.", "", 0, 0, 0, "", 1, 0},
    {"crackstone",    "toggleCrackStone",    "Sound for cracking a stone in half.", "", 0, 0, 0, "", 1, 0},
    {"grindstone",    "toggleGrindStone",    "Sound for grinding stones.", "", 0, 0, 0, "", 1, 0},
    {"infusion",      "toggleInfusion",      "Sound for when a gem is infused by the elements.", "", 0, 0, 0, "", 1, 0},
    {"confusion",     "toggleConfusion",     "Mob is confused and turns on himself.", "", 0, 0, 0, "", 1, 0},
    {"cloneshatter",  "toggleCloneShatter",  "Your clone shatters.", "", 0, 0, 0, "", 1, 0},
    {"soulember",     "toggleSoulEmber",     "Sound binding soul embers to an item.", "", 0, 0, 0, "", 1, 0},
    {"suicide",       "toggleSuicide",       "Sound when player kills himself.", "", 0, 0, 0, "", 1, 0},
    {"bunnyexplosion", "toggleBunnyExplosion", "Sound when bunnies explode all over the world.", "", 0, 0, 0, "", 1, 0},
    {"gotmail",       "toggleGotMail",       "A new note has been posted that you can read.", "", 0, 0, 0, "", 1, 0},
    {"shearsheep",    "toggleShearSheep",    "Sound for shearing sheep.", "", 0, 0, 0, "", 1, 0},
    {"treewedge",     "toggleTreeWedge",     "Sound chopping a 45-degree wedge in a tree.", "", 0, 0, 0, "", 1, 0},
    {"gmote",         "toggleGmote",         "Sound for gmotes.", "", 0, 0, 0, "", 1, 0},
    {"targetengagedmale", "toggleTargetEngagedMale", "Sound for target engaged, male.", "", 0, 0, 0, "", 1, 0},
    {"targetengagedfemale", "toggleTargetEngagedFemale", "Sound for target engaged, female.", "", 0, 0, 0, "", 1, 0},
    {"starmiss",      "toggleStarMiss",      "Sound for throwing a star that misses target.", "", 0, 0, 0, "", 1, 0},
    {"werewolf",      "toggleWerewolf",      "Sound for werewolves in the room.", "", 0, 0, 0, "", 1, 0},
    {"evilpumpkin",   "toggleEvilPumpkin",   "Sound for evil pumpkins in the room.", "", 0, 0, 0, "", 1, 0},
    {"turkey",        "toggleTurkey",        "Sound for wild turkeys in the room.", "", 0, 0, 0, "", 1, 0},
    {"combo2",        "toggleCombo2",        "Sound for second combo.", "", 0, 0, 0, "", 1, 0},
    {"combo3",        "toggleCombo3",        "Sound for third combo.", "", 0, 0, 0, "", 1, 0},
    {"combo4",        "toggleCombo4",        "Sound for fourth combo.", "", 0, 0, 0, "", 1, 0},
    {"cleancloth",    "toggleCleanCloth",    "Sound for cleaning cloths.", "", 0, 0, 0, "", 1, 0},
    {"cleanfloor",    "toggleCleanFloor",    "Sound for cleaning floor.", "", 0, 0, 0, "", 1, 0},
    {"egghouse",      "toggleEggHouse",      "Sound for egging a house.", "", 0, 0, 0, "", 1, 0},
    {"eggself",       "toggleEggSelf",       "Sound for egging yourself.", "", 0, 0, 0, "", 1, 0},
    {"eggplayer",     "toggleEggPlayer",     "Sound for egging a player.", "", 0, 0, 0, "", 1, 0},
    {"glyph",         "toggleGlyph",         "Sound for creating a new glyph.", "", 0, 0, 0, "", 1, 0},
    {"contemplateglyph", "toggleContemplateGlyph", "Sound for contemplating a glyph.", "", 0, 0, 0, "", 1, 0},
    {"arrangerocks",  "toggleArrangeRocks",  "Sound for arranging rocks while crafting.", "", 0, 0, 0, "", 1, 0},
    {"prism",         "togglePrism",         "Sound for focusing into a prism.", "", 0, 0, 0, "", 1, 0},
    {"like",          "toggleLike",          "Like a painting.", "", 0, 0, 0, "", 1, 0},
    {"spillcoins",    "toggleSpillCoins",    "Mob rips apart your coin purse.", "", 0, 0, 0, "", 1, 0},
    {"prayer",        "togglePrayer",        "Praying to the gods.", "", 0, 0, 0, "", 1, 0},
    {"startmission",  "toggleStartMission",  "Sound when starting a mission.", "", 0, 0, 0, "", 1, 0},
    {"completemission", "toggleCompleteMission",  "Sound when completing a mission.", "", 0, 0, 0, "", 1, 0},
    {"prayerreminder", "togglePrayerReminder", "Sound for prayer reminder.", "", 0, 0, 0, "", 1, 0},
    {"botcheck",      "toggleBotcheck",      "Botcheck notification.", "", 0, 0, 0, "", 1, 0},
    {"opendoor",      "toggleOpenDoor",      "Opening a door.", "", 0, 0, 0, "", 1, 0},
    {"closedoor",     "toggleCloseDoor",     "Closing a door.", "", 0, 0, 0, "", 1, 0},
    {"liberate",      "toggleLiberate",      "Liberate a captive.", "", 0, 0, 0, "", 1, 0},
    {"captive",       "toggleCaptive",       "Captive in room.", "", 0, 0, 0, "", 1, 0},
    {"crunchybite",   "toggleCrunchyBite",   "A cruncy bite sound.", "", 0, 0, 0, "", 1, 0},
    {"leprechaun",    "toggleLeprechaun",    "Leprechaun in room.", "", 0, 0, 0, "", 1, 0},
    {"hungrybunny",   "toggleHungryBunny",   "Hungry bunny in room.", "", 0, 0, 0, "", 1, 0},
    {"feather",       "toggleFeather",       "Feather of liberation from foraging.", "", 0, 0, 0, "", 1, 0},
    {"sigiladd",      "toggleSigilAdd",      "Adding a sigil.", "", 0, 0, 0, "", 1, 0},
    {"sigilfound",    "toggleSigilFound",    "Found a sigil.", "", 0, 0, 0, "", 1, 0},
    {"wedding",       "toggleWedding",       "Wedding sound.", "", 0, 0, 0, "", 1, 0},
    {"restore",       "toggleRestore",       "Restored to full health.", "", 0, 0, 0, "", 1, 0},
    {"buffoff",       "toggleBuffoff",       "Sound when a defensive buff wears off.", "", 0, 0, 0, "", 1, 0},
    {"alas",          "toggleAlas",          "Try to go through a non-existent exit.", "", 0, 0, 0, "", 1, 0},
    {"limitbreak",    "toggleLimitBreak",    "Your limit break reaches 100%.", "", 0, 0, 0, "", 1, 0},
    {"imbue",         "toggleImbue",         "The craft imbue command.", "", 0, 0, 0, "", 1, 0},
    {"yieldnothing",  "toggleClusterYield",  "When cluster yields nothing while mining.", "", 0, 0, 0, "", 1, 0},
    {"crash",         "toggleCrash",         "Notification when the mud has crashed.", "", 0, 0, 0, "", 1, 0},
    {"sigh",          "toggleSigh",          "Sigh social.", "", 0, 0, 0, "", 1, 0},
    {"poke",          "togglePoke",          "Poke social.", "", 0, 0, 0, "", 1, 0},
    {"pokeystick",    "togglePokeystick",    "Pokeystick social.", "", 0, 0, 0, "", 1, 0},
    {"squeal",        "toggleSqueal",        "Squeal social.", "", 0, 0, 0, "", 1, 0},
    {"yawn",          "toggleYawn",          "Yawn social.", "", 0, 0, 0, "", 1, 0},
    {"rofl",          "toggleRofl",          "Rofl social.", "", 0, 0, 0, "", 1, 0},
    {"ponder",        "togglePonder",        "Ponder/Hmmm social.", "", 0, 0, 0, "", 1, 0},
    {"coffee",        "toggleCoffee",        "Coffee social.", "", 0, 0, 0, "", 1, 0},
    {"chirp",         "toggleChirp",         "Chirp social.", "", 0, 0, 0, "", 1, 0},
    {"nudge",         "toggleNudge",         "Nudge social.", "", 0, 0, 0, "", 1, 0},
    {"cowbell",       "toggleCowbell",       "Cowbell social.", "", 0, 0, 0, "", 1, 0},
    {"squeak",        "toggleSqueak",        "Squeak social.", "", 0, 0, 0, "", 1, 0},
    {"ping",          "togglePing",          "Ping social.", "", 0, 0, 0, "", 1, 0},
    {"bounce",        "toggleBounce",        "Bounce social.", "", 0, 0, 0, "", 1, 0},
    {"pewpew",        "togglePewpew",        "Pewpew social.", "", 0, 0, 0, "", 1, 0},
    {"laugh",         "toggleLaugh",         "Laugh social.", "", 0, 0, 0, "", 1, 0},
    {"striptease",    "toggleStriptease",    "Striptease social.", "", 0, 0, 0, "", 1, 0},
    {"innocent",      "toggleInnocent",      "Innocent social.", "", 0, 0, 0, "", 1, 0},
    {"chainsaw",      "toggleChainsaw",      "Chainsaw social.", "", 0, 0, 0, "", 1, 0},
    {"cackle",        "toggleCackle",        "Cackle social.", "", 0, 0, 0, "", 1, 0},
    {"scream",        "toggleScream",        "Scream social.", "", 0, 0, 0, "", 1, 0},
    {"gasp",          "toggleGasp",          "Gasp social.", "", 0, 0, 0, "", 1, 0},
    {"cry",           "toggleCry",           "Cry social.", "", 0, 0, 0, "", 1, 0},
    {"cough",         "toggleCough",         "Cough social.", "", 0, 0, 0, "", 1, 0},
    {"woof",          "toggleWoof",          "Woof social.", "", 0, 0, 0, "", 1, 0},
    {"ahem",          "toggleAhem",          "Ahem social.", "", 0, 0, 0, "", 1, 0},
    {"roar",          "toggleRoar",          "Roar social.", "", 0, 0, 0, "", 1, 0},
    {"zap",           "toggleZap",           "The zap command.", "", 0, 0, 0, "", 1, 0},
    {"petdeath",      "togglePetDeath",      "A pet dies in combat.", "", 0, 0, 0, "", 1, 0},
    {"dice",          "toggleDice",          "The dice command.", "", 0, 0, 0, "", 1, 0},
    {"sucksoul",      "toggleSucksoul",      "Sucksoul command.", "", 0, 0, 0, "", 1, 0},
    {"rest",          "toggleRest",          "Sit, rest, and sleep commands.", "", 0, 0, 0, "", 1, 0},
    {"stand",         "toggleStand",         "Stand command.", "", 0, 0, 0, "", 1, 0},
    {"deposit",       "toggleDeposit",       "Deposit command.", "", 0, 0, 0, "", 1, 0},
    {"plantseed",     "toggleGardenPlant",   "Plant a seed while gardening.", "", 0, 0, 0, "", 1, 0},
    {"gardendestroy", "toggleGardenDestroy", "Destroy a seed or the entire garden.", "", 0, 0, 0, "", 1, 0},
    {"waterseed",     "toggleGardenWater",   "Water a seed while gardening.", "", 0, 0, 0, "", 1, 0},
    {"fertilize",     "toggleGardenFertilize","Fertilize a seed while gardening.", "", 0, 0, 0, "", 1, 0},
    {"engrave",       "toggleEngrave",        "Engrave your name into a crafted item.", "", 0, 0, 0, "", 1, 0},
    {"smeltcool",     "toggleSmeltingCooldown", "When ores or gems have melted and are cool enough to touch.", "", 0, 0, 0, "", 1, 0},
    {"destroy",       "toggleDestroy",       "Permanently destroy an item with the destroy and extractrune command.", "", 0, 0, 0, "", 1, 0},
    {"runebind",      "toggleRuneBind",       "Sounds for binding runes to items.", "", 0, 0, 0, "", 1, 0},
    {"polishgem",     "togglePolishGem",     "Polish a gem to a shine.", "", 0, 0, 0, "", 1, 0},
    {"pourout",       "togglePourOut",       "Pour the liquid out of a drink container.", "", 0, 0, 0, "", 1, 0},
    {"pourin",        "togglePourIn",        "Pour liquid into something.", "", 0, 0, 0, "", 1, 0},
    {"put",           "togglePut",           "Put an item in a container.", "", 0, 0, 0, "", 1, 0},
    {"donate",        "toggleDonate",        "Sound for donating an item.", "", 0, 0, 0, "", 1, 0},
    {"petcall",       "togglePetcall",       "Petcall command.", "", 0, 0, 0, "", 1, 0},
    {"eqstrip",       "toggleEqStrip",       "Your opponent strips you of your equipment.", "", 0, 0, 0, "", 1, 0},
    {"fishcast",      "toggleFishCast",      "Cast out a line to fish.", "", 0, 0, 0, "", 1, 0},
    {"fishcircle",    "toggleFishCircle",    "Fish starts to circle the bait.", "", 0, 0, 0, "", 1, 0},
    {"fishsnap",      "toggleFishSnap",      "Fishing line snaps taut when something bites.", "", 0, 0, 0, "", 1, 0},
    {"fishslack",     "toggleFishSlack",     "Fishing line goes slack.", "", 0, 0, 0, "", 1, 0},
    {"fisheating",    "toggleFishEating",    "Fish eating chum while fishing.", "", 0, 0, 0, "", 1, 0},
    {"fishchum",      "toggleFishChum",      "Toss chum into the water to entice fish while fishing.", "", 0, 0, 0, "", 1, 0},
    {"fishspooked",   "toggleFishSpooked",   "Fish darts away when spooked by the chum.", "", 0, 0, 0, "", 1, 0},
    {"fishjiggle",    "toggleFishJiggle",    "Jiggle the line while fishing.", "", 0, 0, 0, "", 1, 0},
    {"fishtug",       "toggleFishTug",       "Tug the line and set the hook while fishing.", "", 0, 0, 0, "", 1, 0},
    {"fishescape",    "toggleFishEscape",    "Fish escapes with your fishing pole.", "", 0, 0, 0, "", 1, 0},
    {"reel",          "toggleReel",          "Reel in a fish.", "", 0, 0, 0, "", 1, 0},
    {"polesnap",      "togglePoleSnap",      "Fishing pole snap sound.", "", 0, 0, 0, "", 1, 0},
    {"recallfail",    "toggleRecallFail",    "Fail to recall.", "", 0, 0, 0, "", 1, 0},
    {"groupjoin",     "toggleGroupJoin",     "A new player joins the group.", "", 0, 0, 0, "", 1, 0},
    {"groupinvite",   "toggleGroupInvite",   "Invite someone to the group.", "", 0, 0, 0, "", 1, 0},
    {"follow",        "toggleFollow",        "Follow someone.", "", 0, 0, 0, "", 1, 0},
    {"unfollow",      "toggleUnfollow",      "Unfollow someone.", "", 0, 0, 0, "", 1, 0},
    {"fchat",         "toggleFchat",         "Notification for fchat channel.", "", 0, 0, 0, "", 1, 0},
    {"secrets",       "toggleSecrets",       "Notification for secrets channel.", "", 0, 0, 0, "", 1, 0},
    {"wedding",       "toggleWedding",       "Notification for wedding channel.", "", 0, 0, 0, "", 1, 0},
    {"ghouse",        "toggleGhouse",        "Notification for ghouse channel.", "", 0, 0, 0, "", 1, 0},
    {"friendlogin",   "toggleFriendLogin",   "Notification when a friend enters the game.", "", 0, 0, 0, "", 1, 0},
    {"friendlogout",  "toggleFriendLogout",  "Notification when a friend logs out of the game.", "", 0, 0, 0, "", 1, 0},
    {"friendrequest", "toggleFriendRequest", "Notification when you receive a friend request.", "", 0, 0, 0, "", 1, 0},
    {"friendaccept",  "toggleFriendAccept",  "Notification when someone accepts your friend request.", "", 0, 0, 0, "", 1, 0},
    {"cooldown",      "toggleCooldown",      "When a cooldown for a skill or spell has ended.", "", 0, 0, 0, "", 1, 0},
    {"arrowmiss",     "toggleArrowMiss",     "Shoot an arrow and it sticks in the ground.", "", 0, 0, 0, "", 1, 0},
    {"arrowempty",    "toggleArrowEmpty",    "Out of arrows in combat.", "", 0, 0, 0, "", 1, 0},
    {"gift",          "toggleGift",          "Sound when you receive a gift.", "", 0, 0, 0, "", 1, 0},
    {"giftsend",      "toggleGiftSend",      "Sound when you send a gift.", "", 0, 0, 0, "", 1, 0},
    {"stun",          "toggleStun",          "Sound when you are stunned.", "", 0, 0, 0, "", 1, 0},
    {"stunvictim",    "toggleStunVictim",    "Sound when a mob is stunned.", "", 0, 0, 0, "", 1, 0},
    {"daze",          "toggleDaze",          "Sound when you are dazed.", "", 0, 0, 0, "", 1, 0},
    {"dazevictim",    "toggleDazeVictim",    "Sound when a mob is dazed.", "", 0, 0, 0, "", 1, 0},
    {"disarm",        "toggleDisarm",        "Sounds for the disarm skill.", "", 0, 0, 0, "", 1, 0},    
    {"throwempty" ,   "toggleThrowEmpty" ,   "Out of throwing stars in combat.", "", 0, 0, 0, "", 1, 0},    
    {"wield",         "toggleWield",         "Sound for wielding a weapon.", "", 0, 0, 0, "", 1, 0},
    {"wearitem",      "toggleWearItem",      "Sound for wearing an item.", "", 0, 0, 0, "", 1, 0},
    {"removeitem",    "toggleRemoveItem",    "Sound for removing an item.", "", 0, 0, 0, "", 1, 0},
    {"fleefail",      "toggleFleeFail",      "Panic sound when attempting to flee but failing.", "", 0, 0, 0, "", 1, 0},
    {"reunion",       "toggleReunion",       "Sound for the reunion command.", "", 0, 0, 0, "", 1, 0},
    {"lostconcentration", "toggleLostConcentration", "Lose your concentration trying to cast a spell.", "", 0, 0, 0, "", 1, 0},
    {"cannotconcentrate", "toggleCannotConcentrate", "Cannot concentrate trying to cast a spell.", "", 0, 0, 0, "", 1, 0},
    {"menu",          "toggleMenu",          "Account menu music.", "", 0, 0, 0, "", 1, 0},
    {"manadrained",   "toggleManaDrained",   "Not enough mana to cast a spell.", "", 0, 0, 0, "", 1, 0},
    {"expedtimer",    "toggleExpedTimer",    "Notification when you can begin another expedition.", "", 0, 0, 0, "", 1, 0},
    {"questtimer",    "toggleQuestTimer",    "Notification when you can begin another quest.", "", 0, 0, 0, "", 1, 0},
    {"gqtimer",       "toggleGqTimer",       "Notification when you can begin another global quest.", "", 0, 0, 0, "", 1, 0},
    {"expedcomplete", "toggleExpedComplete", "Complete an expedition.", "", 0, 0, 0, "", 1, 0},
    {"exp",           "toggleExp",           "Receive experience.", "", 0, 0, 0, "", 1, 0},
    {"announcement",  "toggleAnnouncement",  "Notification for the announcement channel.", "", 0, 0, 0, "", 1, 0},
    {"qps",           "toggleQps",           "Notification when your questpoint pool increases.", "", 0, 0, 0, "", 1, 0},
    {"mudpie",        "toggleMudpie",        "Notification when your mudpie pool increases.", "", 0, 0, 0, "", 1, 0},
    {"summoned",      "toggleSummoned",      "You've been summoned.", "", 0, 0, 0, "", 1, 0},
    {"summonvanish",  "toggleSummonVanish",  "Someone in the room has been summoned away.", "", 0, 0, 0, "", 1, 0},
    {"summonappear",  "toggleSummonAppear",  "Someone has been summoned to the room.", "", 0, 0, 0, "", 1, 0},
    {"pcdeath",       "togglePcdeath",       "Global player death sound.", "", 0, 0, 0, "", 1, 0},
    {"mobgopoof",     "toggleMobGoPoof",     "Mob disappears into a puff of smoke.", "", 0, 0, 0, "", 1, 0},
    {"burp",          "toggleBurp",          "Random burp sound from burp social.", "", 0, 0, 0, "", 1, 0},
    {"bearhug",       "toggleBearhug",       "Bearhug social.", "", 0, 0, 0, "", 1, 0},
    {"stab",          "toggleStab",          "Stab social.", "", 0, 0, 0, "", 1, 0},
    {"bonk",          "toggleBonk",          "Bonk social.", "", 0, 0, 0, "", 1, 0},
    {"wolfwhistle",   "toggleWolfWhistle",   "Wolfwhistle social.", "", 0, 0, 0, "", 1, 0},
    {"pastry",        "togglePastry",        "Pastry social.", "", 0, 0, 0, "", 1, 0},
    {"mrow",          "toggleMrow",          "Mrow social.", "", 0, 0, 0, "", 1, 0},
    {"beckon",        "toggleBeckon",        "Beckon social.", "", 0, 0, 0, "", 1, 0},
    {"chuckle",       "toggleChuckle",       "Chuckle social.", "", 0, 0, 0, "", 1, 0},
    {"chortle",       "toggleChortle",       "Chortle social.", "", 0, 0, 0, "", 1, 0},
    {"snore",         "toggleSnore",         "Snore social.", "", 0, 0, 0, "", 1, 0},
    {"noddle",        "toggleNoddle",        "Noddle social.", "", 0, 0, 0, "", 1, 0},
    {"sneeze",        "toggleSneeze",        "Sneeze social.", "", 0, 0, 0, "", 1, 0},
    {"slap",          "toggleSlap",          "Slap social.", "", 0, 0, 0, "", 1, 0},
    {"punch",         "togglePunch",         "Punch social.", "", 0, 0, 0, "", 1, 0},
    {"moo",           "toggleMoo",           "Moo social.", "", 0, 0, 0, "", 1, 0},
    {"lick",          "toggleLick",          "Lick social.", "", 0, 0, 0, "", 1, 0},
    {"worship",       "toggleWorship",       "Worship social.", "", 0, 0, 0, "", 1, 0},
    {"fart",          "toggleFart",          "Random fart sound from fart social.", "", 0, 0, 0, "", 1, 0},
    {"bite",          "toggleBite",          "Bite social.", "", 0, 0, 0, "", 1, 0},
    {"oburp",         "toggleOburp",         "Oburp social.", "", 0, 0, 0, "", 1, 0},
    {"sniffle",       "toggleSniffle",       "Sniffle social.", "", 0, 0, 0, "", 1, 0},
    {"giggle",        "toggleGiggle",        "Giggle social.", "", 0, 0, 0, "", 1, 0},
    {"yeehaw",        "toggleYeehaw",        "Yeehaw social.", "", 0, 0, 0, "", 1, 0},
    {"gigglefart",    "toggleGigglefart",    "Giggle fart sound combination from gigglefart social.", "", 0, 0, 0, "", 1, 0},
    {"honk",          "toggleHonk",          "Honk social.", "", 0, 0, 0, "", 1, 0},
    {"meow",          "toggleMeow",          "Random meow sound from meow social.", "", 0, 0, 0, "", 1, 0},
    {"purr",          "togglePurr",          "Purring sound from purr social.", "", 0, 0, 0, "", 1, 0},
    {"spellup",       "toggleSpellup",       "Global spellup notification.", "", 0, 0, 0, "", 1, 0},
    {"crush",         "toggleCrush",         "Crush the contents of a mortar with a pestle.", "", 0, 0, 0, "", 1, 0},
    
    -- Ambiance (if the sector doesn't have a sound yet, it will use ambiance0.ogg)
    {"ambiance0","toggleAmbiance0","Ambiance","ambiance0.ogg", 0, 1, 0, "default", 1, 0},
    {"ambiance1","toggleAmbiance1","Ambiance","ambiance1.ogg", 0, 1, 0, "bridge", 1, 0},
    {"ambiance2","toggleAmbiance2","Ambiance","ambiance2.ogg", 0, 1, 0, "forest", 1, 0},
    {"ambiance3","toggleAmbiance3","Ambiance","ambiance3.ogg", 0, 1, 0, "green_mountain", 1, 0},
    {"ambiance4","toggleAmbiance4","Ambiance","ambiance4.ogg", 0, 1, 0, "sand", 1, 0},
    {"ambiance5","toggleAmbiance5","Ambiance","ambiance5.ogg", 0, 1, 0, "forest", 1, 0},
    {"ambiance6","toggleAmbiance6","Ambiance","ambiance6.ogg", 0, 1, 0, "sand", 1, 0},
    {"ambiance7","toggleAmbiance7","Ambiance","ambiance7.ogg", 0, 1, 0, "dead_forest", 1, 0},
    {"ambiance8","toggleAmbiance8","Ambiance","ambiance8.ogg", 0, 1, 0, "ruins", 1, 0},
    {"ambiance9","toggleAmbiance9","Ambiance","ambiance9.ogg", 0, 1, 0, "woods", 1, 0},
    {"ambiance10","toggleAmbiance10","Ambiance","ambiance10.ogg", 0, 1, 0, "inside", 1, 0},
    {"ambiance11","toggleAmbiance11","Ambiance","ambiance11.ogg", 0, 1, 0, "snowy_mountain", 1, 0},
    {"ambiance12","toggleAmbiance12","Ambiance","ambiance12.ogg", 0, 1, 0, "trees", 1, 0},
    {"ambiance13","toggleAmbiance13","Ambiance","ambiance13.ogg", 0, 1, 0, "air", 1, 0},
    {"ambiance14","toggleAmbiance14","Ambiance","ambiance14.ogg", 0, 1, 0, "mud", 1, 0},
    {"ambiance15","toggleAmbiance15","Ambiance","ambiance15.ogg", 0, 1, 0, "shallow_water", 1, 0},
    {"ambiance16","toggleAmbiance16","Ambiance","ambiance16.ogg", 0, 1, 0, "mountain", 1, 0},
    {"ambiance17","toggleAmbiance17","Ambiance","ambiance17.ogg", 0, 1, 0, "deep_water", 1, 0},
    {"ambiance18","toggleAmbiance18","Ambiance","ambiance18.ogg", 0, 1, 0, "trail", 1, 0},
    {"ambiance19","toggleAmbiance19","Ambiance","ambiance19.ogg", 0, 1, 0, "village", 1, 0},
    {"ambiance20","toggleAmbiance20","Ambiance","ambiance20.ogg", 0, 1, 0, "cave", 1, 0},
    {"ambiance21","toggleAmbiance21","Ambiance","ambiance21.ogg", 0, 1, 0, "cave", 1, 0},
    {"ambiance22","toggleAmbiance22","Ambiance","ambiance22.ogg", 0, 1, 0, "cave", 1, 0},
    {"ambiance23","toggleAmbiance23","Ambiance","ambiance23.ogg", 0, 1, 0, "swamp", 1, 0},
    {"ambiance24","toggleAmbiance24","Ambiance","ambiance24.ogg", 0, 1, 0, "marsh", 1, 0},
    {"ambiance25","toggleAmbiance25","Ambiance","ambiance25.ogg", 0, 1, 0, "pond", 1, 0},
    {"ambiance26","toggleAmbiance26","Ambiance","ambiance26.ogg", 0, 1, 0, "lake", 1, 0},
    {"ambiance27","toggleAmbiance27","Ambiance","ambiance27.ogg", 0, 1, 0, "volcano", 1, 0},
    {"ambiance28","toggleAmbiance28","Ambiance","ambiance28.ogg", 0, 1, 0, "snow", 1, 0},
    {"ambiance29","toggleAmbiance29","Ambiance","ambiance29.ogg", 0, 1, 0, "jungle", 1, 0},
    {"ambiance30","toggleAmbiance30","Ambiance","ambiance30.ogg", 0, 1, 0, "city", 1, 0},
    {"ambiance31","toggleAmbiance31","Ambiance","ambiance31.ogg", 0, 1, 0, "city", 1, 0},
    {"ambiance32","toggleAmbiance32","Ambiance","ambiance32.ogg", 0, 1, 0, "boat", 1, 0},
    {"ambiance33","toggleAmbiance33","Ambiance","ambiance33.ogg", 0, 1, 0, "road", 1, 0},
    {"ambiance34","toggleAmbiance34","Ambiance","ambiance34.ogg", 0, 1, 0, "hills", 1, 0},
    {"ambiance35","toggleAmbiance35","Ambiance","ambiance35.ogg", 0, 1, 0, "field", 1, 0},
    {"ambiance36","toggleAmbiance36","Ambiance","ambiance36.ogg", 0, 1, 0, "dead_field", 1, 0},
    {"ambiance37","toggleAmbiance37","Ambiance","ambiance37.ogg", 0, 1, 0, "desert", 1, 0},
    {"ambiance38","toggleAmbiance38","Ambiance","ambiance38.ogg", 0, 1, 0, "rocks", 1, 0},
    {"ambiance39","toggleAmbiance39","Ambiance","ambiance39.ogg", 0, 1, 0, "dirt", 1, 0},
    {"ambiance40","toggleAmbiance40","Ambiance","ambiance40.ogg", 0, 1, 0, "unused", 1, 0},
    {"ambiance41","toggleAmbiance41","Ambiance","ambiance41.ogg", 0, 1, 0, "mud", 1, 0},
    {"ambiance42","toggleAmbiance42","Ambiance","ambiance42.ogg", 0, 1, 0, "dungeon", 1, 0},
    {"ambiance43","toggleAmbiance43","Ambiance","ambiance43.ogg", 0, 1, 0, "stables", 1, 0},
    {"ambiance44","toggleAmbiance44","Ambiance","ambiance44.ogg", 0, 1, 0, "graveyard", 1, 0},
    {"ambiance45","toggleAmbiance45","Ambiance","ambiance45.ogg", 0, 1, 0, "cursed_structure", 1, 0},
    {"ambiance46","toggleAmbiance46","Ambiance","ambiance46.ogg", 0, 1, 0, "castle", 1, 0},
    {"ambiance47","toggleAmbiance47","Ambiance","ambiance47.ogg", 0, 1, 0, "potion_shop", 1, 0},
    {"ambiance48","toggleAmbiance48","Ambiance","ambiance48.ogg", 0, 1, 0, "inn", 1, 0},
    {"ambiance49","toggleAmbiance49","Ambiance","ambiance49.ogg", 0, 1, 0, "tinkerer_workshop", 1, 0},
    {"ambiance50","toggleAmbiance50","Ambiance","ambiance50.ogg", 0, 1, 0, "carpenter_workshop", 1, 0},
    {"ambiance51","toggleAmbiance51","Ambiance","ambiance51.ogg", 0, 1, 0, "blacksmith", 1, 0},
    {"ambiance52","toggleAmbiance52","Ambiance","ambiance52.ogg", 0, 1, 0, "hive", 1, 0},
    {"ambiance53","toggleAmbiance53","Ambiance","ambiance53.ogg", 0, 1, 0, "laboratory", 1, 0},
    {"ambiance54","toggleAmbiance54","Ambiance","ambiance54.ogg", 0, 1, 0, "arena", 1, 0},
    {"ambiance55","toggleAmbiance55","Ambiance","ambiance55.ogg", 0, 1, 0, "unholy_temple", 1, 0},
    {"ambiance56","toggleAmbiance56","Ambiance","ambiance56.ogg", 0, 1, 0, "prison", 1, 0},
    {"ambiance57","toggleAmbiance57","Ambiance","ambiance57.ogg", 0, 1, 0, "dock", 1, 0},
    {"ambiance58","toggleAmbiance58","Ambiance","ambiance58.ogg", 0, 1, 0, "sewers", 1, 0},
    {"ambiance59","toggleAmbiance59","Ambiance","ambiance59.ogg", 0, 1, 0, "library", 1, 0},
    {"ambiance60","toggleAmbiance60","Ambiance","ambiance60.ogg", 0, 1, 0, "tavern", 1, 0},
    {"ambiance61","toggleAmbiance61","Ambiance","ambiance61.ogg", 0, 1, 0, "oasis", 1, 0},
    {"ambiance62","toggleAmbiance62","Ambiance","ambiance62.ogg", 0, 1, 0, "market", 1, 0},
    {"ambiance63","toggleAmbiance63","Ambiance","ambiance63.ogg", 0, 1, 0, "tar_pit", 1, 0},
    {"ambiance64","toggleAmbiance64","Ambiance","ambiance64.ogg", 0, 1, 0, "black_market", 1, 0},
    {"ambiance65","toggleAmbiance65","Ambiance","ambiance65.ogg", 0, 1, 0, "tunnel", 1, 0},
    {"ambiance66","toggleAmbiance66","Ambiance","ambiance66.ogg", 0, 1, 0, "underwater", 1, 0},
    {"ambiance67","toggleAmbiance67","Ambiance","ambiance67.ogg", 0, 1, 0, "holy_temple", 1, 0},
    {"ambiance68","toggleAmbiance68","Ambiance","ambiance68.ogg", 0, 1, 0, "shrine", 1, 0},
    {"ambiance69","toggleAmbiance69","Ambiance","ambiance69.ogg", 0, 1, 0, "hospital", 1, 0},
    {"ambiance70","toggleAmbiance70","Ambiance","ambiance70.ogg", 0, 1, 0, "waterfall", 1, 0},
    {"ambiance71","toggleAmbiance71","Ambiance","ambiance71.ogg", 0, 1, 0, "shop", 1, 0},
    {"ambiance72","toggleAmbiance72","Ambiance","ambiance72.ogg", 0, 1, 0, "pet_shop", 1, 0},
    {"ambiance73","toggleAmbiance73","Ambiance","ambiance73.ogg", 0, 1, 0, "cafe", 1, 0},
    {"ambiance74","toggleAmbiance74","Ambiance","ambiance74.ogg", 0, 1, 0, "bedchamber", 1, 0},
    {"ambiance75","toggleAmbiance75","Ambiance","ambiance75.ogg", 0, 1, 0, "void", 1, 0},
    {"ambiance76","toggleAmbiance76","Ambiance","ambiance76.ogg", 0, 1, 0, "desolate_trail", 1, 0},
    {"ambiance77","toggleAmbiance77","Ambiance","ambiance77.ogg", 0, 1, 0, "practice_yard", 1, 0},
    {"ambiance78","toggleAmbiance78","Ambiance","ambiance78.ogg", 0, 1, 0, "inferno", 1, 0},
    {"ambiance79","toggleAmbiance79","Ambiance","ambiance79.ogg", 0, 1, 0, "barn", 1, 0},
    {"ambiance80","toggleAmbiance80","Ambiance","ambiance80.ogg", 0, 1, 0, "dream", 1, 0},
    {"ambiance81","toggleAmbiance81","Ambiance","ambiance81.ogg", 0, 1, 0, "bank", 1, 0},
    {"ambiance82","toggleAmbiance82","Ambiance","ambiance82.ogg", 0, 1, 0, "underground", 1, 0},
    {"ambiance83","toggleAmbiance83","Ambiance","ambiance83.ogg", 0, 1, 0, "bog", 1, 0},
    {"ambiance84","toggleAmbiance84","Ambiance","ambiance84.ogg", 0, 1, 0, "pasture", 1, 0},

    -- music for the areas
    {"area1","toggleArea1","Music","area1.ogg", 0, 0, 1, "", 1, 0}, -- The Shire
    {"area2","toggleArea2","Music","area2.ogg", 0, 0, 1, "", 1, 0}, -- The Plains
    {"area3","toggleArea3","Music","area3.ogg", 0, 0, 1, "", 1, 0}, -- Forest of Haon Dor
    {"area4","toggleArea4","Music","area4.ogg", 0, 0, 1, "", 1, 0}, -- Arachnos
    {"area5","toggleArea5","Music","area5.ogg", 0, 0, 1, "", 1, 0}, -- Elemental Canyon
    {"area6","toggleArea6","Music","area6.ogg", 0, 0, 1, "", 1, 0}, -- 36 Chambers of Death
    {"area7","toggleArea7","Music","area7.ogg", 0, 0, 1, "", 1, 0}, -- Draconian Tower
    {"area8","toggleArea8","Music","area8.ogg", 0, 0, 1, "", 1, 0}, -- Llothland
    {"area10","toggleArea10","Music","area10.ogg", 0, 0, 1, "", 1, 0}, -- Tombstone Park
    {"area11","toggleArea11","Music","area11.ogg", 0, 0, 1, "", 1, 0}, -- Holy Grove
    {"area12","toggleArea12","Music","area12.ogg", 0, 0, 1, "", 1, 0}, -- High Tower of Sorcery
    {"area13","toggleArea13","Music","area13.ogg", 0, 0, 1, "", 1, 0}, -- Undercity of Beasts
    {"area15","toggleArea15","Music","area15.ogg", 0, 0, 1, "", 1, 0}, -- Mahn-Tor
    {"area16","toggleArea16","Music","area16.ogg", 0, 0, 1, "", 1, 0}, -- Marsh
    {"area17","toggleArea17","Music","area17.ogg", 0, 0, 1, "", 1, 0}, -- Miden'nir
    {"area19","toggleArea19","Music","area19.ogg", 0, 0, 1, "", 1, 0}, -- Olympus
    {"area20","toggleArea20","Music","area20.ogg", 0, 0, 1, "", 1, 0}, -- Sewers
    {"area21","toggleArea21","Music","area21.ogg", 0, 0, 1, "", 1, 0}, -- NE Witch's Wood
    {"area22","toggleArea22","Music","area22.ogg", 0, 0, 1, "", 1, 0}, -- UnderDark North
    {"area23","toggleArea23","Music","area23.ogg", 0, 0, 1, "", 1, 0}, -- Land of the Lost Elves
    {"area24","toggleArea24","Music","area24.ogg", 0, 0, 1, "", 1, 0}, -- Wyvern's Tower
    {"area25","toggleArea25","Music","area25.ogg", 0, 0, 1, "", 1, 0}, -- Hillock Hills
    {"area26","toggleArea26","Music","area26.ogg", 0, 0, 1, "", 1, 0}, -- Everlasting Silence
    {"area27","toggleArea27","Music","area27.ogg", 0, 0, 1, "", 1, 0}, -- Dusk to Dawn
    {"area28","toggleArea28","Music","area28.ogg", 0, 0, 1, "", 1, 0}, -- Nadven Beach
    {"area29","toggleArea29","Music","area29.ogg", 0, 0, 1, "", 1, 0}, -- Cargain Ruins
    {"area30","toggleArea30","Music","area30.ogg", 0, 0, 1, "", 1, 0}, -- Abandoned Animal Farm
    {"area32","toggleArea32","Music","area32.ogg", 0, 0, 1, "", 1, 0}, -- Crystal Creek Village
    {"area34","toggleArea34","Music","area34.ogg", 0, 0, 1, "", 1, 0}, -- Carnival of Wonders
    {"area37","toggleArea37","Music","area37.ogg", 0, 0, 1, "", 1, 0}, -- Hlua Orphanage
    {"area38","toggleArea38","Music","area38.ogg", 0, 0, 1, "", 1, 0}, -- Oolrith
    {"area39","toggleArea39","Music","area39.ogg", 0, 0, 1, "", 1, 0}, -- Ironwood
    {"area40","toggleArea40","Music","area40.ogg", 0, 0, 1, "", 1, 0}, -- Cursed Manor
    {"area41","toggleArea41","Music","area41.ogg", 0, 0, 1, "", 1, 0}, -- Roadhouse Inn
    {"area42","toggleArea42","Music","area42.ogg", 0, 0, 1, "", 1, 0}, -- Abandoned Mines
    {"area43","toggleArea43","Music","area43.ogg", 0, 0, 1, "", 1, 0}, -- Kyeldor Zoo
    {"area44","toggleArea44","Music","area44.ogg", 0, 0, 1, "", 1, 0}, -- Cradlenook
    {"area45","toggleArea45","Music","area45.ogg", 0, 0, 1, "", 1, 0}, -- Tiegre Town
    {"area46","toggleArea46","Music","area46.ogg", 0, 0, 1, "", 1, 0}, -- Half-moon Meadow
    {"area47","toggleArea47","Music","area47.ogg", 0, 0, 1, "", 1, 0}, -- Orc Encampment
    {"area48","toggleArea48","Music","area48.ogg", 0, 0, 1, "", 1, 0}, -- Toy Factory
    {"area50","toggleArea50","Music","area50.ogg", 0, 0, 1, "", 1, 0}, -- Crow's Bay
    {"area51","toggleArea51","Music","area51.ogg", 0, 0, 1, "", 1, 0}, -- Mage's Academy
    {"area53","toggleArea53","Music","area53.ogg", 0, 0, 1, "", 1, 0}, -- The Hollow
    {"area54","toggleArea54","Music","area54.ogg", 0, 0, 1, "", 1, 0}, -- Nhe'Syri Village
    {"area55","toggleArea55","Music","area55.ogg", 0, 0, 1, "", 1, 0}, -- Mob Factory
    {"area56","toggleArea56","Music","area56.ogg", 0, 0, 1, "", 1, 0}, -- Illyrian Forest
    {"area57","toggleArea57","Music","area57.ogg", 0, 0, 1, "", 1, 0}, -- Drowshade
    {"area58","toggleArea58","Music","area58.ogg", 0, 0, 1, "", 1, 0}, -- Merchants' Marketplace
    {"area59","toggleArea59","Music","area59.ogg", 0, 0, 1, "", 1, 0}, -- Snow Spire
    {"area60","toggleArea60","Music","area60.ogg", 0, 0, 1, "", 1, 0}, -- Kextra's Temple
    {"area62","toggleArea62","Music","area62.ogg", 0, 0, 1, "", 1, 0}, -- Horizon Chaser
    {"area63","toggleArea63","Music","area63.ogg", 0, 0, 1, "", 1, 0}, -- Haven Lake
    {"area64","toggleArea64","Music","area64.ogg", 0, 0, 1, "", 1, 0}, -- The Illyrian Tavern & Inn
    {"area65","toggleArea65","Music","area65.ogg", 0, 0, 1, "", 1, 0}, -- City of Illyria
    {"area66","toggleArea66","Music","area66.ogg", 0, 0, 1, "", 1, 0}, -- Monster Colosseum
    {"area67","toggleArea67","Music","area67.ogg", 0, 0, 1, "", 1, 0}, -- Heaven's Command
    {"area68","toggleArea68","Music","area68.ogg", 0, 0, 1, "", 1, 0}, -- Demon Eruption
    {"area69","toggleArea69","Music","area69.ogg", 0, 0, 1, "", 1, 0}, -- Nokova Island
    {"area70","toggleArea70","Music","area70.ogg", 0, 0, 1, "", 1, 0}, -- Demonweb Plains
    {"area71","toggleArea71","Music","area71.ogg", 0, 0, 1, "", 1, 0}, -- Feyine
    {"area72","toggleArea72","Music","area72.ogg", 0, 0, 1, "", 1, 0}, -- Crimson Keep Party Quest
    {"area73","toggleArea73","Music","area73.ogg", 0, 0, 1, "", 1, 0}, -- Highlands
    {"area74","toggleArea74","Music","area74.ogg", 0, 0, 1, "", 1, 0}, -- Bandit Camp
    {"area75","toggleArea75","Music","area75.ogg", 0, 0, 1, "", 1, 0}, -- Labyrinth Duo Quest
    {"area76","toggleArea76","Music","area76.ogg", 0, 0, 1, "", 1, 0}, -- Wildlife Reserve
    {"area77","toggleArea77","Music","area77.ogg", 0, 0, 1, "", 1, 0}, -- Hell
    {"area78","toggleArea78","Music","area78.ogg", 0, 0, 1, "", 1, 0}, -- Castle of Darkness
    {"area79","toggleArea79","Music","area79.ogg", 0, 0, 1, "", 1, 0}, -- Tail's Town
    {"area80","toggleArea80","Music","area80.ogg", 0, 0, 1, "", 1, 0}, -- Hadiran Monastery
    {"area81","toggleArea81","Music","area81.ogg", 0, 0, 1, "", 1, 0}, -- Kingshelm
    {"area82","toggleArea82","Music","area82.ogg", 0, 0, 1, "", 1, 0}, -- Dragoncrest Prison
    {"area83","toggleArea83","Music","area83.ogg", 0, 0, 1, "", 1, 0}, -- Ivory Temple
    {"area84","toggleArea84","Music","area84.ogg", 0, 0, 1, "", 1, 0}, -- City of Tanaria
    {"area85","toggleArea85","Music","area85.ogg", 0, 0, 1, "", 1, 0}, -- Embergreen
    {"area86","toggleArea86","Music","area86.ogg", 0, 0, 1, "", 1, 0}, -- Alfrea
    {"area87","toggleArea87","Music","area87.ogg", 0, 0, 1, "", 1, 0}, -- Forgotten Fortress
    {"area88","toggleArea88","Music","area88.ogg", 0, 0, 1, "", 1, 0}, -- Town of Bandell
    {"area89","toggleArea89","Music","area89.ogg", 0, 0, 1, "", 1, 0}, -- Lurid
    {"area90","toggleArea90","Music","area90.ogg", 0, 0, 1, "", 1, 0}, -- Old Reactor
    {"area91","toggleArea91","Music","area91.ogg", 0, 0, 1, "", 1, 0}, -- Darnok's Graveyard
    {"area92","toggleArea92","Music","area92.ogg", 0, 0, 1, "", 1, 0}, -- RiverRine
    {"area93","toggleArea93","Music","area93.ogg", 0, 0, 1, "", 1, 0}, -- Enchanted Falls
    {"area94","toggleArea94","Music","area94.ogg", 0, 0, 1, "", 1, 0}, -- Qualidesh
    {"area95","toggleArea95","Music","area95.ogg", 0, 0, 1, "", 1, 0}, -- Tree of Pixies
    {"area96","toggleArea96","Music","area96.ogg", 0, 0, 1, "", 1, 0}, -- Tree of Pixies II
    {"area97","toggleArea97","Music","area97.ogg", 0, 0, 1, "", 1, 0}, -- Blackwater Canyon
    {"area98","toggleArea98","Music","area98.ogg", 0, 0, 1, "", 1, 0}, -- Drunk Races
    {"area99","toggleArea99","Music","area99.ogg", 0, 0, 1, "", 1, 0}, -- Red Light - Green Light
    {"area100","toggleArea100","Music","area100.ogg", 0, 0, 1, "", 1, 0}, -- Stone Forge
    {"area101","toggleArea101","Music","area101.ogg", 0, 0, 1, "", 1, 0}, -- Lankford Ruins
    {"area102","toggleArea102","Music","area102.ogg", 0, 0, 1, "", 1, 0}, -- Elvander
    {"area103","toggleArea103","Music","area103.ogg", 0, 0, 1, "", 1, 0}, -- Besmirched Grounds
    {"area104","toggleArea104","Music","area104.ogg", 0, 0, 1, "", 1, 0}, -- Primrose Plains
    {"area105","toggleArea105","Music","area105.ogg", 0, 0, 1, "", 1, 0}, -- Darnok's Keep
    {"area106","toggleArea106","Music","area106.ogg", 0, 0, 1, "", 1, 0}, -- Arkham
    {"area107","toggleArea107","Music","area107.ogg", 0, 0, 1, "", 1, 0}, -- Isle of the Dead
    {"area108","toggleArea108","Music","area108.ogg", 0, 0, 1, "", 1, 0}, -- Realms of Enchantment
    {"area113","toggleArea113","Music","area113.ogg", 0, 0, 1, "", 1, 0}, -- Monster Park
    {"area114","toggleArea114","Music","area114.ogg", 0, 0, 1, "", 1, 0}, -- Angler's Cove
    {"area115","toggleArea115","Music","area115.ogg", 0, 0, 1, "", 1, 0}, -- Glen Dhoo Forest
    {"area116","toggleArea116","Music","area116.ogg", 0, 0, 1, "", 1, 0}, -- Lierknay Forest
    {"area117","toggleArea117","Music","area117.ogg", 0, 0, 1, "", 1, 0}, -- The Gate
    {"area118","toggleArea118","Music","area118.ogg", 0, 0, 1, "", 1, 0}, -- Clockworks
    {"area119","toggleArea119","Music","area119.ogg", 0, 0, 1, "", 1, 0}, -- Tolchalla
    {"area120","toggleArea120","Music","area120.ogg", 0, 0, 1, "", 1, 0}, -- Fanatics' Tower
    {"area121","toggleArea121","Music","area121.ogg", 0, 0, 1, "", 1, 0}, -- Pirate Ship
    {"area122","toggleArea122","Music","area122.ogg", 0, 0, 1, "", 1, 0}, -- Divinity Pond
    {"area123","toggleArea123","Music","area123.ogg", 0, 0, 1, "", 1, 0}, -- Jungle of Xyzzyxx
    {"area124","toggleArea124","Music","area124.ogg", 0, 0, 1, "", 1, 0}, -- Valley of the Titans
    {"area126","toggleArea126","Music","area126.ogg", 0, 0, 1, "", 1, 0}, -- Grim Deeps
    {"area127","toggleArea127","Music","area127.ogg", 0, 0, 1, "", 1, 0}, -- Witch's Mountain
    {"area128","toggleArea128","Music","area128.ogg", 0, 0, 1, "", 1, 0}, -- Wyvern's Aerie
    {"area129","toggleArea129","Music","area129.ogg", 0, 0, 1, "", 1, 0}, -- Kriega
    {"area130","toggleArea130","Music","area130.ogg", 0, 0, 1, "", 1, 0}, -- Haluwah Island
    {"area131","toggleArea131","Music","area131.ogg", 0, 0, 1, "", 1, 0}, -- Nyxian Tunnels
    {"area132","toggleArea132","Music","area132.ogg", 0, 0, 1, "", 1, 0}, -- Accursed Ruins
    {"area133","toggleArea133","Music","area133.ogg", 0, 0, 1, "", 1, 0}, -- Emerald Forest
    {"area134","toggleArea134","Music","area134.ogg", 0, 0, 1, "", 1, 0}, -- Luminati House Hall
    {"area135","toggleArea135","Music","area135.ogg", 0, 0, 1, "", 1, 0}, -- Hall of Healers
    {"area136","toggleArea136","Music","area136.ogg", 0, 0, 1, "", 1, 0}, -- Chaos House Hall
    {"area138","toggleArea138","Music","area138.ogg", 0, 0, 1, "", 1, 0}, -- Rose Forest
    {"area140","toggleArea140","Music","area140.ogg", 0, 0, 1, "", 1, 0}, -- Santa's Sanctum
    {"area141","toggleArea141","Music","area141.ogg", 0, 0, 1, "", 1, 0}, -- Drakyri Isle
    {"area142","toggleArea142","Music","area142.ogg", 0, 0, 1, "", 1, 0}, -- Roads to Allwhere
    {"area143","toggleArea143","Music","area143.ogg", 0, 0, 1, "", 1, 0}, -- Alchemy Academy
    {"area144","toggleArea144","Music","area144.ogg", 0, 0, 1, "", 1, 0}, -- Hall of Doom
    {"area145","toggleArea145","Music","area145.ogg", 0, 0, 1, "", 1, 0}, -- Sacellum
    {"area146","toggleArea146","Music","area146.ogg", 0, 0, 1, "", 1, 0}, -- Divided Souls
    {"area147","toggleArea147","Music","area147.ogg", 0, 0, 1, "", 1, 0}, -- Newbie Tree House
    {"area148","toggleArea148","Music","area148.ogg", 0, 0, 1, "", 1, 0}, -- Undersea Shipwrecks
    {"area149","toggleArea149","Music","area149.ogg", 0, 0, 1, "", 1, 0}, -- Crafters Forge
    {"area150","toggleArea150","Music","area150.ogg", 0, 0, 1, "", 1, 0}, -- Distant Destinies
    {"area151","toggleArea151","Music","area151.ogg", 0, 0, 1, "", 1, 0}, -- Crisscrossing Paths
    {"area152","toggleArea152","Music","area152.ogg", 0, 0, 1, "", 1, 0}, -- Twilight Travels
    {"area154","toggleArea154","Music","area154.ogg", 0, 0, 1, "", 1, 0}, -- Hilltop Trail
    {"area156","toggleArea156","Music","area156.ogg", 0, 0, 1, "", 1, 0}, -- Rocky Roadways
    {"area157","toggleArea157","Music","area157.ogg", 0, 0, 1, "", 1, 0}, -- Trails and Tails Highway
    {"area158","toggleArea158","Music","area158.ogg", 0, 0, 1, "", 1, 0}, -- Avenue of the Ancients
    {"area159","toggleArea159","Music","area159.ogg", 0, 0, 1, "", 1, 0}, -- Rambling Roads
    {"area160","toggleArea160","Music","area160.ogg", 0, 0, 1, "", 1, 0}, -- Timeless Trails
    {"area161","toggleArea161","Music","area161.ogg", 0, 0, 1, "", 1, 0}, -- Path to Undecided Fates
    {"area162","toggleArea162","Music","area162.ogg", 0, 0, 1, "", 1, 0}, -- Fortune's Demise
    {"area163","toggleArea163","Music","area163.ogg", 0, 0, 1, "", 1, 0}, -- Emerald Way Highway
    {"area164","toggleArea164","Music","area164.ogg", 0, 0, 1, "", 1, 0}, -- Wayfarers Ridge Highway
    {"area165","toggleArea165","Music","area165.ogg", 0, 0, 1, "", 1, 0}, -- Field of Dreams Highway
    {"area166","toggleArea166","Music","area166.ogg", 0, 0, 1, "", 1, 0}, -- Stormy Straits
    {"area167","toggleArea167","Music","area167.ogg", 0, 0, 1, "", 1, 0}, -- Chasm of Mayhem
    {"area168","toggleArea168","Music","area168.ogg", 0, 0, 1, "", 1, 0}, -- SW Witch's Wood
    {"area169","toggleArea169","Music","area169.ogg", 0, 0, 1, "", 1, 0}, -- NW Witch's Wood
    {"area170","toggleArea170","Music","area170.ogg", 0, 0, 1, "", 1, 0}, -- SE Witch's Wood
    {"area171","toggleArea171","Music","area171.ogg", 0, 0, 1, "", 1, 0}, -- House of Lucius
    {"area172","toggleArea172","Music","area172.ogg", 0, 0, 1, "", 1, 0}, -- HoneyBee Village
    {"area173","toggleArea173","Music","area173.ogg", 0, 0, 1, "", 1, 0}, -- Craftscape
    {"area175","toggleArea175","Music","area175.ogg", 0, 0, 1, "", 1, 0}, -- Temple of Aelyn
    {"area177","toggleArea177","Music","area177.ogg", 0, 0, 1, "", 1, 0}, -- Art Gallery
    {"area200","toggleArea200","Music","area200.ogg", 0, 0, 1, "", 1, 0}, -- Hall of Slayers
    {"area239","toggleArea239","Music","area239.ogg", 0, 0, 1, "", 1, 0}, -- Mount Fulcrum
    {"area229","toggleArea229","Music","area22.ogg", 0, 0, 1, "", 1, 0}, -- UnderDark South
    {"area301","toggleArea301","Music","area301.ogg", 0, 0, 1, "", 1, 0}, -- Jungle of Artemisia
    {"area328","toggleArea328","Music","area328.ogg", 0, 0, 1, "", 1, 0}, -- Woodland Church
    {"area332","toggleArea332","Music","area332.ogg", 0, 0, 1, "", 1, 0}, -- Istyra Ocean
    {"area297","toggleArea297","Music","area297.ogg", 0, 0, 1, "", 1, 0}, -- The Horn Reborn
    {"area36", "toggleArea36", "Music","area36.ogg", 0, 0, 1, "", 1, 0}, -- The Arena
    {"area315", "toggleArea315", "Music","area315.ogg", 0, 0, 1, "", 1, 0}, -- Ancient Legends highway
    {"area284", "toggleArea284", "Music","area284.ogg", 0, 0, 1, "", 1, 0}, -- Winter Veil
    {"area336", "toggleArea336", "Music","area336.ogg", 0, 0, 1, "", 1, 0}, -- Luminesea
    {"area125", "toggleArea125", "Music","area125.ogg", 0, 0, 1, "", 1, 0}, -- The Arena
    {"area338", "toggleArea338", "Music","area338.ogg", 0, 0, 1, "", 1, 0}, -- Starlight Falls

    -- All areas should have a song, with the exception of player homes. So this file will play
    -- in those, unless the player has a preference, then it will refer to homeMusicKeyword.
    {"homemusic","toggleHomeMusic","Music","playerhome.ogg", 0, 0, 1, "", 1, 0}, -- Player Home Music

    -- COMBAT
    {"meleetnw",     "toggleMeleeTNW",  "Weaponless melee from target.","", 0, 0, 0, "", 1, 1},
    {"meleetw",      "toggleMeleeTW",   "Weapon melee from target.","", 0, 0, 0, "", 1, 1},
    {"meleesnw",     "toggleMeleeSNW",  "Your weaponless melee attack.","", 0, 0, 0, "", 1, 1},
    {"meleesw",      "toggleMeleeSW",   "Your weapon melee attack.","", 0, 0, 0, "", 1, 1},
    {"skillself",    "toggleSkillSelf", "Your skill or spell attack.","", 0, 0, 0, "", 1, 1},
    {"nonattackskill", "toggleNonAttackSkill", "Non-attack skills and spells.","", 0, 0, 0, "", 1, 1},
    {"buffexpires",  "toggleBuffExpires", "Buff expires.","", 0, 0, 0, "", 1, 1},


-- [1]keyword, [2]toggleVariable, [3]Description, [4]Sound file, [5]isMusic, [6]isAmbiance, [7]isAreaSong, [8]sectorName, [9]onByDefault, [10]isCombatSound

    --[[

    Areas still missing songs:
      Vnum 9 Gnomingham Hamlet (being revamped)
      Vnum 35 Freeze Tag Arena (not necessary)
      Vnum 137 Wailing Hills (unfinished)
      Vnum 18 (Unfinished area)
      Vnum 111 Piriani's Area (unfinished)
      Vnum 112 Primate Village (unfinished)
      Vnum 52 Sky Dock (area will be removed or revamped)
      Vnum 109 Ruined Space Port (area will be removed or revamped)
      Vnum 125 Realms of Delusion (to be removed)
      Vnum 139 Illithid Area (unfinished)
      Vnum 49 Temple of Legends (unfinished)

       IMPORTANT: You can have the same .ogg file for multiple entries above, but each must have
       its own unique keyword, and toggle variable.

       Also, make sure when you add a new file that if it's music, only music == 1, and not both
       music == 1 and ambiance == 1. Each entry must be either music OR ambiance.
    ]]

}

function GetSoundKeyword(toggle)
  for i,v in pairs(soundpackTable) do
    if toggle == soundpackTable[i][2] then
       return soundpackTable[i][1]
    end
  end
  return "UNKNOWN KEYWORD"
end

function soundpack_help ()
  Note("Syntax: sound toggle keyword")
  Note("        sound music")
  Note("        sound homemusic keyword")
  Note("        sound combat")
  Note("        sound combat music")
  Note("        sound ambiance")
  Note("        sound weather")
  Note("        sound socials")
  Note("        sound on")
  Note("        sound off")
  Note("        sound list <keyword>")
  Note("        sound print")
  Note("        sound paths")
end

function soundpack_list (name, line, wildcards)
  args = wildcards[1]

  words = {}
  -- Split the args string into individual words
  for word in args:gmatch("[%w-]+") do table.insert(words, word) end

  arg1 = words[1]

  -- Note("Syntax: sound list <keyword>")
  if arg1 == nil then
    string = "Sound effect keywords: "
    count = 0
    for i,v in pairs(soundpackTable) do
      -- if isMusic/isAmbiance are both false, it's a sound effect
      if soundpackTable[i][5] == 0 and soundpackTable[i][6] == 0 and soundpackTable[i][7] == 0 then
        if count > 0 then
          string = string .. ", "
        end
        count = count + 1
        string = string .. v[1]
      end
    end
    string = string .. "."
    print(string)

    string = "Music keywords: "
    count = 0
    for i,v in pairs(soundpackTable) do
      if soundpackTable[i][7] == 1 then
        if count > 0 then
          string = string .. ", "
        end
        count = count + 1
        string = string .. v[1]
      end
    end
    string = string .. "."
    print(string)

    string = "Ambiance keywords: "
    count = 0
    for i,v in pairs(soundpackTable) do
      if soundpackTable[i][6] == 1 then
        if count > 0 then
          string = string .. ", "
        end
        count = count + 1
        string = string .. v[1]
      end
    end
    string = string .. "."
    print(string)
    return
  end

  keyword = string.lower(arg1)

  for i,v in pairs(soundpackTable) do
    if keyword == soundpackTable[i][1] then
      enabledString = ""
      if tonumber(GetVariable(soundpackTable[i][2])) == 1 then
        enabledString = "ENABLED"
      else
        enabledString = "DISABLED"
      end
      string = keyword .. " " ..  enabledString .. " " .. soundpackTable[i][3]
      print(string)
      return
    end
  end
  string = "No keyword named " .. keyword .. " could be found."
  print(string)
  return
end

function soundpack_toggle (name, line, wildcards)
  args = wildcards[1]

  words = {}
  -- Split the args string into individual words
  for word in args:gmatch("[%w-]+") do table.insert(words, word) end

  arg1 = words[1]

  if arg1 == nil then
    Note("Syntax: sound toggle <keyword>")
    return
  end
  keyword = string.lower(arg1)

  x = 0 -- This is 0 for turn it off, or 1 for turn it on

  found = false
  toggleVariable = ""
  -- Try to find the keyword in the above table
  for i,v in pairs(soundpackTable) do
    if keyword == v[1] then
      found = true
      toggleVariable = v[2]
    end
  end

  -- Player entered an invalid keyword
  if not found then
    Note(keyword .. " is not a valid sound command. Type 'sound help' for the syntax.")
    return
  end

  -- Toggle the desired sound on or off
  if tonumber(GetVariable(toggleVariable)) == 1 then
    x = 0 -- Sound was on, so turn it off
    Note("Turning sound off for " .. keyword .. ".")
  else
    x = 1 -- Sound was off, so turn it on
    Note("Turning sound on for " .. keyword .. ".")
  end
  SetVariable(toggleVariable, x)
  SaveState()
end

function soundpack_ambiance()
  if tonumber(GetVariable("ambianceEnabled")) == 1 then
    SetVariable("ambianceEnabled", 0)
    Note("Disabling ambiance.")
    stopsound(GetVariable("ambiance"))
  else
    if tonumber(GetVariable("soundsEnabled")) == 0 then
      Note("You must first enable sounds with the command 'sound on'.")
      return
    end
    SetVariable("ambianceEnabled", 1)
    Note("Enabling ambiance.")
    Note(volume_names[2] .. " current volume is "..tonumber(GetVariable("volume2"))..".")
    stopsound(GetVariable("ambiance"))
    StartAmbiance()
  end
  SaveState()
  return
end

function soundpack_combat ()
  if tonumber(GetVariable("combatEnabled")) == 1 then
    SetVariable("combatEnabled", 0)
    Note("Disabling combat sounds.")
  else
    if tonumber(GetVariable("soundsEnabled")) == 0 then
      Note("You must first enable sounds with the command 'sound on'.")
      return
    end     
    SetVariable("combatEnabled", 1)
    Note("Enabling combat sounds.")
    Note(volume_names[5] .. " current volume is "..tonumber(GetVariable("volume5"))..".")
  end
  SaveState()
  return
end

function soundpack_socials()
  if tonumber(GetVariable("socialsEnabled")) == 1 then
     SetVariable("socialsEnabled", 0)
     Note("Disabling social sounds.")
  else
     if tonumber(GetVariable("soundsEnabled")) == 0 then
       Note("You must first enable sounds with the command 'sound on'.")
       return
     end
     SetVariable("socialsEnabled", 1)
     Note("Enabling socials.")
     Note(volume_names[4] .. " current volume is "..tonumber(GetVariable("volume4"))..".")
  end
  SaveState()
  return
end

function soundpack_print()
  if tonumber(GetVariable("printsounds")) == 0 then
    Note("Printing sound keywords is now on.")
    SetVariable("printsounds", 1)
  else
    Note("Printing sound keywords is now off.")
    SetVariable("printsounds", 0)
  end
  return
end

function soundpack_on()
  if tonumber(GetVariable("soundsEnabled")) == 1 then
    Note("You already have sounds enabled. To disable them, type 'sound off'.")
    return
  end
  Note("Enabling sounds.")
  -- Let them know their current volume levels
  oldVolume = current_volume
  for i=1,7 do
    current_volume = i
    Note(volume_names[current_volume] .. " current volume is "..getCurrentVolume()..".")
  end
  current_volume = oldVolume

  SetVariable("soundsEnabled", 1)
  StartAmbiance()
  StartMusic()
  StartWeather()
  SaveState()
  return
end

function soundpack_off()
  if tonumber(GetVariable("soundsEnabled")) == 0 then
    Note("You already have sounds disabled. To re-enable them, type 'sound on'.")
    return
  end
  Note("Disabling sounds. To re-enable, type 'sound on'.")
  SetVariable("soundsEnabled", 0)
  ppi.stop(0)
  SaveState()
  return
end

function soundpack_paths()
  Note("Printing state file directory pathway:")
  print (GetInfo (85))
  return
end

-- Syntax: sound music
function soundpack_music ()
  if tonumber(GetVariable("musicEnabled")) == 1 then
     SetVariable("musicEnabled", 0)
     Note("Disabling music.")
     stopsound(GetVariable("music"))
  else
     if tonumber(GetVariable("soundsEnabled")) == 0 then
       Note("You must first enable sounds with the command 'sound on'.")
       return
     end     
     SetVariable("musicEnabled", 1)
     Note("Enabling music.")
     Note(volume_names[3] .. " current volume is "..tonumber(GetVariable("volume3"))..".")
     stopsound(GetVariable("music"))
     StartMusic()
  end
  SaveState()
  return
end

-- Syntax: sound combat music
function soundpack_combat_music ()
  if tonumber(GetVariable("combatMusicEnabled")) == 1 then
     SetVariable("combatMusicEnabled", 0)
     Note("Disabling combat music.")
     stopsound(GetVariable("combatmusic"))
     SetVariable("combatmusic", 0)
  else
     if tonumber(GetVariable("soundsEnabled")) == 0 then
       Note("You must first enable sounds with the command 'sound on'.")
       return
     end     
     SetVariable("combatMusicEnabled", 1)
     Note("Enabling combat music.")
     Note(volume_names[6] .. " current volume is "..tonumber(GetVariable("volume6"))..".")
     stopsound(GetVariable("combatmusic"))
     SetVariable("combatmusic", 0)
  end
  SaveState()
  return
end

-- Syntax: sound weather
function soundpack_weather ()
  if tonumber(GetVariable("weatherAmbienceEnabled")) == 1 then
     SetVariable("weatherAmbienceEnabled", 0)
     Note("Disabling weather ambience.")
     stopsound(GetVariable("weatherAmbiencePPI"))
     SetVariable("weatherAmbiencePPI", 0)
  else
     if tonumber(GetVariable("soundsEnabled")) == 0 then
       Note("You must first enable sounds with the command 'sound on'.")
       return
     end     
     SetVariable("weatherAmbienceEnabled", 1)
     Note("Enabling weather ambience.")
     Note(volume_names[7] .. " current volume is "..tonumber(GetVariable("volume7"))..".")
     stopsound(GetVariable("weatherAmbiencePPI"))
     SetVariable("weatherAmbiencePPI", 0)
     StartWeather()
  end
  SaveState()
  return
end

function soundpack_homemusic (name, line, wildcards)
  args = wildcards[1]

  words = {}
  -- Split the args string into individual words
  for word in args:gmatch("[%w-]+") do table.insert(words, word) end

  arg1 = words[1]

  -- Syntax: sound homemusic (<keyword>)
  if arg1 == nil then
    var = GetVariable("homeMusicKeyword")
    if var ~= nil then
      Note("Home music is set to " .. var .. ".")
    else
      Note("You do not have a preference set for which music should play in player homes.")
    end
    return
  end

  keyword = string.lower(arg1)

  x = 0 -- This is 0 for turn it off, or 1 for turn it on

  found = false
  toggleVariable = ""
  isAreaMusic = 0
  -- Try to find the keyword in the above table
  for i,v in pairs(soundpackTable) do
    if string.lower(keyword) == v[1] then
      found = true
      toggleVariable = v[2]
      isAreaMusic = v[7]
    end
  end

  -- Check if the keyword chosen is an area music keyword in the table
  if isAreaMusic == 0 then
    Note(keyword .. " is not an area music keyword.")
    return
  end
  -- Save the keyword for the song we want to play when we are in a player home
  Note("Setting the home music " .. keyword .. ".")
  SetVariable("homeMusicKeyword", toggleVariable)
  SaveState()
  return
end

function historyadd(category, text)
   local previous = GetOption("enable_command_stack")
   SetOption("enable_command_stack", 0)

   -- Exclude experience, skill improvements, and exits from the ALL buffer
   if not (category == "experience") and not (category == "skills") and not (category == "exits") then
      Execute("history_add all="..text)
   end

   Execute("history_add "..category.."="..text)
   SetOption("enable_command_stack", previous)
end

function msdpdebug(name, line, wildcards)
   newval = tonumber(wildcards[1])
   if not newval or newval > 2 or newval < 0 then
      ColourNote("darkorange", "", "Usage: msdpdebug {0|1|2}")
      ColourNote("darkorange", "", "   0 - off")
      ColourNote("darkorange", "", "   1 - simple")
      ColourNote("darkorange", "", "   2 - verbose")
      return
   end
   MSDPDebug = newval
   local msg = "off"
   if MSDPDebug == 1 then
      msg = "simple"
   elseif MSDPDebug == 2 then
      msg = "verbose"
   end
   ColourNote ("darkorange", "", "MSDPDebug: " .. msg)
end

-- Returns a random an ambiant sound from the soundpackTable based on room sector
-- There are multiple sound files for some sectors, so that's why it picks at random
function GetRandomAmbiance()
   songs = {}

   --Note("Sector is: " .. roomSectorName)

   foundSector = false
   for i,v in pairs(soundpackTable) do
      -- If it's an ambiant sound, the player has it enabled, and the sector matches the sector they are in, then add it
      if soundpackTable[i][8] == tostring(roomSectorName) then
         foundSector = true
         if soundpackTable[i][6] == 1 and tonumber(GetVariable(soundpackTable[i][2])) == 1 then
            table.insert(songs, soundpackTable[i])
         end
      end
   end

   if #songs > 0 then
      randNum = math.random(1, #songs) -- Grab a random entry
      return songs[randNum][4],songs[randNum][2] -- return ogg file and toggleVariable
   else
      if not foundSector then
        --Note("Sector is not in the soundpackTable")
        return nil
      else
        -- No sound found for the sector they are in, play the default ambiant song
        -- Note("No ambience file found")
        return "ambiance1.ogg", "toggleAmbiance1"
      end
   end
end

function StartAmbiance()
  if playerIsPlaying == 0 then
    return
  end
  if tonumber(GetVariable("soundsEnabled")) == 0 then
    return
  end
  if tostring(roomSectorName) == "default" then
     return
  end
  -- Don't start up ambiance while running
  if tonumber(GetVariable("running")) == 1 then
     --Note("Running: " .. GetVariable("running"))
     return
  end
  if tonumber(GetVariable("ambianceEnabled")) == 0 then
     return
  end
  num = tonumber(GetVariable("ambiance"))
  if (num == 0 or num == nil) or (num ~= 0 and num ~= nil and ppi.isPlaying(num) == 0) then
      -- Ambiant sound is not playing
      ambFile, ambToggleVariable = GetRandomAmbiance()
      if ambFile ~= nil then
         --Note("Playing ambiance file: " .. ambFile)
         ambFile = "\\ambience\\"..tostring(roomSectorName).."\\"..ambFile
         --Note("Path " .. ambFile)
         --Note("Sector: " .. tostring(roomSectorName))
         --Note("Keyword: " .. GetSoundKeyword(ambToggleVariable))
         playamb(GetSoundKeyword(ambToggleVariable), ambFile)
      else
        -- This means that the sector name, such as 'bridge', wasn't in the soundpackTable
        -- Add the sector and give it a file to play
        ambFile = "\\ambience\\default\\ambiance0.ogg"
        playamb(GetSoundKeyword(ambToggleVariable), ambFile)
     end
  end
end

---------------------------------------------------------------------------------------------------
-- Mushclient callback function when telnet SB data received.
---------------------------------------------------------------------------------------------------
function OnPluginTelnetSubnegotiation (msg_type, data)

   if msg_type ~= MSDP then
      return
   end -- if not MSDP
  
   if MSDPDebug > 0 then
      dumpmsdp(data)
   end

   request = parse_MSDP_request(data)
   if nil == request then
      Note("Failed to parse MSDP request.")
      return
   end

   --ArrayCreate "msdpTable"

   if nil ~= request.ROOM_NAME then
   --Note("Room name is: " .. request.ROOM_NAME)
      -- When room name changes, grab it and set the key value pair which is used in OnPluginLineReceived()
      ArraySet("msdpTable", "room_name", request.ROOM_NAME)
   end

  if nil ~= request.BOSS_HP_PERCENT then
    if tonumber(GetVariable("toggleBossBeep")) == 1 then
      hp = tonumber(request.BOSS_HP_PERCENT)
      if hp == 100 then
        playsound(GetSoundKeyword("toggleBossBeep"), "combat/mobhealth/1.ogg") 
      elseif hp == 90 then
        playsound(GetSoundKeyword("toggleBossBeep"), "combat/mobhealth/2.ogg") 
      elseif hp == 80 then
        playsound(GetSoundKeyword("toggleBossBeep"), "combat/mobhealth/3.ogg")
      elseif hp == 70 then
        playsound(GetSoundKeyword("toggleBossBeep"), "combat/mobhealth/4.ogg") 
      elseif hp == 60 then
        playsound(GetSoundKeyword("toggleBossBeep"), "combat/mobhealth/5.ogg") 
      elseif hp == 50 then
        playsound(GetSoundKeyword("toggleBossBeep"), "combat/mobhealth/6.ogg") 
      elseif hp == 40 then
        playsound(GetSoundKeyword("toggleBossBeep"), "combat/mobhealth/7.ogg") 
      elseif hp == 30 then
        playsound(GetSoundKeyword("toggleBossBeep"), "combat/mobhealth/8.ogg")
      elseif hp == 20 then
        playsound(GetSoundKeyword("toggleBossBeep"), "combat/mobhealth/9.ogg") 
      elseif hp == 10 then
        playsound(GetSoundKeyword("toggleBossBeep"), "combat/mobhealth/10.ogg")
      end
    end
  end

  if nil ~= request.MOB_HP_PERCENT then
    if tonumber(GetVariable("toggleMobHealthBeep")) == 1 then
      hp = tonumber(request.MOB_HP_PERCENT)
      if hp == 100 then
        playsound(GetSoundKeyword("toggleMobHealthBeep"), "combat/mobhealth/1.ogg") 
      elseif hp == 90 then
        playsound(GetSoundKeyword("toggleMobHealthBeep"), "combat/mobhealth/2.ogg") 
      elseif hp == 80 then
        playsound(GetSoundKeyword("toggleMobHealthBeep"), "combat/mobhealth/3.ogg")
      elseif hp == 70 then
        playsound(GetSoundKeyword("toggleMobHealthBeep"), "combat/mobhealth/4.ogg") 
      elseif hp == 60 then
        playsound(GetSoundKeyword("toggleMobHealthBeep"), "combat/mobhealth/5.ogg") 
      elseif hp == 50 then
        playsound(GetSoundKeyword("toggleMobHealthBeep"), "combat/mobhealth/6.ogg") 
      elseif hp == 40 then
        playsound(GetSoundKeyword("toggleMobHealthBeep"), "combat/mobhealth/7.ogg") 
      elseif hp == 30 then
        playsound(GetSoundKeyword("toggleMobHealthBeep"), "combat/mobhealth/8.ogg")
      elseif hp == 20 then
        playsound(GetSoundKeyword("toggleMobHealthBeep"), "combat/mobhealth/9.ogg") 
      elseif hp == 10 then
        playsound(GetSoundKeyword("toggleMobHealthBeep"), "combat/mobhealth/10.ogg")
      end
    end
  end

  if nil ~= request.RUNTO then
     if tonumber(request.RUNTO) == 1 then
        if tonumber(GetVariable("running")) == 0 and tonumber(GetVariable("toggleRunto")) == 1 then
          playstep(GetSoundKeyword("toggleRunto"), "runto.ogg")
        end
        SetVariable("running", 1)
     elseif tonumber(request.RUNTO) == 0 then
       --No Longer running, Stop the footsteps
       stopsound(GetVariable("stepsound"))
       SetVariable("stepsound", 0)
       SetVariable("running", 0)
       StartAmbiance() -- Start up ambiance after runto ends
       StartMusic()
       StartWeather()
     end
  end

  if nil ~= request.PORTAL then
    if tonumber(request.PORTAL) > 0 and tonumber(GetVariable("toggleEnterPortal")) == 1 then
       playsound(GetSoundKeyword("toggleEnterPortal"), "movement/enter_portal.ogg")
    end
  elseif nil ~= request.WEATHER_AMBIENCE then
    SetVariable("weatherType", tonumber(request.WEATHER_AMBIENCE))
    StartWeather()
    --Note("Weather num: " .. tonumber(request.WEATHER_AMBIENCE))
  elseif nil ~= request.WEATHER then
    if tonumber(request.WEATHER) > 0 and tonumber(GetVariable("toggleWeather")) == 1 then
       playsound(GetSoundKeyword("toggleWeather"), "weather/" .. tonumber(request.WEATHER) .. ".ogg")
    end
  elseif nil ~= request.UNIQUE_MOB then
    if tonumber(request.UNIQUE_MOB) > 0 and tonumber(GetVariable("toggleUniqueMob")) == 1 then
       playsound(GetSoundKeyword("toggleUniqueMob"), "mobs/unique_mob.ogg")
    end
  elseif nil ~= request.DAMAGE_ITEM then
    if tonumber(request.DAMAGE_ITEM) > 0 and tonumber(GetVariable("toggleDamageItem")) == 1 then
       playsound(GetSoundKeyword("toggleDamageItem"), "items/damage_item.ogg")
    end
  elseif nil ~= request.POOFIN then
    if tonumber(request.POOFIN) > 0 and tonumber(GetVariable("togglePoofin")) == 1 then
       playsound(GetSoundKeyword("togglePoofin"), "players/poofin.ogg")
    end
  elseif nil ~= request.POOFOUT then
    if tonumber(request.POOFOUT) > 0 and tonumber(GetVariable("togglePoofout")) == 1 then
       playsound(GetSoundKeyword("togglePoofout"), "players/poofout.ogg")
    end
  elseif nil ~= request.POOFSELF then
    if tonumber(request.POOFSELF) > 0 and tonumber(GetVariable("togglePoofself")) == 1 then
       playsound(GetSoundKeyword("togglePoofself"), "players/poofself.ogg")
    end
  elseif nil ~= request.GOLD_PILE then
    if tonumber(request.GOLD_PILE) > 0 and tonumber(GetVariable("toggleGoldPile")) == 1 then
       playsound(GetSoundKeyword("toggleGoldPile"), "items/gold_pile.ogg")
    end
  elseif nil ~= request.INSTRUMENT then
    if tonumber(request.INSTRUMENT) > 0 and tonumber(GetVariable("toggleInstrument")) > 0 then
       playsound(GetSoundKeyword("toggleInstrument"), "instruments/" .. tonumber(request.INSTRUMENT) .. ".ogg")
    end
  elseif nil ~= request.CHICKEN_EGG then
    if tonumber(request.CHICKEN_EGG) > 0 and tonumber(GetVariable("toggleChickenEgg")) > 0 then
       playsound(GetSoundKeyword("toggleChickenEgg"), "crafting/animals/chicken1.ogg")
    end
  elseif nil ~= request.CHICKEN_EAT then
    if tonumber(request.CHICKEN_EAT) > 0 and tonumber(GetVariable("toggleChickenEat")) > 0 then
       playsound(GetSoundKeyword("toggleChickenEat"), "crafting/animals/chicken2.ogg")
    end
  elseif nil ~= request.COW_MILK then
    if tonumber(request.COW_MILK) > 0 and tonumber(GetVariable("toggleCowMilk")) > 0 then
       playsound(GetSoundKeyword("toggleCowMilk"), "crafting/animals/milk" .. math.random(1, 2) .. ".ogg")
    end
  elseif nil ~= request.SHEEP_EAT then
    if tonumber(request.SHEEP_EAT) > 0 and tonumber(GetVariable("toggleSheepEat")) > 0 then
       playsound(GetSoundKeyword("toggleSheepEat"), "crafting/animals/sheep1.ogg")
    end
  elseif nil ~= request.COW_EAT then
    if tonumber(request.COW_EAT) > 0 and tonumber(GetVariable("toggleCowEat")) > 0 then
       playsound(GetSoundKeyword("toggleCowEat"), "crafting/animals/cow1.ogg")
    end
  elseif nil ~= request.COW_POOP then
    if tonumber(request.COW_POOP) > 0 and tonumber(GetVariable("toggleCowPoop")) > 0 then
       playsound(GetSoundKeyword("toggleCowPoop"), "crafting/animals/cowpoop1.ogg")
    end
  elseif nil ~= request.QUEST_FAIL then
    if tonumber(request.QUEST_FAIL) > 0 and tonumber(GetVariable("toggleQuestFail")) == 1 then
       playsound(GetSoundKeyword("toggleQuestFail"), "quests/questfail.ogg")
    end
  elseif nil ~= request.POTION_STEAL then
    if tonumber(request.POTION_STEAL) > 0 and tonumber(GetVariable("togglePotionSteal")) == 1 then
       playsound(GetSoundKeyword("togglePotionSteal"), "items/potion_steal.ogg")
    end
  elseif nil ~= request.POTION_SMASH then
    if tonumber(request.POTION_SMASH) > 0 and tonumber(GetVariable("togglePotionSmash")) == 1 then
       playsound(GetSoundKeyword("togglePotionSmash"), "items/potion_smash.ogg")
    end
  elseif nil ~= request.POTION_QUAFF then
    if tonumber(request.POTION_QUAFF) > 0 and tonumber(GetVariable("togglePotionQuaff")) == 1 then
       playsound(GetSoundKeyword("togglePotionQuaff"), "items/potion_quaff.ogg")
    end
  elseif nil ~= request.WAYPOINT_APPEAR then
    if tonumber(request.WAYPOINT_APPEAR) > 0 and tonumber(GetVariable("toggleWaypointAppear")) == 1 then
       playsound(GetSoundKeyword("toggleWaypointAppear"), "movement/waypoint_appear.ogg")
    end
  elseif nil ~= request.WAYPOINT_VANISH then
    if tonumber(request.WAYPOINT_VANISH) > 0 and tonumber(GetVariable("toggleWaypointVanish")) == 1 then
       playsound(GetSoundKeyword("toggleWaypointVanish"), "movement/waypoint_vanish.ogg")
    end
  elseif nil ~= request.WAYPOINT_PRAY then
    if tonumber(request.WAYPOINT_PRAY) > 0 and tonumber(GetVariable("toggleWaypointPray")) == 1 then
       playsound(GetSoundKeyword("toggleWaypointPray"), "movement/waypoint.ogg")
    end
  elseif nil ~= request.DAILY_START then
    if tonumber(request.DAILY_START) > 0 and tonumber(GetVariable("toggleDailyStart")) > 0 then
       playsound(GetSoundKeyword("toggleDailyStart"), "notifications/daily_start.ogg")
    end
  elseif nil ~= request.DAILY_COMPLETE then
    if tonumber(request.DAILY_COMPLETE) > 0 and tonumber(GetVariable("toggleDailyComplete")) > 0 then
       playsound(GetSoundKeyword("toggleDailyComplete"), "notifications/daily_complete.ogg")
    end
  elseif nil ~= request.DAILY_TASK then
    if tonumber(request.DAILY_TASK) > 0 and tonumber(GetVariable("toggleDailyTask")) > 0 then
       playsound(GetSoundKeyword("toggleDailyTask"), "notifications/daily_task.ogg")
    end
  elseif nil ~= request.FULLY_INFUSED then
    if tonumber(request.FULLY_INFUSED) > 0 and tonumber(GetVariable("toggleFullyInfused")) == 1 then
       playsound(GetSoundKeyword("toggleFullyInfused"), "notifications/fully_infused_gem.ogg")
    end
  elseif nil ~= request.GUESS_START then
    if tonumber(request.GUESS_START) > 0 and tonumber(GetVariable("toggleGuessPhrase")) == 1 then
      playsound(GetSoundKeyword("toggleGuessPhrase"), "games/guess_start.ogg")
    end
  elseif nil ~= request.GUESS_END then
    if tonumber(request.GUESS_END) > 0 and tonumber(GetVariable("toggleGuessPhrase")) == 1 then
      playsound(GetSoundKeyword("toggleGuessPhrase"), "games/guess_end.ogg")
    end
  elseif nil ~= request.GUESS_LETTER then
    if tonumber(request.GUESS_LETTER) > 0 and tonumber(GetVariable("toggleGuessPhrase")) == 1 then
      playsound(GetSoundKeyword("toggleGuessPhrase"), "games/guess_get.ogg")
    end
  elseif nil ~= request.SKILL_IMPROVE then
    if tonumber(request.SKILL_IMPROVE) > 0 and tonumber(GetVariable("toggleSkillImprove")) == 1 then
       playsound(GetSoundKeyword("toggleSkillImprove"), "skills/skill_improve.ogg")
    end
  elseif nil ~= request.DRENCH_SELF then
    if tonumber(request.DRENCH_SELF) > 0 and tonumber(GetVariable("toggleWaterBalloon1")) == 1 then
       playsound(GetSoundKeyword("toggleWaterBalloon1"), "events/water_balloon1.ogg")
    end
  elseif nil ~= request.DRENCH_PLAYER then
    if tonumber(request.DRENCH_PLAYER) > 0 and tonumber(GetVariable("toggleWaterBalloon2")) == 1 then
       playsound(GetSoundKeyword("toggleWaterBalloon2"), "events/water_balloon2.ogg")
    end
  elseif nil ~= request.DRENCH_MISS then
    if tonumber(request.DRENCH_MISS) > 0 and tonumber(GetVariable("toggleWaterBalloon3")) == 1 then
       playsound(GetSoundKeyword("toggleWaterBalloon3"), "events/water_balloon3.ogg")
    end
  elseif nil ~= request.FILL_WATER_BALLOON then
    if tonumber(request.FILL_WATER_BALLOON) > 0 and tonumber(GetVariable("toggleFillWaterBalloon")) == 1 then
       playsound(GetSoundKeyword("toggleFillWaterBalloon"), "items/fill_water_balloon.ogg")
    end
  elseif nil ~= request.AREA_REPOP then
    if tonumber(request.AREA_REPOP) > 0 and tonumber(GetVariable("toggleAreaRepop")) == 1 then
       playsound(GetSoundKeyword("toggleAreaRepop"), "area/area_repop.ogg")
    end
  elseif nil ~= request.HINT then
    if tonumber(request.HINT) > 0 and tonumber(GetVariable("toggleHint")) == 1 then
       playsound(GetSoundKeyword("toggleHint"), "misc/hint.ogg")
    end
  elseif nil ~= request.ADD_CLASS_OTHER then
    if tonumber(request.ADD_CLASS_OTHER) > 0 and tonumber(GetVariable("toggleAddclassOther")) == 1 then
       playsound(GetSoundKeyword("toggleAddclassOther"), "misc/add_class_other.ogg")
    end
  elseif nil ~= request.REPLACE_CLASS_OTHER then
    if tonumber(request.REPLACE_CLASS_OTHER) > 0 and tonumber(GetVariable("toggleReplaceclassOther")) == 1 then
       playsound(GetSoundKeyword("toggleReplaceclassOther"), "misc/replace_class_other.ogg")
    end
  elseif nil ~= request.REPLACE_CLASS_SELF then
    if tonumber(request.REPLACE_CLASS_SELF) > 0 and tonumber(GetVariable("toggleReplaceclassSelf")) == 1 then
       playsound(GetSoundKeyword("toggleReplaceclassself"), "misc/replace_class_self.ogg")
    end
  elseif nil ~= request.EVOLVE_OTHER then
    if tonumber(request.EVOLVE_OTHER) > 0 and tonumber(GetVariable("toggleEvolveOther")) == 1 then
       playsound(GetSoundKeyword("toggleEvolveOther"), "misc/evolve_other.ogg")
    end
  elseif nil ~= request.EVOLVE_SELF then
    if tonumber(request.EVOLVE_SELF) > 0 and tonumber(GetVariable("toggleEvolveSelf")) == 1 then
       playsound(GetSoundKeyword("toggleEvolveSelf"), "misc/evolve_self.ogg")
    end
  elseif nil ~= request.RESTART_OTHER then
    if tonumber(request.RESTART_OTHER) > 0 and tonumber(GetVariable("toggleRestartOther")) == 1 then
       playsound(GetSoundKeyword("toggleRestartOther"), "misc/restart_other.ogg")
    end
  elseif nil ~= request.RESTART_SELF then
    if tonumber(request.RESTART_SELF) > 0 and tonumber(GetVariable("toggleRestartSelf")) == 1 then
       playsound(GetSoundKeyword("toggleRestartSelf"), "misc/restart_self.ogg")
    end
  elseif nil ~= request.BEGIN_SMELTING then
    if tonumber(request.BEGIN_SMELTING) > 0 and tonumber(GetVariable("toggleBeginSmelting")) == 1 then
       playsound(GetSoundKeyword("toggleBeginSmelting"), "crafting/smelting/begin_smelting.ogg")
    end
  elseif nil ~= request.SMELT_COOLDOWN then
    if tonumber(request.SMELT_COOLDOWN) > 0 and tonumber(GetVariable("toggleSmeltingCooldown")) == 1 then
       playsound(GetSoundKeyword("toggleSmeltingCooldown"), "crafting/smelting/cooled_down.ogg")
    end
  elseif nil ~= request.KEYRING then
    if tonumber(request.KEYRING) > 0 and tonumber(GetVariable("toggleKeyring")) == 1 then
       playsound(GetSoundKeyword("toggleKeyring"), "items/keyring.ogg")
    end
  elseif nil ~= request.NEW_PLAYER then
    if tonumber(request.NEW_PLAYER) > 0 and tonumber(GetVariable("toggleNewPlayer")) == 1 then
       playsound(GetSoundKeyword("toggleNewPlayer"), "players/new_player.ogg")
    end
  elseif nil ~= request.RETURNED_PLAYER then
    if tonumber(request.RETURNED_PLAYER) > 0 and tonumber(GetVariable("toggleReturnedPlayer")) == 1 then
       playsound(GetSoundKeyword("toggleReturnedPlayer"), "players/returned_player.ogg")
    end
  elseif nil ~= request.LOGIN_REMINDER then
    if tonumber(request.LOGIN_REMINDER) > 0 and tonumber(GetVariable("toggleLoginReminder")) == 1 then
       playsound(GetSoundKeyword("toggleLoginReminder"), "notifications/login_reminder.ogg")
    end
  elseif nil ~= request.FLOGIN then
    if tonumber(request.FLOGIN) > 0 and tonumber(GetVariable("toggleFriendLogin")) == 1 then
       playsound(GetSoundKeyword("toggleFriendLogin"), "channels/friend_login.ogg")
    end
  elseif nil ~= request.WIZNET then
    if tonumber(request.WIZNET) > 0 and tonumber(GetVariable("toggleWiznet")) == 1 then
       playsound(GetSoundKeyword("toggleWiznet"), "notifications/wiznet.ogg")
    end
  elseif nil ~= request.LEAVE_PET_BEHIND then
    if tonumber(request.LEAVE_PET_BEHIND) > 0 and tonumber(GetVariable("toggleLeftPets")) == 1 then
       playsound(GetSoundKeyword("toggleLeftPets"), "movement/left_pets_behind.ogg")
    end
  elseif nil ~= request.COLOSSEUM_WIN_OTHER then
    if tonumber(request.COLOSSEUM_WIN_OTHER) > 0 and tonumber(GetVariable("toggleColosseumWinOther")) == 1 then
       playsound(GetSoundKeyword("toggleColosseumWinOther"), "misc/colosseum_win_other.ogg")
    end
  elseif nil ~= request.COLOSSEUM_LOSE then
    if tonumber(request.COLOSSEUM_LOSE) > 0 and tonumber(GetVariable("toggleColosseumLose")) == 1 then
       playsound(GetSoundKeyword("toggleColosseumLose"), "misc/colosseum_lose.ogg")
    end
  elseif nil ~= request.HOME_RECALL_FEMALE then
    if tonumber(request.HOME_RECALL_FEMALE) > 0 and tonumber(GetVariable("toggleHrecallFemale")) == 1 then
       playsound(GetSoundKeyword("toggleHrecallFemale"), "movement/home_recall_female.ogg")
    end
  elseif nil ~= request.HOME_RECALL_MALE then
    if tonumber(request.HOME_RECALL_MALE) > 0 and tonumber(GetVariable("toggleHrecallMale")) == 1 then
       playsound(GetSoundKeyword("toggleHrecallMale"), "movement/home_recall_male.ogg")
    end
  elseif nil ~= request.GROUP_QUEST_COOLDOWN then
    if tonumber(request.GROUP_QUEST_COOLDOWN) > 0 and tonumber(GetVariable("toggleGroupQuestCooldown")) == 1 then
       playsound(GetSoundKeyword("toggleGroupQuestCooldown"), "quests/group_quest_cooldown.ogg")
    end
  elseif nil ~= request.GROUP_QUEST_START then
    if tonumber(request.GROUP_QUEST_START) > 0 and tonumber(GetVariable("toggleGroupQuestStart")) == 1 then
       playsound(GetSoundKeyword("toggleGroupQuestStart"), "quests/group_quest_start.ogg")
    end
  elseif nil ~= request.GROUP_QUEST_REWARD_START then
    if tonumber(request.GROUP_QUEST_REWARD_START) > 0 and tonumber(GetVariable("toggleGroupQuestRewardStart")) == 1 then
       playsound(GetSoundKeyword("toggleGroupQuestRewardStart"), "quests/group_quest_reward_start.ogg")
    end
  elseif nil ~= request.GROUP_QUEST_REWARD_CLOSE then
    if tonumber(request.GROUP_QUEST_REWARD_CLOSE) > 0 and tonumber(GetVariable("toggleGroupQuestRewardClose")) == 1 then
       playsound(GetSoundKeyword("toggleGroupQuestRewardClose"), "quests/group_quest_reward_close.ogg")
    end
  elseif nil ~= request.GIVE_ITEM then
    if tonumber(request.GIVE_ITEM) > 0 and tonumber(GetVariable("toggleGiveItem")) == 1 then
       playsound(GetSoundKeyword("toggleGiveItem"), "items/give_item.ogg")
    end
  elseif nil ~= request.OBTAIN_ITEM then
    if tonumber(request.OBTAIN_ITEM) > 0 and tonumber(GetVariable("toggleObtainItem")) == 1 then
       playsound(GetSoundKeyword("toggleObtainItem"), "items/obtain_item.ogg")
    end
  elseif nil ~= request.FLEE_NPC then
    if tonumber(request.FLEE_NPC) > 0 and tonumber(GetVariable("toggleFleeNpc")) == 1 then
       playsound(GetSoundKeyword("toggleFleeNpc"), "combat/flee_npc.ogg")
    end
  elseif nil ~= request.FLEE_PC_OTHER then
    if tonumber(request.FLEE_PC_OTHER) > 0 and tonumber(GetVariable("toggleFleePcOther")) == 1 then
       playsound(GetSoundKeyword("toggleFleePcOther"), "combat/flee_pc_other.ogg")
    end
  elseif nil ~= request.FLEE_PC_SELF then
    if tonumber(request.FLEE_PC_SELF) > 0 and tonumber(GetVariable("toggleFleePcSelf")) == 1 then
       playsound(GetSoundKeyword("toggleFleePcSelf"), "combat/flee_pc_self.ogg")
    end
  elseif nil ~= request.FLOGOUT then
    if tonumber(request.FLOGOUT) > 0 and tonumber(GetVariable("toggleFriendLogin")) == 1 then
       playsound(GetSoundKeyword("toggleFriendLogout"), "channels/friend_logout.ogg")
    end
  elseif nil ~= request.POUR_OUT then
    if tonumber(request.POUR_OUT) > 0 and tonumber(GetVariable("togglePourOut")) == 1 then
       playsound(GetSoundKeyword("togglePourOut"), "items/pour_out.ogg")
    end
  elseif nil ~= request.POUR_IN then
    if tonumber(request.POUR_IN) > 0 and tonumber(GetVariable("togglePourIn")) == 1 then
       playsound(GetSoundKeyword("togglePourIn"), "items/pour_into.ogg")
    end
  elseif nil ~= request.EMPTY_DRINK then
    if tonumber(request.EMPTY_DRINK) > 0 and tonumber(GetVariable("toggleEmptyDrink")) == 1 then
       playsound(GetSoundKeyword("toggleEmptyDrink"), "items/empty_drink.ogg")
    end
  elseif nil ~= request.EMPTY_FOUNTAIN then
    if tonumber(request.EMPTY_FOUNTAIN) > 0 and tonumber(GetVariable("toggleEmptyFountain")) == 1 then
       playsound(GetSoundKeyword("toggleEmptyFountain"), "items/empty_fountain.ogg")
    end
  elseif nil ~= request.BIRTHDAY then
    if tonumber(request.BIRTHDAY) > 0 and tonumber(GetVariable("toggleBirthday")) == 1 then
       playsound(GetSoundKeyword("toggleBirthday"), "notifications/birthday.ogg")
    end
  elseif nil ~= request.ARMOR_ROULETTE then
    if tonumber(request.ARMOR_ROULETTE) > 0 and tonumber(GetVariable("toggleArmorRoulette")) == 1 then
       playsound(GetSoundKeyword("toggleArmorRoulette"), "spells/armor_roulette_fail.ogg")
    end
  elseif nil ~= request.SIT then
    if tonumber(request.SIT) > 0 and tonumber(GetVariable("toggleSit")) == 1 then
       playsound(GetSoundKeyword("toggleSit"), "misc/rest.ogg")
    end
  elseif nil ~= request.ENTER_INSTANCE then
    if tonumber(request.ENTER_INSTANCE) > 0 and tonumber(GetVariable("toggleEnterInstance")) == 1 then
       playsound(GetSoundKeyword("toggleEnterInstance"), "movement/enter_instance.ogg")
    end
  elseif nil ~= request.EXIT_INSTANCE then
    if tonumber(request.EXIT_INSTANCE) > 0 and tonumber(GetVariable("toggleExitInstance")) == 1 then
       playsound(GetSoundKeyword("toggleExitInstance"), "movement/exit_instance.ogg")
    end
  elseif nil ~= request.CREDIT_BUY then
    if tonumber(request.CREDIT_BUY) > 0 and tonumber(GetVariable("toggleCreditBuy")) == 1 then
       playsound(GetSoundKeyword("toggleCreditBuy"), "credits/credit_buy.ogg")
    end
  elseif nil ~= request.CREDIT_GIFT then
    if tonumber(request.CREDIT_GIFT) > 0 and tonumber(GetVariable("toggleCreditGift")) == 1 then
       playsound(GetSoundKeyword("toggleCreditGift"), "credits/credit_gift.ogg")
    end
  elseif nil ~= request.CREDIT_RECEIVE then
    if tonumber(request.CREDIT_RECEIVE) > 0 and tonumber(GetVariable("toggleCreditReceive")) == 1 then
       playsound(GetSoundKeyword("toggleCreditReceive"), "credits/credit_receive.ogg")
    end
  elseif nil ~= request.WOOSH then
    if tonumber(request.WOOSH) > 0 and tonumber(GetVariable("toggleWoosh")) == 1 then
       playsound(GetSoundKeyword("toggleWoosh"), "steps/air/3.ogg")
    end
  end

  if nil ~= request.RESTOCK then
    if tonumber(request.RESTOCK) > 0 and tonumber(GetVariable("toggleRestock")) == 1 then
       playsound(GetSoundKeyword("toggleRestock"), "notifications/restock.ogg")
    end
  end

  if nil ~= request.TANNIN_COMPLETE then
    if tonumber(request.TANNIN_COMPLETE) > 0 and tonumber(GetVariable("toggleTanninComplete")) == 1 then
       playsound(GetSoundKeyword("toggleTanninComplete"), "crafting/leatherwork/tannin_complete.ogg")
    end
  end

  if nil ~= request.FILE then
    if tonumber(request.FILE) > 0 and tonumber(GetVariable("toggleFile")) == 1 then
       playsound(GetSoundKeyword("toggleFile"), "crafting/creation/file.ogg")
    end
  end

  if nil ~= request.LIGHT_OUT then
    if tonumber(request.LIGHT_OUT) > 0 and tonumber(GetVariable("toggleLightOut")) == 1 then
       playsound(GetSoundKeyword("toggleLightOut"), "objeffects/light_out.ogg")
    end
  end

  if nil ~= request.LOW_HEALTH then
    if tonumber(request.LOW_HEALTH) > 0 and tonumber(GetVariable("toggleLowHealth")) == 1 then
       playsound(GetSoundKeyword("toggleLowHealth"), "hp/low_health.ogg")
    end
  end

  if nil ~= request.SHARPEN_WEAPON then
    if tonumber(request.SHARPEN_WEAPON) > 0 and tonumber(GetVariable("toggleSharpenWeapon")) == 1 then
       playsound(GetSoundKeyword("toggleSharpenWeapon"), "skills/sharpen_weapon.ogg")
    end
  end

  if nil ~= request.DULL_WEAPON then
    if tonumber(request.DULL_WEAPON) > 0 and tonumber(GetVariable("toggleDullWeapon")) == 1 then
       playsound(GetSoundKeyword("toggleDullWeapon"), "objeffects/dull_weapon.ogg")
    end
  end

  if nil ~= request.RECIPE_UNLOCK then
    if tonumber(request.RECIPE_UNLOCK) > 0 and tonumber(GetVariable("toggleRecipeUnlock")) == 1 then
       playsound(GetSoundKeyword("toggleRecipeUnlock"), "alchemy/recipe_unlock.ogg")
    end
  end

  if nil ~= request.COPY_RECIPE then
    if tonumber(request.COPY_RECIPE) > 0 and tonumber(GetVariable("toggleCopyRecipe")) == 1 then
       playsound(GetSoundKeyword("toggleCopyRecipe"), "alchemy/copy_recipe.ogg")
    end
  end

  if nil ~= request.CRACK_STONE then
    if tonumber(request.CRACK_STONE) > 0 and tonumber(GetVariable("toggleCrackStone")) == 1 then
       playsound(GetSoundKeyword("toggleCrackStone"), "crafting/creation/crack_stone.ogg")
    end
  end

  if nil ~= request.GRIND_STONE then
    if tonumber(request.GRIND_STONE) > 0 and tonumber(GetVariable("toggleGrindStone")) == 1 then
       playsound(GetSoundKeyword("toggleGrindStone"), "crafting/creation/grind_stone.ogg")
    end
  end

  if nil ~= request.INFUSION then
    if tonumber(request.INFUSION) == 1 and tonumber(GetVariable("toggleInfusion")) == 1 then
      playsound(GetSoundKeyword("toggleInfusion"), "items/infusion.ogg")
    end
  end

  if nil ~= request.CONFUSION then
    if tonumber(request.CONFUSION) == 1 and tonumber(GetVariable("toggleConfusion")) == 1 then
      playsound(GetSoundKeyword("toggleConfusion"), "combat/confusion.ogg")
    end
  end

  if nil ~= request.GLYPH then
    if tonumber(request.GLYPH) == 1 and tonumber(GetVariable("toggleGlyph")) == 1 then
      playsound(GetSoundKeyword("toggleGlyph"), "misc/glyph.ogg")
    end
  elseif nil ~= request.CONTEMPLATE_GLYPH then
    if tonumber(request.CONTEMPLATE_GLYPH) == 1 and tonumber(GetVariable("toggleContemplateGlyph")) == 1 then
      playsound(GetSoundKeyword("toggleContemplateGlyph"), "spells/contemplate_glyph.ogg")
    end
  elseif nil ~= request.ARRANGE_ROCKS then
    if tonumber(request.ARRANGE_ROCKS) == 1 and tonumber(GetVariable("toggleArrangeRocks")) == 1 then
      playsound(GetSoundKeyword("toggleArrangeRocks"), "crafting/creation/arrange_rocks.ogg")
    end
  end

  if nil ~= request.GOTMAIL then
    if tonumber(request.GOTMAIL) == 1 and tonumber(GetVariable("toggleGotMail")) == 1 then
      playsound(GetSoundKeyword("toggleGotMail"), "notifications/gotmail.ogg")
    end
  end

  if nil ~= request.COMBO2 then
    if tonumber(request.COMBO2) == 1 and tonumber(GetVariable("toggleCombo2")) == 1 then
      playsound(GetSoundKeyword("toggleCombo2"), "combat/combos/combo2.ogg")
    end
  end

  if nil ~= request.COMBO3 then
    if tonumber(request.COMBO3) == 1 and tonumber(GetVariable("toggleCombo3")) == 1 then
      playsound(GetSoundKeyword("toggleCombo3"), "combat/combos/combo3.ogg")
    end
  end

  if nil ~= request.COMBO4 then
    if tonumber(request.COMBO4) == 1 and tonumber(GetVariable("toggleCombo4")) == 1 then
      playsound(GetSoundKeyword("toggleCombo4"), "combat/combos/combo4.ogg")
    end
  end

  if nil ~= request.GMOTE then
    if tonumber(request.GMOTE) == 1 and tonumber(GetVariable("toggleGmote")) == 1 then
      playsound(GetSoundKeyword("toggleGmote"), "socials/gmote.ogg")
    end
  end

  if nil ~= request.TARGET_ENGAGED_MALE then
    if tonumber(request.TARGET_ENGAGED_MALE) == 1 and tonumber(GetVariable("toggleTargetEngagedMale")) == 1 then
      playsound(GetSoundKeyword("toggleTargetEngagedMale"), "skills/target_engaged_male.ogg")
    end
  end

  if nil ~= request.TARGET_ENGAGED_FEMALE then
    if tonumber(request.TARGET_ENGAGED_FEMALE) == 1 and tonumber(GetVariable("toggleTargetEngagedFemale")) == 1 then
      playsound(GetSoundKeyword("toggleTargetEngagedFemale"), "skills/target_engaged_female.ogg")
    end
  end

  if nil ~= request.STAR_MISS then
    if tonumber(request.STAR_MISS) == 1 and tonumber(GetVariable("toggleStarMiss")) == 1 then
      playsound(GetSoundKeyword("toggleStarMiss"), "skills/star_miss.ogg")
    end
  end

  if nil ~= request.TREE_WEDGE then
    if tonumber(request.TREE_WEDGE) == 1 and tonumber(GetVariable("toggleTreeWedge")) == 1 then
      playsound(GetSoundKeyword("toggleTreeWedge"), "crafting/woodwork/tree_wedge.ogg")
    end
  end

  if nil ~= request.QUEST_LAST_TARGET then
    if tonumber(request.QUEST_LAST_TARGET) == 1 and tonumber(GetVariable("toggleQLastTarget")) == 1 then
      playsound(GetSoundKeyword("toggleQLastTarget"), "quests/last_target.ogg")
    end
  end

  if nil ~= request.BLINDED_SELF then
    if tonumber(request.BLINDED_SELF) == 1 and tonumber(GetVariable("toggleBlindedSelf")) == 1 then
      playsound(GetSoundKeyword("toggleBlindedSelf"), "debuffs/blinded_self.ogg")
    end
  end

  if nil ~= request.BLINDED_TARGET then
    if tonumber(request.BLINDED_TARGET) == 1 and tonumber(GetVariable("toggleBlindedTarget")) == 1 then
      playsound(GetSoundKeyword("toggleBlindedTarget"), "debuffs/blinded_target.ogg")
    end
  end

  if nil ~= request.QUEST_COMPLETE then
    if tonumber(request.QUEST_COMPLETE) == 1 and tonumber(GetVariable("toggleQuestComplete")) == 1 then
      playsound(GetSoundKeyword("toggleQuestComplete"), "quests/quest_complete.ogg")
    end
  end

  if nil ~= request.QUEST_COIN then
    if tonumber(request.QUEST_COIN) == 1 and tonumber(GetVariable("toggleQuestCoin")) == 1 then
      playsound(GetSoundKeyword("toggleQuestCoin"), "items/quest_coin.ogg")
    end
  end

  if nil ~= request.WEREWOLF then
    if tonumber(request.WEREWOLF) == 1 and tonumber(GetVariable("toggleWerewolf")) == 1 then
      playsound(GetSoundKeyword("toggleWerewolf"), "mobs/werewolf.ogg")
    end
  end

  if nil ~= request.EVIL_PUMPKIN then
    if tonumber(request.EVIL_PUMPKIN) == 1 and tonumber(GetVariable("toggleEvilPumpkin")) == 1 then
      playsound(GetSoundKeyword("toggleEvilPumpkin"), "mobs/evil_pumpkin.ogg")
    end
  end

  if nil ~= request.TURKEY then
    if tonumber(request.TURKEY) == 1 and tonumber(GetVariable("toggleTurkey")) == 1 then
      playsound(GetSoundKeyword("toggleTurkey"), "mobs/turkey.ogg")
    end
  end

  if nil ~= request.LEVEL_OTHER then
    if tonumber(request.LEVEL_OTHER) == 1 and tonumber(GetVariable("toggleLevelOther")) == 1 then
      playsound(GetSoundKeyword("toggleLevelOther"), "exp/level_other.ogg")
    end
  end

  if nil ~= request.TIERUP_SELF then
    if tonumber(request.TIERUP_SELF) == 1 and tonumber(GetVariable("toggleTierup")) == 1 then
      playsound(GetSoundKeyword("toggleTierup"), "exp/tierup.ogg")
    end
  end

  if nil ~= request.TIERUP_OTHER then
    if tonumber(request.TIERUP_OTHER) == 1 and tonumber(GetVariable("toggleTierupOther")) == 1 then
      playsound(GetSoundKeyword("toggleTierupOther"), "exp/tierup_other.ogg")
    end
  end

  if nil ~= request.CLEAN_CLOTH then
    if tonumber(request.CLEAN_CLOTH) == 1 and tonumber(GetVariable("toggleCleanCloth")) == 1 then
      playsound(GetSoundKeyword("toggleCleanCloth"), "crafting/cleaning/cleancloth.ogg")
    end
  end

  if nil ~= request.CLEAN_FLOOR then
    if tonumber(request.CLEAN_FLOOR) == 1 and tonumber(GetVariable("toggleCleanFloor")) == 1 then
      playsound(GetSoundKeyword("toggleCleanFloor"), "crafting/cleaning/cleanfloor.ogg")
    end
  end

  if nil ~= request.EGG_HOUSE then
    if tonumber(request.EGG_HOUSE) == 1 and tonumber(GetVariable("toggleEggHouse")) == 1 then
      playsound(GetSoundKeyword("toggleEggHouse"), "events/egghouse.ogg")
    end
  end

  if nil ~= request.EGG_SELF then
    if tonumber(request.EGG_SELF) == 1 and tonumber(GetVariable("toggleEggSelf")) == 1 then
      playsound(GetSoundKeyword("toggleEggSelf"), "events/eggself.ogg")
    end
  end

  if nil ~= request.EGG_PLAYER then
    if tonumber(request.EGG_PLAYER) == 1 and tonumber(GetVariable("toggleEggPlayer")) == 1 then
      playsound(GetSoundKeyword("toggleEggPlayer"), "events/eggplayer.ogg")
    end
  end

  if nil ~= request.SHEAR_SHEEP then
    if tonumber(request.SHEAR_SHEEP) == 1 and tonumber(GetVariable("toggleShearSheep")) == 1 then
      playsound(GetSoundKeyword("toggleShearSheep"), "crafting/animals/shear" .. math.random(1, 3) .. ".ogg")
    end
  end

  if nil ~= request.SOUL_EMBER then
    if tonumber(request.SOUL_EMBER) == 1 and tonumber(GetVariable("toggleSoulEmber")) == 1 then
      playsound(GetSoundKeyword("toggleSoulEmber"), "items/soul_ember.ogg")
    end
  end

  if nil ~= request.SUICIDE then
    if tonumber(request.SUICIDE) == 1 and tonumber(GetVariable("toggleSuicide")) == 1 then
      playsound(GetSoundKeyword("toggleSuicide"), "hp/suicide.ogg")
    end
  end

  if nil ~= request.BUNNY_EXPLOSION then
    if tonumber(request.BUNNY_EXPLOSION) == 1 and tonumber(GetVariable("toggleBunnyExplosion")) == 1 then
      playsound(GetSoundKeyword("toggleBunnyExplosion"), "events/bunny_explosion.ogg")
    end
  end

  if nil ~= request.WATER_GARDEN then
    if tonumber(request.WATER_GARDEN) == 1 and tonumber(GetVariable("toggleGardenWater")) == 1 then
      playsound(GetSoundKeyword("toggleGardenWater"), "crafting/gardening/water.ogg")
    end
  end

  if nil ~= request.CLONE_SHATTER then
    if tonumber(request.CLONE_SHATTER) == 1 and tonumber(GetVariable("toggleCloneShatter")) == 1 then
      playsound(GetSoundKeyword("toggleCloneShatter"), "combat/clone_shatter.ogg")
    end
  end

  if nil ~= request.DRINK then
    if tonumber(request.DRINK) == 1 and tonumber(GetVariable("toggleDrink")) == 1 then
      playsound(GetSoundKeyword("toggleDrink"), "items/drink"..math.random(1, 2)..".ogg")
    end
  end

  if nil ~= request.PRISM then
    if tonumber(request.PRISM) == 1 and tonumber(GetVariable("togglePrism")) == 1 then
      playsound(GetSoundKeyword("togglePrism"), "items/prism.ogg")
    end
  end

  if nil ~= request.SPINNING_WHEEL then
    if tonumber(request.SPINNING_WHEEL) == 1 and tonumber(GetVariable("toggleSpin")) == 1 then
      playsound(GetSoundKeyword("toggleSpin"), "crafting/wool/spinning_wheel.ogg")
    end
  end

  if nil ~= request.PRAYER_REMINDER then
    if tonumber(request.PRAYER_REMINDER) == 1 and tonumber(GetVariable("togglePrayerReminder")) == 1 then
      playsound(GetSoundKeyword("togglePrayerReminder"), "notifications/prayer_reminder.ogg")
    end
  end

  if nil ~= request.LIKE then
    if tonumber(request.LIKE) == 1 and tonumber(GetVariable("toggleLike")) == 1 then
      playsound(GetSoundKeyword("toggleLike"), "notifications/like.ogg")
    end
  end

  if nil ~= request.SPILL_COINS then
    if tonumber(request.SPILL_COINS) == 1 and tonumber(GetVariable("toggleSpillCoins")) == 1 then
      playsound(GetSoundKeyword("toggleSpillCoins"), "mobs/spill_coins.ogg")
    end
  end

  if nil ~= request.PRAYER then
    if tonumber(request.PRAYER) == 1 and tonumber(GetVariable("togglePrayer")) == 1 then
      playsound(GetSoundKeyword("togglePrayer"), "misc/harp.ogg")
    end
  end

  if nil ~= request.SACRIFICE then
    if tonumber(request.SACRIFICE) == 1 and tonumber(GetVariable("toggleSac")) == 1 then
      playsound(GetSoundKeyword("toggleSac"), "items/sac.ogg")
    end
  end

  if nil ~= request.TATTOO then
    if tonumber(request.TATTOO) == 1 and tonumber(GetVariable("toggleTattoo")) == 1 then
      playsound(GetSoundKeyword("toggleTattoo"), "crafting/creation/tattoo.ogg")
    end
  end

  if nil ~= request.ACHIEVEMENT then
    if tonumber(request.ACHIEVEMENT) == 1 and tonumber(GetVariable("toggleAchievement")) == 1 then
      playsound(GetSoundKeyword("toggleAchievement"), "notifications/achievement.ogg")
    end
  end

  if nil ~= request.ACHIEVEMENT_CHANNEL then
    if tonumber(request.ACHIEVEMENT_CHANNEL) == 1 and tonumber(GetVariable("toggleAchievementChannel")) == 1 then
      playsound(GetSoundKeyword("toggleAchievementChannel"), "notifications/achievement_channel.ogg")
    end
  end

  if nil ~= request.FAITH_LEVEL then
    if tonumber(request.FAITH_LEVEL) == 1 and tonumber(GetVariable("toggleFaithRankUp")) == 1 then
      playsound(GetSoundKeyword("toggleFaithRankUp"), "exp/faith_level.ogg")
    end
  end

  if nil ~= request.JOIN_FAITH then
    if tonumber(request.JOIN_FAITH) == 1 and tonumber(GetVariable("toggleJoinFaith")) == 1 then
      playsound(GetSoundKeyword("toggleJoinFaith"), "notifications/join_faith.ogg")
    end
  end

  if nil ~= request.LEATHER_CREAKING then
    if tonumber(request.LEATHER_CREAKING) == 1 and tonumber(GetVariable("toggleLeatherCreak")) == 1 then
      playsound(GetSoundKeyword("toggleLeatherCreak"), "crafting/creation/leather_creaking.ogg")
    end
  end

  if nil ~= request.APPLY_RESIN then
    if tonumber(request.APPLY_RESIN) == 1 and tonumber(GetVariable("toggleApplyResin")) == 1 then
      playsound(GetSoundKeyword("toggleApplyResin"), "crafting/creation/apply_resin.ogg")
    end
  end

  if nil ~= request.POUR_SAND then
    if tonumber(request.POUR_SAND) == 1 and tonumber(GetVariable("togglePourSand")) == 1 then
      playsound(GetSoundKeyword("togglePourSand"), "crafting/creation/pour_sand.ogg")
    end
  end

  if nil ~= request.STAIN_GLASS then
    if tonumber(request.STAIN_GLASS) == 1 and tonumber(GetVariable("toggleStainGlass")) == 1 then
      playsound(GetSoundKeyword("toggleStainGlass"), "crafting/creation/stain_glass.ogg")
    end
  end

  if nil ~= request.CUT_PAPER then
    if tonumber(request.CUT_PAPER) == 1 and tonumber(GetVariable("toggleCutPaper")) == 1 then
      playsound(GetSoundKeyword("toggleCutPaper"), "crafting/creation/cut_paper.ogg")
    end
  end

  if nil ~= request.FOLDING_PAPER then
    if tonumber(request.FOLDING_PAPER) == 1 and tonumber(GetVariable("toggleFoldingPaper")) == 1 then
      playsound(GetSoundKeyword("toggleFoldingPaper"), "crafting/creation/folding_paper.ogg")
    end
  end

  if nil ~= request.ATTACH then
    if tonumber(request.ATTACH) == 1 and tonumber(GetVariable("toggleAttach")) == 1 then
      playsound(GetSoundKeyword("toggleAttach"), "crafting/creation/attach.ogg")
    end
  end

  if nil ~= request.POUR_MOULD then
    if tonumber(request.POUR_MOULD) == 1 and tonumber(GetVariable("toggleMould")) == 1 then
      playsound(GetSoundKeyword("toggleMould"), "crafting/creation/pour_mould.ogg")
    end
  end

  if nil ~= request.TUCK then
    if tonumber(request.TUCK) == 1 and tonumber(GetVariable("toggleCraftTuckWool")) == 1 then
      playsound(GetSoundKeyword("toggleCraftTuckWool"), "crafting/creation/tuck_wool.ogg")
    end
  end

  if nil ~= request.PAINT then
    if tonumber(request.PAINT) == 1 and tonumber(GetVariable("togglePaint")) == 1 then
      playsound(GetSoundKeyword("togglePaint"), "crafting/creation/paint.ogg")
    end
  end

  if nil ~= request.KNIT then
    if tonumber(request.KNIT) == 1 and tonumber(GetVariable("toggleKnit")) == 1 then
      playsound(GetSoundKeyword("toggleKnit"), "crafting/creation/knit.ogg")
    end
  end

  if nil ~= request.SEW then
    if tonumber(request.SEW) == 1 and tonumber(GetVariable("toggleSew")) == 1 then
      playsound(GetSoundKeyword("toggleSew"), "crafting/creation/sew.ogg")
    end
  end

  if nil ~= request.ITEM_SURPRISE then
    if tonumber(request.ITEM_SURPRISE) == 1 and tonumber(GetVariable("toggleItemSurprise")) == 1 then
       playsound(GetSoundKeyword("toggleItemSurprise"), "items/item_surprise.ogg")
     end
  end

  if nil ~= request.START_MISSION then
    if tonumber(request.START_MISSION) == 1 and tonumber(GetVariable("toggleStartMission")) == 1 then
       playsound(GetSoundKeyword("toggleStartMission"), "missions/start_mission.ogg")
     end
  end

  if nil ~= request.COMPLETE_MISSION then
    if tonumber(request.COMPLETE_MISSION) == 1 and tonumber(GetVariable("toggleCompleteMission")) == 1 then
       playsound(GetSoundKeyword("toggleCompleteMission"), "missions/complete_mission.ogg")
     end
  end  

  if nil ~= request.SOAK then
    if tonumber(request.SOAK) == 1 and tonumber(GetVariable("toggleCraftSoak")) == 1 then
       playsound(GetSoundKeyword("toggleCraftSoak"), "crafting/creation/soak.ogg")
     end
  end

  if nil ~= request.LIBERATE then
    if tonumber(request.LIBERATE) == 1 and tonumber(GetVariable("toggleLiberate")) == 1 then
       playsound(GetSoundKeyword("toggleLiberate"), "mobs/liberate.ogg")
     end
  end  

  if nil ~= request.CAPTIVE then
    if tonumber(request.CAPTIVE) == 1 and tonumber(GetVariable("toggleCaptive")) == 1 then
       playsound(GetSoundKeyword("toggleCaptive"), "mobs/captive.ogg")
     end
  end  

  if nil ~= request.LEPRECHAUN then
    if tonumber(request.LEPRECHAUN) == 1 and tonumber(GetVariable("toggleLeprechaun")) == 1 then
       playsound(GetSoundKeyword("toggleLeprechaun"), "mobs/leprechaun.ogg")
     end
  end  

  if nil ~= request.CRUNCHY_BITE then
    if tonumber(request.CRUNCHY_BITE) == 1 and tonumber(GetVariable("toggleCrunchyBite")) == 1 then
       playsound(GetSoundKeyword("toggleCrunchyBite"), "events/crunchy_bite.ogg")
     end
  end  

  if nil ~= request.HUNGRY_BUNNY then
    if tonumber(request.HUNGRY_BUNNY) == 1 and tonumber(GetVariable("toggleHungryBunny")) == 1 then
       playsound(GetSoundKeyword("toggleHungryBunny"), "mobs/hungry_bunny.ogg")
     end
  end  

  if nil ~= request.FEATHER then
    if tonumber(request.FEATHER) == 1 and tonumber(GetVariable("toggleFeather")) == 1 then
       playsound(GetSoundKeyword("toggleFeather"), "crafting/forage/feather.ogg")
     end
  end  

  if nil ~= request.DRAW_COMPASS then
    if tonumber(request.DRAW_COMPASS) == 1 and tonumber(GetVariable("toggleCraftDrawCompass")) == 1 then
       playsound(GetSoundKeyword("toggleCraftDrawCompass"), "crafting/creation/draw_compass.ogg")
     end
  end

  if nil ~= request.LABEL_MAP then
    if tonumber(request.LABEL_MAP) == 1 and tonumber(GetVariable("toggleCraftLabelMap")) == 1 then
       playsound(GetSoundKeyword("toggleCraftLabelMap"), "crafting/creation/label_map.ogg")
     end
  end

  if nil ~= request.MARK_MAP then
    if tonumber(request.MARK_MAP) == 1 and tonumber(GetVariable("toggleCraftMarkMap")) == 1 then
       playsound(GetSoundKeyword("toggleCraftMarkMap"), "crafting/creation/label_map.ogg")
     end
  end

  if nil ~= request.DRY_PAPER then
    if tonumber(request.DRY_PAPER) == 1 and tonumber(GetVariable("toggleCraftDryPaper")) == 1 then
       playsound(GetSoundKeyword("toggleCraftDryPaper"), "crafting/creation/dry_paper.ogg")
     end
  end

  if nil ~= request.REVEAL then
    revealNum = tonumber(request.REVEAL)
    if revealNum > 0 and tonumber(GetVariable("toggleReveal")) == 1 then
      playsound(GetSoundKeyword("toggleReveal"), "discover/reveal" .. revealNum .. ".ogg")
    end
  end

  if nil ~= request.UNPICK then
    if tonumber(request.UNPICK) == 1 and tonumber(GetVariable("toggleCraftUnpick")) == 1 then
       playsound(GetSoundKeyword("toggleCraftUnpick"), "crafting/creation/unpick.ogg")
     end
  end

  if nil ~= request.MASH then
    if tonumber(request.MASH) == 1 and tonumber(GetVariable("toggleCraftMash")) == 1 then
       playsound(GetSoundKeyword("toggleCraftMash"), "crafting/creation/mash.ogg")
     end
  end

  if nil ~= request.BOTCHECK then
    if tonumber(request.BOTCHECK) == 1 and tonumber(GetVariable("toggleBotcheck")) == 1 then
       playsound(GetSoundKeyword("toggleBotcheck"), "notifications/botcheck.ogg")
     end
  end

  if nil ~= request.WEAR_ITEM then
    if tonumber(request.WEAR_ITEM) == 1 and tonumber(GetVariable("toggleWearItem")) == 1 then
       playsound(GetSoundKeyword("toggleWearItem"), "wear/wear_item.ogg")
     end
  end

  if nil ~= request.REMOVE_ITEM then
    if tonumber(request.REMOVE_ITEM) == 1 and tonumber(GetVariable("toggleRemoveItem")) == 1 then
       playsound(GetSoundKeyword("toggleRemoveItem"), "wear/remove_item.ogg")
     end
  end

  if nil ~= request.WIELD_WEAPON then
    if tonumber(request.WIELD_WEAPON) == 1 and tonumber(GetVariable("toggleWield")) == 1 then
       playsound(GetSoundKeyword("toggleWield"), "wear/wield.ogg")
     end
  end

  if nil ~= request.OPEN_DOOR then
    if tonumber(request.OPEN_DOOR) == 1 and tonumber(GetVariable("toggleOpenDoor")) == 1 then
       playsound(GetSoundKeyword("toggleOpenDoor"), "exits/open_door.ogg")
     end
  end

  if nil ~= request.CLOSE_DOOR then
    if tonumber(request.CLOSE_DOOR) == 1 and tonumber(GetVariable("toggleCloseDoor")) == 1 then
       playsound(GetSoundKeyword("toggleCloseDoor"), "exits/close_door.ogg")
     end
  end

  if nil ~= request.MELEE_TNW then
    if tonumber(request.MELEE_TNW) == 1 and tonumber(GetVariable("toggleMeleeTNW")) == 1 then
       tnwnum = math.random(1, 10)
       tnwfileName = "combat/meleetarget/noweapon/" .. tnwnum .. ".ogg"
       --Note("Rand melee target (no weapon): " .. tnwnum .. ". File: " .. tnwfileName)
       playcombat(GetSoundKeyword("toggleMeleeTNW"), tnwfileName, -40)
     end
  end

  if nil ~= request.MELEE_TW then
    weaponNum = tonumber(request.MELEE_TW)
    if weaponNum > 0 and tonumber(GetVariable("toggleMeleeTW")) == 1 then
       --Note("Rand melee target (weapon): " .. weaponNum)
       doWeaponMelee(0, -40, weaponNum, "toggleMeleeTW")
     end
  end

  if nil ~= request.MELEE_SW then
    swnum = tonumber(request.MELEE_SW)
    if swnum > 0 and tonumber(GetVariable("toggleMeleeSW")) == 1 then
      --Note("Self melee with weapon")
      doWeaponMelee(.2, 40, swnum, "toggleMeleeSW")
    end
  end

  -- Self melee, no weapon
  if nil ~= request.MELEE_SNW then
    if tonumber(request.MELEE_SNW) > 0 and tonumber(GetVariable("toggleMeleeSNW")) == 1 then
      -- If num is one, pick a random non-weapon melee sound
      snwnum = math.random(1, 10)
      snwfileName = "combat/meleeself/noweapon/" .. snwnum .. ".ogg"
      --Note("Rand melee self (no weapon): " .. snwnum .. ". File: " .. snwfileName)
      DoAfterSpecial(.2, [[playcombat(GetSoundKeyword("toggleMeleeSNW"), snwfileName, 40)]], 12)
    end
  elseif nil ~= request.BUFF_EXPIRES then
    nsknum = tonumber(request.BUFF_EXPIRES)
    -- if the number is negative, it is a custom ID (-69.ogg is glyph effect)
    if not (nsknum == 0) and tonumber(GetVariable("toggleBuffExpires")) == 1 then
      playsound(GetSoundKeyword("toggleBuffExpires"), "combat/buffexpires/" .. nsknum .. ".ogg")
    end
  elseif nil ~= request.NON_ATTACK_SKILL then
    nsknum = tonumber(request.NON_ATTACK_SKILL)
    -- If number is negative, it's a spell like curse being cast on an object.
    if not (nsknum == 0) and tonumber(GetVariable("toggleNonAttackSkill")) == 1 then
      playsound(GetSoundKeyword("toggleNonAttackSkill"), "combat/nonattacks/" .. nsknum .. ".ogg")
    end
  end

  if nil ~= request.SKILL_SELF then
    sknum = tonumber(request.SKILL_SELF)
    if sknum > 0 and tonumber(GetVariable("toggleSkillSelf")) == 1 then
      if sknum == 1 then
        -- Play a random generic spell sound
        --Note("Random spell sound") 
        rspnum = math.random(1, 8)
        rspfileName = "combat/genericspell/" .. rspnum .. ".ogg" 
        DoAfterSpecial(.3, [[playcombat(GetSoundKeyword("toggleSkillSelf"), rspfileName)]], 12)
      elseif sknum == 2 then
        -- Play a random generic skill sound
        --Note("Random skill")
        rsknum = math.random(1, 5)
        rskfileName = "combat/genericskill/" .. rsknum .. ".ogg" 
        DoAfterSpecial(.3, [[playcombat(GetSoundKeyword("toggleSkillSelf"), rskfileName)]], 12)
      else
        --Note("Skill/spell: " .. sknum)
        skspfileName = "combat/attacks/" .. sknum .. ".ogg" 
        DoAfterSpecial(.3, [[playcombat(GetSoundKeyword("toggleSkillSelf"), skspfileName)]], 12)
      end
    end
  end

  if nil ~= request.SIGIL_ADD then
    if tonumber(request.SIGIL_ADD) == 1 and tonumber(GetVariable("toggleSigilAdd")) == 1 then
       playsound(GetSoundKeyword("toggleSigilAdd"), "items/sigil_add.ogg")
     end
  end

  if nil ~= request.SIGIL_FOUND then
    if tonumber(request.SIGIL_FOUND) == 1 and tonumber(GetVariable("toggleSigilFound")) == 1 then
       playsound(GetSoundKeyword("toggleSigilFound"), "items/sigil_found.ogg")
     end
  end

  if nil ~= request.BUFF_COMMAND then
    if tonumber(request.BUFF_COMMAND) == 1 and tonumber(GetVariable("toggleBuffCommand")) == 1 then
       playsound(GetSoundKeyword("toggleBuffCommand"), "spells/buff_command.ogg")
     end
  end

  if nil ~= request.BUFF_OFF then
    if tonumber(request.BUFF_OFF) == 1 and tonumber(GetVariable("toggleBuffoff")) == 1 then
       playsound(GetSoundKeyword("toggleBuffoff"), "notifications/spell_off.ogg")
     end
  end

    if nil ~= request.FAUX_LEVEL then
    if tonumber(request.FAUX_LEVEL) == 1 and tonumber(GetVariable("toggleFauxUp")) == 1 then
       playsound(GetSoundKeyword("toggleFauxUp"), "exp/faux_level.ogg")
     end
  end

  if nil ~= request.PILGRIMAGE_OFFERING then
    if tonumber(request.PILGRIMAGE_OFFERING) == 1 and tonumber(GetVariable("togglePilgrimageOffering")) == 1 then
       playsound(GetSoundKeyword("togglePilgrimageOffering"), "quests/pilgrimage_offering.ogg")
     end
  end

  if nil ~= request.PILGRIMAGE_REQUEST then
    if tonumber(request.PILGRIMAGE_REQUEST) == 1 and tonumber(GetVariable("togglePilgrimageRequest")) == 1 then
       playsound(GetSoundKeyword("togglePilgrimageRequest"), "quests/pilgrimage_request.ogg")
     end
  end

  if nil ~= request.PILGRIMAGE_COMPLETE then
    if tonumber(request.PILGRIMAGE_COMPLETE) == 1 and tonumber(GetVariable("togglePilgrimageComplete")) == 1 then
       playsound(GetSoundKeyword("togglePilgrimageComplete"), "quests/pilgrimage_complete.ogg")
     end
  end

  if nil ~= request.PILGRIMAGE_TIMER then
    if tonumber(request.PILGRIMAGE_TIMER) == 1 and tonumber(GetVariable("togglePilgrimageTimer")) == 1 then
       playsound(GetSoundKeyword("togglePilgrimageTimer"), "quests/pilgrimage_timer.ogg")
     end
  end

  if nil ~= request.WEDDING then
    if tonumber(request.WEDDING) == 1 and tonumber(GetVariable("toggleWedding")) == 1 then
       playsound(GetSoundKeyword("toggleWedding"), "notifications/wedding.ogg")
     end
  end

  if nil ~= request.RESTORE then
    if tonumber(request.RESTORE) == 1 and tonumber(GetVariable("toggleRestore")) == 1 then
       playsound(GetSoundKeyword("toggleRestore"), "notifications/restore.ogg")
     end
  end

  if nil ~= request.GROUP_JOIN then
    if tonumber(request.GROUP_JOIN) == 1 and tonumber(GetVariable("toggleGroupJoin")) == 1 then
       playsound(GetSoundKeyword("toggleGroupJoin"), "grouping/joined.ogg")
     end
  end

  if nil ~= request.GROUP_INVITE then
    if tonumber(request.GROUP_INVITE) == 1 and tonumber(GetVariable("toggleGroupInvite")) == 1 then
       playsound(GetSoundKeyword("toggleGroupInvite"), "grouping/invite.ogg")
     end
  end

  if nil ~= request.PET_RELEASE then
    if tonumber(request.PET_RELEASE) == 1 and tonumber(GetVariable("togglePetRelease")) == 1 then
       playsound(GetSoundKeyword("togglePetRelease"), "mobs/pet_release.ogg")
     end
  end

  if nil ~= request.LOOK then
    if tonumber(request.LOOK) == 1 and tonumber(GetVariable("toggleLook")) == 1 and tonumber(GetVariable("running")) == 0 then
      result = playsound(GetSoundKeyword("toggleLook"), "steps/"..tostring(roomSectorName).."/"..math.random(1,3)..".ogg")
      if result == 0 then
        -- Play a default step sound since the sector doesn't have one
        result = playsound(GetSoundKeyword("toggleLook"), "steps/inside/"..math.random(1,3)..".ogg")
      end
    end
  end

  if nil ~= request.HAMMER_METAL then
     if tonumber(request.HAMMER_METAL) == 1 and tonumber(GetVariable("toggleCraftHammerMetal")) == 1 then
       playsound(GetSoundKeyword("toggleCraftHammerMetal"), "crafting/woodwork/hammer_metal.ogg")
     end
  end

  if nil ~= request.HAMMER_WOOD then
     if tonumber(request.HAMMER_WOOD) == 1 and tonumber(GetVariable("toggleCraftHammerWood")) == 1 then
       playsound(GetSoundKeyword("toggleCraftHammer"), "crafting/woodwork/hammer_wood.ogg")
     end
  end

  if nil ~= request.FORAGE_SAND then
     if tonumber(request.FORAGE_SAND) == 1 and tonumber(GetVariable("toggleForageSand")) == 1 then
       playsound(GetSoundKeyword("toggleForageSand"), "crafting/forage/sand.ogg")
     end
  end

  if nil ~= request.SEED then
     if tonumber(request.SEED) == 1 and tonumber(GetVariable("toggleSeed")) == 1 then
       playsound(GetSoundKeyword("toggleSeed"), "crafting/forage/seed.ogg")
     end
  end

  if nil ~= request.BUNNY then
     if tonumber(request.BUNNY) == 1 and tonumber(GetVariable("toggleBunny")) == 1 then
       playsound(GetSoundKeyword("toggleBunny"), "misc/bunny.ogg")
     end
  end

  if nil ~= request.SEND_ITEM then
     if tonumber(request.SEND_ITEM) == 1 and tonumber(GetVariable("toggleSendItem")) == 1 then
       playsound(GetSoundKeyword("toggleSendItem"), "items/send_item.ogg")
     end
  end

  if nil ~= request.EVENT_START then
     if tonumber(request.EVENT_START) == 1 and tonumber(GetVariable("toggleEvent")) == 1 then
       playsound(GetSoundKeyword("toggleEvent"), "notifications/event.ogg")
     end
  end

  if nil ~= request.RECEIVE_ITEM then
     if tonumber(request.RECEIVE_ITEM) == 1 and tonumber(GetVariable("toggleReceiveItem")) == 1 then
       playsound(GetSoundKeyword("toggleReceiveItem"), "items/receive_item.ogg")
     end
  end

  if nil ~= request.FULL_MANA then
     if tonumber(request.FULL_MANA) == 1 and tonumber(GetVariable("toggleFullMana")) == 1 then
       playsound(GetSoundKeyword("toggleFullMana"), "mana/full_mana.ogg")
     end
  end

  if nil ~= request.FULL_HP then
     if tonumber(request.FULL_HP) == 1 and tonumber(GetVariable("toggleFullHp")) == 1 then
        playsound(GetSoundKeyword("toggleFullHp"), "hp/fully_healed.ogg")
     end
  end

  if nil ~= request.KNOCK_HOME then
     if tonumber(request.KNOCK_HOME) == 1 and tonumber(GetVariable("toggleKnockHome")) == 1 then
       playsound(GetSoundKeyword("toggleKnockHome"), "rooms/knock"..math.random(1,4)..".ogg")
     end
  end

  if nil ~= request.ENTER_AREA then
     if tonumber(request.ENTER_AREA) ~= 0 and tonumber(GetVariable("toggleEnterArea")) == 1 then
       -- This number is the area's vnum
       playsound(GetSoundKeyword("toggleEnterArea"), "movement/enter_area.ogg")
     end
  elseif nil ~= request.AREA_VNUM then
     if tonumber(request.AREA_VNUM) ~= 0 then
       --Note("Got an area vnum! " .. tonumber(request.AREA_VNUM))
       -- This number is the area's vnum
       --Note("Attempting to start music for area vnum " .. tonumber(request.AREA_VNUM) .. ".")
       SetVariable("areaVnum", tonumber(request.AREA_VNUM))
       StartMusic()
       StartWeather()
     end
  elseif nil ~= request.FIGHT_TYPE then
    if tonumber(request.FIGHT_TYPE) ~= 0 then
      --Note("Got fight type: " .. tonumber(request.FIGHT_TYPE))
      -- This number is the fight type (pvp, quest mob, boss, etc.)
      SetVariable("fightType", tonumber(request.FIGHT_TYPE))
      StartMusic()
    else
      --Note("stopping combat music")
      SetVariable("fightType", tonumber(request.FIGHT_TYPE)) -- Sets to 0 (i.e. no longer fighting)
      StartMusic()
    end
  end

  if nil ~= request.TREASURE then
     if tonumber(request.TREASURE) == 1 and tonumber(GetVariable("toggleTreasure")) == 1 then
       playsound(GetSoundKeyword("toggleTreasure"), "misc/treasure.ogg")
     end
  end

  if nil ~= request.JUNKYARD then
     if tonumber(request.JUNKYARD) == 1 and tonumber(GetVariable("toggleJunkyard")) == 1 then
       playsound(GetSoundKeyword("toggleJunkyard"), "quests/fabled.ogg")
     end
  end

  if nil ~= request.JUNKYARD_TIMER then
     if tonumber(request.JUNKYARD_TIMER) == 1 and tonumber(GetVariable("toggleJunkyardTimer")) == 1 then
       playsound(GetSoundKeyword("toggleJunkyardTimer"), "quests/junkyard_timer.ogg")
     end
  end

  if nil ~= request.GIGGLEFART then
     if tonumber(request.GIGGLEFART) == 1 and tonumber(GetVariable("toggleGigglefart")) == 1 then
       playsocial(GetSoundKeyword("toggleGigglefart"), "socials/fart"..math.random(1, 5)..".ogg")
       playsocial(GetSoundKeyword("toggleGigglefart"), "socials/giggle"..math.random(1, 2)..".ogg")
     end
  end

  if nil ~= request.GIGGLE_MALE then
     if tonumber(request.GIGGLE_MALE) == 1 and tonumber(GetVariable("toggleGiggle")) == 1 then
       playsocial(GetSoundKeyword("toggleGiggle"), "socials/giggle_male.ogg")
     end
  end

  if nil ~= request.GIGGLE_FEMALE then
     if tonumber(request.GIGGLE_FEMALE) == 1 and tonumber(GetVariable("toggleGiggle")) == 1 then
       playsocial(GetSoundKeyword("toggleGiggle"), "socials/giggle_female.ogg")
     end
  end

  if nil ~= request.YEEHAW_MALE then
     if tonumber(request.YEEHAW_MALE) == 1 and tonumber(GetVariable("toggleYeehaw")) == 1 then
       playsocial(GetSoundKeyword("toggleYeehaw"), "socials/yeehaw_male"..math.random(1, 2)..".ogg")
     end
  end

  if nil ~= request.YEEHAW_FEMALE then
     if tonumber(request.YEEHAW_FEMALE) == 1 and tonumber(GetVariable("toggleYeehaw")) == 1 then
       playsocial(GetSoundKeyword("toggleYeehaw"), "socials/yeehaw_female.ogg")
     end
  end

  if nil ~= request.YAWN then
     if tonumber(request.YAWN) == 1 and tonumber(GetVariable("toggleYawn")) == 1 then
       playsocial(GetSoundKeyword("toggleYawn"), "socials/yawn"..math.random(1, 2)..".ogg")
     end
  end

  if nil ~= request.POKE then
     if tonumber(request.POKE) == 1 and tonumber(GetVariable("togglePoke")) == 1 then
       playsocial(GetSoundKeyword("togglePoke"), "socials/poke.ogg")
     end
  end

  if nil ~= request.ROFL_MALE then
     if tonumber(request.ROFL_MALE) == 1 and tonumber(GetVariable("toggleRofl")) == 1 then
       playsocial(GetSoundKeyword("toggleRofl"), "socials/rofl_male.ogg")
     end
  end

  if nil ~= request.ROFL_FEMALE then
     if tonumber(request.ROFL_FEMALE) == 1 and tonumber(GetVariable("toggleRofl")) == 1 then
       playsocial(GetSoundKeyword("toggleRofl"), "socials/rofl_female.ogg")
     end
  end

  if nil ~= request.PONDER_MALE then
     if tonumber(request.PONDER_MALE) == 1 and tonumber(GetVariable("togglePonder")) == 1 then
       playsocial(GetSoundKeyword("togglePonder"), "socials/ponder_male.ogg")
     end
  end

  if nil ~= request.PONDER_FEMALE then
     if tonumber(request.PONDER_FEMALE) == 1 and tonumber(GetVariable("togglePonder")) == 1 then
       playsocial(GetSoundKeyword("togglePonder"), "socials/ponder_female.ogg")
     end
  end

  if nil ~= request.COFFEE then
     if tonumber(request.COFFEE) == 1 and tonumber(GetVariable("toggleCoffee")) == 1 then
       playsocial(GetSoundKeyword("toggleCoffee"), "socials/coffee.ogg")
     end
  end

  if nil ~= request.CHIRP then
     if tonumber(request.CHIRP) == 1 and tonumber(GetVariable("toggleChirp")) == 1 then
       playsocial(GetSoundKeyword("toggleChirp"), "socials/chirp.ogg")
     end
  end

  if nil ~= request.COWBELL then
     if tonumber(request.COWBELL) == 1 and tonumber(GetVariable("toggleCowbell")) == 1 then
       playsocial(GetSoundKeyword("toggleCowbell"), "socials/cowbell.ogg")
     end
  end

  if nil ~= request.NUDGE then
     if tonumber(request.NUDGE) == 1 and tonumber(GetVariable("toggleNudge")) == 1 then
       playsocial(GetSoundKeyword("toggleNudge"), "socials/nudge.ogg")
     end
  end

  if nil ~= request.SQUEAK then
     if tonumber(request.SQUEAK) == 1 and tonumber(GetVariable("toggleSqueak")) == 1 then
       playsocial(GetSoundKeyword("toggleSqueak"), "socials/squeak" .. math.random(1, 2) .. ".ogg")
     end
  end

  if nil ~= request.PING then
     if tonumber(request.PING) == 1 and tonumber(GetVariable("togglePing")) == 1 then
       playsocial(GetSoundKeyword("togglePing"), "socials/ping.ogg")
     end
  end

  if nil ~= request.BOUNCE then
     if tonumber(request.BOUNCE) == 1 and tonumber(GetVariable("toggleBounce")) == 1 then
       playsocial(GetSoundKeyword("toggleBounce"), "socials/bounce.ogg")
     end
  end

  if nil ~= request.PEWPEW then
     if tonumber(request.PEWPEW) == 1 and tonumber(GetVariable("togglePewpew")) == 1 then
       playsocial(GetSoundKeyword("togglePewpew"), "socials/pewpew.ogg")
     end
  end

  if nil ~= request.LAUGH_MALE then
     if tonumber(request.LAUGH_MALE) == 1 and tonumber(GetVariable("toggleLaugh")) == 1 then
       playsocial(GetSoundKeyword("toggleLaugh"), "socials/laugh_male.ogg")
     end
  end

  if nil ~= request.LAUGH_FEMALE then
     if tonumber(request.LAUGH_FEMALE) == 1 and tonumber(GetVariable("toggleLaugh")) == 1 then
       playsocial(GetSoundKeyword("toggleLaugh"), "socials/laugh_female.ogg")
     end
  end

  if nil ~= request.CHUCKLE_FEMALE then
     if tonumber(request.CHUCKLE_FEMALE) == 1 and tonumber(GetVariable("toggleChuckle")) == 1 then
       playsocial(GetSoundKeyword("toggleChuckle"), "socials/chuckle_female"..math.random(1, 2)..".ogg")
     end
  elseif nil ~= request.CHUCKLE_MALE then
     if tonumber(request.CHUCKLE_MALE) == 1 and tonumber(GetVariable("toggleChuckle")) == 1 then
       playsocial(GetSoundKeyword("toggleChuckle"), "socials/chuckle_male"..math.random(1, 2)..".ogg")
     end
  elseif nil ~= request.STRIPTEASE then
     if tonumber(request.STRIPTEASE) == 1 and tonumber(GetVariable("toggleStriptease")) == 1 then
       playsocial(GetSoundKeyword("toggleStriptease"), "socials/striptease"..math.random(1, 2)..".ogg")
     end
  end

  if nil ~= request.BECKON then
     if tonumber(request.BECKON) == 1 and tonumber(GetVariable("toggleBeckon")) == 1 then
       playsocial(GetSoundKeyword("toggleBeckon"), "socials/beckon.ogg")
     end
  end

  if nil ~= request.SUMMONED then
     if tonumber(request.SUMMONED) == 1 and tonumber(GetVariable("toggleSummoned")) == 1 then
       playsound(GetSoundKeyword("toggleSummoned"), "spells/summoned.ogg")
     end
  end

  if nil ~= request.SUMMON_VANISH then
     if tonumber(request.SUMMON_VANISH) == 1 and tonumber(GetVariable("toggleSummonVanish")) == 1 then
       playsound(GetSoundKeyword("toggleSummonVanish"), "spells/summon_vanish.ogg")
     end
  end

  if nil ~= request.SUMMON_APPEAR then
     if tonumber(request.SUMMON_APPEAR) == 1 and tonumber(GetVariable("toggleSummonAppear")) == 1 then
       playsound(GetSoundKeyword("toggleSummonAppear"), "spells/summon_appear.ogg")
     end
  end

  if nil ~= request.CHORTLE_FEMALE then
     if tonumber(request.CHORTLE_FEMALE) == 1 and tonumber(GetVariable("toggleChortle")) == 1 then
       playsocial(GetSoundKeyword("toggleChortle"), "socials/chortle_female.ogg")
     end
  end

  if nil ~= request.CHORTLE_MALE then
     if tonumber(request.CHORTLE_MALE) == 1 and tonumber(GetVariable("toggleChortle")) == 1 then
       playsocial(GetSoundKeyword("toggleChortle"), "socials/chortle_male.ogg")
     end
  end


  if nil ~= request.POKEYSTICK_FEMALE then
     if tonumber(request.POKEYSTICK_FEMALE) == 1 and tonumber(GetVariable("togglePokeystick")) == 1 then
       playsocial(GetSoundKeyword("togglePokeystick"), "socials/pokeystick_female"..math.random(1, 6)..".ogg")
     end
  end

  if nil ~= request.POKEYSTICK_MALE then
     if tonumber(request.POKEYSTICK_MALE) == 1 and tonumber(GetVariable("togglePokeystick")) == 1 then
       playsocial(GetSoundKeyword("togglePokeystick"), "socials/pokeystick_male"..math.random(1, 7)..".ogg")
     end
  end

  if nil ~= request.SQUEAL_FEMALE then
     if tonumber(request.SQUEAL_FEMALE) == 1 and tonumber(GetVariable("toggleSqueal")) == 1 then
       playsocial(GetSoundKeyword("toggleSqueal"), "socials/squeal_female.ogg")
     end
  end

  if nil ~= request.SQUEAL_MALE then
     if tonumber(request.SQUEAL_MALE) == 1 and tonumber(GetVariable("toggleSqueal")) == 1 then
       playsocial(GetSoundKeyword("toggleSqueal"), "socials/squeal_male.ogg")
     end
  end

  if nil ~= request.SIGH then
     if tonumber(request.SIGH) == 1 and tonumber(GetVariable("toggleSigh")) == 1 then
       playsocial(GetSoundKeyword("toggleSigh"), "socials/sigh"..math.random(1, 3)..".ogg")
     end
  end

  if nil ~= request.BURP then
     if tonumber(request.BURP) == 1 and tonumber(GetVariable("toggleBurp")) == 1 then
       playsocial(GetSoundKeyword("toggleBurp"), "socials/burp"..math.random(1, 3)..".ogg")
     end
  end

  if nil ~= request.BEARHUG then
     if tonumber(request.BEARHUG) == 1 and tonumber(GetVariable("toggleBearhug")) == 1 then
       playsocial(GetSoundKeyword("toggleBearhug"), "socials/bearhug.ogg")
     end
  end

  if nil ~= request.STAB then
     if tonumber(request.STAB) == 1 and tonumber(GetVariable("toggleStab")) == 1 then
       playsocial(GetSoundKeyword("toggleStab"), "socials/stab.ogg")
     end
  end

  if nil ~= request.FART then
     if tonumber(request.FART) == 1 and tonumber(GetVariable("toggleFart")) == 1 then
       playsocial(GetSoundKeyword("toggleFart"), "socials/fart"..math.random(1, 5)..".ogg")
     end
  end

  if nil ~= request.BITE then
     if tonumber(request.BITE) == 1 and tonumber(GetVariable("toggleBite")) == 1 then
       playsocial(GetSoundKeyword("toggleBite"), "socials/bite.ogg")
     end
  end  

  if nil ~= request.OBURP then
     if tonumber(request.OBURP) == 1 and tonumber(GetVariable("toggleOburp")) == 1 then
       playsocial(GetSoundKeyword("toggleOburp"), "socials/oburp.ogg")
     end
  end  

  if nil ~= request.SNIFFLE then
     if tonumber(request.SNIFFLE) == 1 and tonumber(GetVariable("toggleSniffle")) == 1 then
       playsocial(GetSoundKeyword("toggleSniffle"), "socials/sniffle" .. math.random(1, 4) .. ".ogg")
     end
  end  

  if nil ~= request.ANNOUNCEMENT then
     if tonumber(request.ANNOUNCEMENT) == 1 and tonumber(GetVariable("toggleAnnouncement")) == 1 then
       playsocial(GetSoundKeyword("toggleAnnouncement"), "misc/copyover.ogg")
     end
  end

  if nil ~= request.BONK then
     if tonumber(request.BONK) == 1 and tonumber(GetVariable("toggleBonk")) == 1 then
       playsocial(GetSoundKeyword("toggleBonk"), "socials/bonk.ogg")
     end
  end

  if nil ~= request.WOLFWHISTLE then
     if tonumber(request.WOLFWHISTLE) == 1 and tonumber(GetVariable("toggleWolfwhistle")) == 1 then
       playsocial(GetSoundKeyword("toggleWolfwhistle"), "socials/wolfwhistle.ogg")
     end
  elseif nil ~= request.PASTRY then
     if tonumber(request.PASTRY) == 1 and tonumber(GetVariable("togglePastry")) == 1 then
       playsocial(GetSoundKeyword("togglePastry"), "socials/pastry.ogg")
     end
  elseif nil ~= request.MROW then
     if tonumber(request.MROW) == 1 and tonumber(GetVariable("toggleMrow")) == 1 then
       playsocial(GetSoundKeyword("toggleMrow"), "socials/mrow.ogg")
     end
  end

  if nil ~= request.SNORE then
     if tonumber(request.SNORE) == 1 and tonumber(GetVariable("toggleSnore")) == 1 then
       playsocial(GetSoundKeyword("toggleSnore"), "socials/snore.ogg")
     end
  end

  if nil ~= request.NODDLE then
     if tonumber(request.NODDLE) == 1 and tonumber(GetVariable("toggleNoddle")) == 1 then
       playsocial(GetSoundKeyword("toggleNoddle"), "socials/noddle.ogg")
     end
  end

  if nil ~= request.SNEEZE_MALE then
     if tonumber(request.SNEEZE_MALE) == 1 and tonumber(GetVariable("toggleSneeze")) == 1 then
       playsocial(GetSoundKeyword("toggleSneeze"), "socials/sneeze_male.ogg")
     end
  end

  if nil ~= request.SNEEZE_FEMALE then
     if tonumber(request.SNEEZE_FEMALE) == 1 and tonumber(GetVariable("toggleSneeze")) == 1 then
       playsocial(GetSoundKeyword("toggleSneeze"), "socials/sneeze_female.ogg")
     end
  end

  if nil ~= request.SLAP then
     if tonumber(request.SLAP) == 1 and tonumber(GetVariable("toggleSlap")) == 1 then
       playsocial(GetSoundKeyword("toggleSlap"), "socials/slap.ogg")
     end
  end

  if nil ~= request.INNOCENT then
     if tonumber(request.INNOCENT) == 1 and tonumber(GetVariable("toggleInnocent")) == 1 then
       playsocial(GetSoundKeyword("toggleInnocent"), "socials/innocent.ogg")
     end
  end

  if nil ~= request.CHAINSAW then
     if tonumber(request.CHAINSAW) == 1 and tonumber(GetVariable("toggleChainsaw")) == 1 then
       playsocial(GetSoundKeyword("toggleChainsaw"), "socials/chainsaw" .. math.random(1, 3) ..".ogg")
     end
  end

  if nil ~= request.MOO then
     if tonumber(request.MOO) == 1 and tonumber(GetVariable("toggleMoo")) == 1 then
       playsocial(GetSoundKeyword("toggleMoo"), "socials/moo.ogg")
     end
  end

  if nil ~= request.LICK then
     if tonumber(request.LICK) == 1 and tonumber(GetVariable("toggleLick")) == 1 then
       playsocial(GetSoundKeyword("toggleLick"), "socials/lick.ogg")
     end
  end

  if nil ~= request.WORSHIP then
     if tonumber(request.WORSHIP) == 1 and tonumber(GetVariable("toggleWorship")) == 1 then
       playsocial(GetSoundKeyword("toggleWorship"), "socials/worship.ogg")
     end
  end

  if nil ~= request.COLLECT_WET then
     if tonumber(request.COLLECT_WET) == 1 and tonumber(GetVariable("toggleForageCollectWet")) == 1 then
       playsound(GetSoundKeyword("toggleForageCollectWet"), "crafting/forage/collect_wet.ogg")
     end
  end

  if nil ~= request.COLLECT_RARE then
     if tonumber(request.COLLECT_RARE) == 1 and tonumber(GetVariable("toggleForageCollectRare")) == 1 then
       playsound(GetSoundKeyword("toggleForageCollectRare"), "crafting/forage/collect_rare.ogg")
     end
  end

  if nil ~= request.UNEARTH then
     if tonumber(request.UNEARTH) == 1 and tonumber(GetVariable("toggleForageUnearth")) == 1 then
       playsound(GetSoundKeyword("toggleForageUnearth"), "crafting/forage/dig_soil.ogg")
     end
  end

  if nil ~= request.PUNCH then
     if tonumber(request.PUNCH) == 1 and tonumber(GetVariable("togglePunch")) == 1 then
       playsocial(GetSoundKeyword("togglePunch"), "socials/punch.ogg")
     end
  end

  if nil ~= request.HONK then
     if tonumber(request.HONK) == 1 and tonumber(GetVariable("toggleHonk")) == 1 then
       playsocial(GetSoundKeyword("toggleHonk"), "socials/honk.ogg")
     end
  end

  if nil ~= request.MEOW then
     if tonumber(request.MEOW) == 1 and tonumber(GetVariable("toggleMeow")) == 1 then
       playsocial(GetSoundKeyword("toggleMeow"), "socials/meow"..math.random(1, 3)..".ogg")
     end
  end

  if nil ~= request.PURR then
     if tonumber(request.PURR) == 1 and tonumber(GetVariable("togglePurr")) == 1 then
       playsocial(GetSoundKeyword("togglePurr"), "socials/purr.ogg")
     end
  end

  if nil ~= request.WOOF then
     if tonumber(request.WOOF) == 1 and tonumber(GetVariable("toggleWoof")) == 1 then
       playsocial(GetSoundKeyword("toggleWoof"), "socials/woof.ogg")
     end
  end

  if nil ~= request.MOB_GO_POOF then
     if tonumber(request.MOB_GO_POOF) == 1 and tonumber(GetVariable("toggleMobGoPoof")) == 1 then
       playsocial(GetSoundKeyword("toggleMobGoPoof"), "mobs/mob_go_poof.ogg")
     end
  end

  if nil ~= request.ROAR then
     if tonumber(request.ROAR) == 1 and tonumber(GetVariable("toggleRoar")) == 1 then
       playsocial(GetSoundKeyword("toggleRoar"), "socials/roar"..math.random(1, 2)..".ogg")
     end
  end

  if nil ~= request.SCREAM_MALE then
     if tonumber(request.SCREAM_MALE) == 1 and tonumber(GetVariable("toggleScream")) == 1 then
       playsocial(GetSoundKeyword("toggleScream"), "socials/scream_male.ogg")
     end
  end

  if nil ~= request.SCREAM_FEMALE then
     if tonumber(request.SCREAM_FEMALE) == 1 and tonumber(GetVariable("toggleScream")) == 1 then
       playsocial(GetSoundKeyword("toggleScream"), "socials/scream_female.ogg")
     end
  end

  if nil ~= request.GASP_MALE then
     if tonumber(request.GASP_MALE) == 1 and tonumber(GetVariable("toggleGasp")) == 1 then
       playsocial(GetSoundKeyword("toggleGasp"), "socials/gasp_male.ogg")
     end
  end

  if nil ~= request.GASP_FEMALE then
     if tonumber(request.GASP_FEMALE) == 1 and tonumber(GetVariable("toggleGasp")) == 1 then
       playsocial(GetSoundKeyword("toggleGasp"), "socials/gasp_female.ogg")
     end
  end

  if nil ~= request.AHEM_MALE then
     if tonumber(request.AHEM_MALE) == 1 and tonumber(GetVariable("toggleAhem")) == 1 then
       playsocial(GetSoundKeyword("toggleAhem"), "socials/ahem_male.ogg")
     end
  end

  if nil ~= request.AHEM_FEMALE then
     if tonumber(request.AHEM_FEMALE) == 1 and tonumber(GetVariable("toggleAhem")) == 1 then
       playsocial(GetSoundKeyword("toggleAhem"), "socials/ahem_female.ogg")
     end
  end

  if nil ~= request.COUGH_MALE then
     if tonumber(request.COUGH_MALE) == 1 and tonumber(GetVariable("toggleCough")) == 1 then
       playsocial(GetSoundKeyword("toggleCough"), "socials/cough_male.ogg")
     end
  end

  if nil ~= request.COUGH_FEMALE then
     if tonumber(request.COUGH_FEMALE) == 1 and tonumber(GetVariable("toggleCough")) == 1 then
       playsocial(GetSoundKeyword("toggleCough"), "socials/cough_female.ogg")
     end
  end  

  if nil ~= request.CRY_MALE then
     if tonumber(request.CRY_MALE) == 1 and tonumber(GetVariable("toggleCry")) == 1 then
       playsocial(GetSoundKeyword("toggleCry"), "socials/cry_male" .. math.random(1, 2) .. ".ogg")
     end
  end

  if nil ~= request.CRY_FEMALE then
     if tonumber(request.CRY_FEMALE) == 1 and tonumber(GetVariable("toggleCry")) == 1 then
       playsocial(GetSoundKeyword("toggleCry"), "socials/cry_female" .. math.random(1, 2) .. ".ogg")
     end
  end

  if nil ~= request.CACKLE_MALE then
     if tonumber(request.CACKLE_MALE) == 1 and tonumber(GetVariable("toggleCackle")) == 1 then
       time = os.date("*t")
       if time.month == 10 and time.day == 31 then
         -- play a different cackle sound on Halloween
         playsocial(GetSoundKeyword("toggleCackle"), "socials/cackle_male_halloween" .. math.random(1, 2) .. ".ogg")
       else
         playsocial(GetSoundKeyword("toggleCackle"), "socials/cackle_male.ogg")
       end
     end
  end

  if nil ~= request.CACKLE_FEMALE then
     if tonumber(request.CACKLE_FEMALE) == 1 and tonumber(GetVariable("toggleCackle")) == 1 then
       time = os.date("*t")
       if time.month == 10 and time.day == 31 then
         -- play a different cackle sound on Halloween
         playsocial(GetSoundKeyword("toggleCackle"), "socials/cackle_female_halloween" .. math.random(1, 2) .. ".ogg")
       else
         playsocial(GetSoundKeyword("toggleCackle"), "socials/cackle_female"..math.random(1, 2)..".ogg")
       end
     end
  end

  if nil ~= request.ROGUE_ELF then
     if tonumber(request.ROGUE_ELF) == 1 and tonumber(GetVariable("toggleRogueElf")) == 1 then
       playsound(GetSoundKeyword("toggleRogueElf"), "mobs/rogue_elf.ogg")
     end
  end

if nil ~= request.REINDEER then
     if tonumber(request.REINDEER) == 1 and tonumber(GetVariable("toggleReindeer")) == 1 then
       playsound(GetSoundKeyword("toggleReindeer"), "mobs/reindeer.ogg")
     end
  end

   if nil ~= request.MUDPIES then
      if tonumber(request.MUDPIES) == 1 and tonumber(GetVariable("toggleMudpie")) == 1 then
         playsound(GetSoundKeyword("toggleMudpie"), "quests/mudpie.ogg")
      end
   end


   if nil ~= request.MONEY then
      if tonumber(request.MONEY) == 1 and tonumber(GetVariable("toggleMoney")) == 1 then
         playsound(GetSoundKeyword("toggleMoney"), "misc/get_gold.ogg")
      end
   end

   if nil ~= request.QUEST_POINTS then
      if tonumber(request.QUEST_POINTS) == 1 and tonumber(GetVariable("toggleQps")) == 1 then
         playsound(GetSoundKeyword("toggleQps"), "quests/qps.ogg")
      end
   end

 if nil ~= request.SPRITE then
     if tonumber(request.SPRITE) == 1 and tonumber(GetVariable("toggleSprite")) == 1 then
       playsound(GetSoundKeyword("toggleSprite"), "mobs/sprite.ogg")
     end
  end

 if nil ~= request.IMMORTAL then
     if tonumber(request.IMMORTAL) == 1 and tonumber(GetVariable("toggleImmortal")) == 1 then
       playsound(GetSoundKeyword("toggleImmortal"), "players/immortal.ogg")
     end
  end

   if nil ~= request.PLAYING then
      -- This will be 0 if they are at greet screen, in account menu, reading MOTD
      -- It will be 1 if they have passed the MOTD screen and are in the game
      playerIsPlaying = tonumber(request.PLAYING)
      if playerIsPlaying == 1 then
        if tonumber(GetVariable("ambianceEnabled")) == 1 then
          SetVariable("lastterrain", "")
          StartAmbiance()
        end
        -- Fade out the account menu music if you log in while it's still playing
        num = tonumber(GetVariable("music"))
        if num ~= nil then
          ppi.fadeout(num)
        end
        SetVariable("music", 0)
      end
   end
   
   if nil ~= request.ROOM_SECTOR then
      roomSectorName = tostring(request.ROOM_SECTOR)
      stopsound(GetVariable("ambiance"))
      StartAmbiance()
   end

  if nil ~= request.TELL and tostring(request.TELL):len() > 0 then
    if tonumber(GetVariable("toggleTell")) == 1 then
       playsound(GetSoundKeyword("toggleTell"), "channels/tell.ogg")
    end
    historyadd ("tells",tostring(request.TELL))
  elseif nil ~= request.BEEP_CHANNEL and tostring(request.BEEP_CHANNEL):len() > 0 then
    if tonumber(GetVariable("toggleBeepChannel")) == 1 then
       playsound(GetSoundKeyword("toggleBeepChannel"), "channels/beep_channel.ogg")
    end
    historyadd ("beep",tostring(request.BEEP_CHANNEL))
  elseif nil ~= request.GTELL and tostring(request.GTELL):len() > 0 then
    if tonumber(GetVariable("toggleGtell")) == 1 then
       playsound(GetSoundKeyword("toggleGtell"), "channels/gtell.ogg")
    end
    historyadd ("group",tostring(request.GTELL))
  end

  if nil ~= request.FCHAT and tostring(request.FCHAT):len() > 0 then
    if tonumber(GetVariable("toggleFchat")) == 1 then
       playsound(GetSoundKeyword("toggleFchat"), "channels/fchat.ogg")
    end
    historyadd ("friend chat",tostring(request.FCHAT))
  end

  if nil ~= request.GHOUSE and tostring(request.GHOUSE):len() > 0 then
    if tonumber(GetVariable("toggleGhouse")) == 1 then
       playsound(GetSoundKeyword("toggleGhouse"), "channels/ghouse.ogg")
    end
    historyadd ("global house",tostring(request.GHOUSE))
  end

  if nil ~= request.YELL and tostring(request.YELL):len() > 0 then
    if tonumber(GetVariable("toggleYell")) == 1 then
       playsound(GetSoundKeyword("toggleYell"), "channels/yell.ogg")
    end
    historyadd ("yell",tostring(request.YELL))
  end

  if nil ~= request.AUCTION and tostring(request.AUCTION):len() > 0 then
    if tonumber(GetVariable("toggleAuction")) == 1 then
       playsound(GetSoundKeyword("toggleAuction"), "channels/auction.ogg")
    end
    historyadd ("auction",tostring(request.AUCTION))
  end

  if nil ~= request.LOGINS and tostring(request.LOGINS):len() > 0 then
    if tonumber(GetVariable("toggleLogins")) == 1 then
       playsound(GetSoundKeyword("toggleLogins"), "channels/login.ogg")
    end
    historyadd ("logins",tostring(request.LOGINS))
  end

  if nil ~= request.LOGOUTS and tostring(request.LOGOUTS):len() > 0 then
    if tonumber(GetVariable("toggleLogouts")) == 1 then
       playsound(GetSoundKeyword("toggleLogouts"), "channels/logout.ogg")
    end
    historyadd ("logins",tostring(request.LOGOUTS))
  end

  if nil ~= request.DEATH_MALE and tostring(request.DEATH_MALE):len() > 0 then
     if tonumber(GetVariable("togglePcdeath")) == 1 then
       playsound(GetSoundKeyword("togglePcdeath"), "hp/death_male.ogg")
     end
     historyadd ("player deaths",tostring(request.DEATH_MALE))
  end

  if nil ~= request.DEATH_FEMALE and tostring(request.DEATH_FEMALE):len() > 0 then
     if tonumber(GetVariable("togglePcdeath")) == 1 then
       playsound(GetSoundKeyword("togglePcdeath"), "hp/death_female.ogg")
     end
     historyadd ("player deaths",tostring(request.DEATH_FEMALE))
  end

  if nil ~= request.SPOUSE and tostring(request.SPOUSE):len() > 0 then
    if tonumber(GetVariable("toggleSpouse")) == 1 then
       playsound(GetSoundKeyword("toggleSpouse"), "channels/spouse.ogg")
    end
    historyadd ("spouse",tostring(request.SPOUSE))
  end

  if nil ~= request.SAY and tostring(request.SAY):len() > 0 then
    if tonumber(GetVariable("toggleSay")) == 1 then
       playsound(GetSoundKeyword("toggleSay"), "channels/say.ogg")
    end
    historyadd ("say",tostring(request.SAY))
  end

   if nil ~= request.HISTORY_BUFFER then
      historyBufferTable = {}
      for key, value in pairs(request.HISTORY_BUFFER) do
         historyBufferTable[key] = value
         if tostring(key):len() > 0 and tostring(value):len() > 0 then
           --Note("v: " .. tostring(value))
           --Note("t: " .. tostring(key))
           if key == "your achievements" then
              historyadd("your achievements",tostring(value))
           elseif key == "player achievements" then
              historyadd("player achievements",tostring(value))
           elseif key == "your rankings" then
              historyadd("your rankings",tostring(value))
           elseif key == "player rankings" then
              historyadd("player rankings",tostring(value))
           elseif key == "spellup" then
              historyadd("spellup",tostring(value))
           elseif key == "experience" then
              historyadd("experience",tostring(value))
             if tonumber(GetVariable("toggleExp")) == 1 then
               playsound(GetSoundKeyword("toggleExp"), "exp/exp.ogg")
             end
           elseif key == "skills" then
              historyadd("skills",tostring(value))
              if tonumber(GetVariable("toggleExp")) == 1 then
                playsound(GetSoundKeyword("toggleExp"), "exp/exp.ogg")
              end
           elseif key == "expired buffs" then
              historyadd("expired buffs",tostring(value))
           end
         end
      end
   end

   if nil ~= request.CHANNELS then
      channelTable = {}
      for key, value in pairs(request.CHANNELS) do
         channelTable[key] = value
         if tostring(key):len() > 0 and tostring(value):len() > 0 then
           --Note("v: " .. tostring(value))
           --Note("t: " .. tostring(key))
           if key == "chat" then
              if tonumber(GetVariable("toggleChat")) == 1 then
                 playsound(GetSoundKeyword("toggleChat"), "channels/chat.ogg")
              end
              historyadd ("chat",tostring(value))
           elseif key == "hchat" then
              if tonumber(GetVariable("toggleHchat")) == 1 then
                 playsound(GetSoundKeyword("toggleHchat"), "channels/hchat.ogg")
              end
              historyadd ("house chat",tostring(value))
           elseif key == "roleplay" then
              if tonumber(GetVariable("toggleRoleplay")) == 1 then
                 playsound(GetSoundKeyword("toggleRoleplay"), "channels/roleplay.ogg")
              end
              historyadd ("roleplay",tostring(value))
           elseif key == "artisans" then
              if tonumber(GetVariable("toggleArtisans")) == 1 then
                 playsound(GetSoundKeyword("toggleArtisans"), "channels/artisans.ogg")
              end
              historyadd ("artisans",tostring(value))
           elseif key == "trivia" then
              if tonumber(GetVariable("toggleTrivia")) == 1 then
                 playsound(GetSoundKeyword("toggleTrivia"), "channels/trivia.ogg")
              end
              historyadd ("trivia",tostring(value))
           elseif key == "faith" then
              if tonumber(GetVariable("toggleFaith")) == 1 then
                 playsound(GetSoundKeyword("toggleFaith"), "channels/faith.ogg")
              end
              historyadd ("faith",tostring(value))                
           elseif key == "mudevent" then
              if tonumber(GetVariable("toggleMudevent")) == 1 then
                 playsound(GetSoundKeyword("toggleMudevent"), "channels/mudevent.ogg")
              end
              historyadd ("mud event",tostring(value))
           elseif key == "secrets" then
              if tonumber(GetVariable("toggleSecrets")) == 1 then
                 playsound(GetSoundKeyword("toggleSecrets"), "channels/secrets.ogg")
              end
              historyadd ("secrets",tostring(value))
           elseif key == "wedding" then
              if tonumber(GetVariable("toggleWedding")) == 1 then
                 playsound(GetSoundKeyword("toggleWedding"), "channels/wedding.ogg")
              end
              historyadd ("wedding",tostring(value))
           elseif key == "newbie" then
              if tonumber(GetVariable("toggleNewbie")) == 1 then
                 playsound(GetSoundKeyword("toggleNewbie"), "channels/newbie.ogg")
              end
              historyadd ("newbie",tostring(value))  
           elseif key == "grats" then
              if tonumber(GetVariable("toggleGrats")) == 1 then
                 playsound(GetSoundKeyword("toggleGrats"), "channels/grats.ogg")
              end
              historyadd ("grats",tostring(value))
           elseif key == "music" then
              if tonumber(GetVariable("toggleMusic")) == 1 then
                 playsound(GetSoundKeyword("toggleMusic"), "channels/music.ogg")
              end
              historyadd ("music",tostring(value))
           elseif key == "flame" then
              if tonumber(GetVariable("toggleFlame")) == 1 then
                 playsound(GetSoundKeyword("toggleFlame"), "channels/flame.ogg")
              end
              historyadd ("flame",tostring(value))                              
           elseif key == "demigods" then
              if tonumber(GetVariable("toggleDemigods")) == 1 then
                 playsound(GetSoundKeyword("toggleDemigods"), "channels/demigods.ogg")
              end
              historyadd ("demigods",tostring(value))              
           elseif key == "imt" then
              if tonumber(GetVariable("toggleImt")) == 1 then
                 playsound(GetSoundKeyword("toggleImt"), "channels/imt.ogg")
              end
              historyadd ("imt",tostring(value))
           else
              if tonumber(GetVariable("toggleChannels")) == 1 then
                if io.open(dir.."sounds/custom/"..key..".ogg", "r") then
                  playsound(GetSoundKeyword("toggleChannels"), "custom/"..key..".ogg")
                else
                  playsound(GetSoundKeyword("toggleChannels"), "channels/custom_channel.ogg")
                end
              end
              historyadd (tostring(key),tostring(value))               
           end
        end
      end
   end

   if nil ~= request.MINING_GEM then
      if tonumber(request.MINING_GEM) == 1 and tonumber(GetVariable("toggleMiningGem")) == 1 then
         playsound(GetSoundKeyword("toggleMiningGem"), "crafting/mining/gem.ogg")
      end
   end

   if nil ~= request.BOSS_LAUGH then
      if tonumber(request.BOSS_LAUGH) == 1 and tonumber(GetVariable("toggleBossLaugh")) == 1 then
         playsound(GetSoundKeyword("toggleBossLaugh"), "mobs/evil_laugh.ogg")
      end
   end

   if nil ~= request.SHOP then
      -- Don't play the shop sound if Player is running
      if tonumber(request.SHOP) == 1 and tonumber(GetVariable("toggleShopBell")) == 1 and tonumber(GetVariable("running")) == 0 then
         playsound(GetSoundKeyword("toggleShopBell"), "rooms/shop_bell.ogg")
      end
   end

   if nil ~= request.HIDDEN_EXIT then
      if tonumber(request.HIDDEN_EXIT) == 1 and tonumber(GetVariable("toggleHiddenExit")) == 1 then
         playsound(GetSoundKeyword("toggleHiddenExit"), "exits/hidden_exit.ogg")
      end
   end

   SaveState()

end -- function OnPluginTelnetSubnegotiation

-- Save state when player quits
function OnPluginDisconnect()
   SaveState()
   -- Note("Stopping sounds.")
   ppi.stop(0)
end

--[[function OnPluginClose()
   Note("Closing Erion Soundpack!")
end]]

reinstall = 0
SetVariable("reinstall", 0)

function OnPluginConnect()
  SaveState()
end

-- In this function, get the world variables and set them to the non-world variables
-- Ie var = GetVariable("worldRunning") -> SetVariable("running", var)
function OnPluginInstall()
  Note("Erion MUD soundpack initialized!")
  ppi.stop(0) -- Stop all sounds
  ArrayCreate "msdpTable"
  SetVariable("reinstall", 1) -- Installing plugin is true

  BroadcastPlugin(1, "reload") -- reload basically tells other plugins "clear all your msdp data"
  if IsConnected() then
    -- Pretend like we just logged in
    OnPluginConnect()
  end

  -- Load the player's configurations (they may have some sounds toggled off)
  for i,v in pairs(soundpackTable) do
    -- Load the toggle variables (toggleSpellup, etc.)
    var = GetVariable("world" .. soundpackTable[i][2])
    if var ~= nil then
      SetVariable(soundpackTable[i][2], var)
    else
      SetVariable(soundpackTable[i][2], 1)
    end
    i = i + 1
  end

  -- Save if music is enabled
  var = GetVariable("worldMusicEnabled")
  if var ~= nil then
    SetVariable("musicEnabled", var)
  else
    SetVariable("musicEnabled", 1)
  end

  -- Save if combat music is enabled
  var = GetVariable("worldCombatMusicEnabled")
  if var ~= nil then
    SetVariable("combatMusicEnabled", var)
  else
    SetVariable("combatMusicEnabled", 1)
  end

  -- Save if weather ambience is enabled
  var = GetVariable("worldWeatherAmbienceEnabled")
  if var ~= nil then
    SetVariable("weatherAmbienceEnabled", var)
  else
    SetVariable("weatherAmbienceEnabled", 1)
  end

  -- Save if combat is enabled
  var = GetVariable("worldCombatEnabled")
  if var ~= nil then
    SetVariable("combatEnabled", var)
  else
    SetVariable("combatEnabled", 1)
  end

  -- Save if ambiance is enabled
  var = GetVariable("worldAmbianceEnabled")
  if var ~= nil then
    SetVariable("ambianceEnabled", var)
  else
    SetVariable("ambianceEnabled", 1)
  end

  -- Save if socials is enabled
  var = GetVariable("worldSocialsEnabled")
  if var ~= nil then
    SetVariable("socialsEnabled", var)
  else
    SetVariable("socialsEnabled", 1)
  end  

  -- Load volume levels
  var = GetVariable("worldVolume1")
  if var ~= nil then
    SetVariable("volume1", var)
  else
    SetVariable("volume1", 40)
  end
  var = GetVariable("worldVolume2")
  if var ~= nil then
    SetVariable("volume2", var)
  else
    SetVariable("volume2", 20)
  end
  var = GetVariable("worldVolume3")
  if var ~= nil then
    SetVariable("volume3", var)
  else
    SetVariable("volume3", 20)
  end
  -- Socials volume
  var = GetVariable("worldVolume4")
  if var ~= nil then
    SetVariable("volume4", var)
  else
    SetVariable("volume4", 20)
  end
  -- Combat volume
  var = GetVariable("worldVolume5")
  if var ~= nil then
    SetVariable("volume5", var)
  else
    SetVariable("volume5", 20)
  end
  -- Combat music volume
  var = GetVariable("worldVolume6")
  if var ~= nil then
    SetVariable("volume6", var)
  else
    SetVariable("volume6", 20)
  end
  -- Weather ambience volume
  var = GetVariable("worldVolume7")
  if var ~= nil then
    SetVariable("volume7", var)
  else
    SetVariable("volume7", 15)
  end


  -- Save print sounds toggle
  var = GetVariable("worldPrintSounds")
  if var ~= nil then
    SetVariable("printsounds", var)
  else
    SetVariable("printsounds", 0)
  end

  -- Save running toggle
  var = GetVariable("worldRunning")
  if var ~= nil then
     SetVariable("running", var)
  else
     SetVariable("running", 0)
  end

  -- Saving the home music preference
  var = GetVariable("worldHomeMusicKeyword")
  if var ~= nil then
    SetVariable("homeMusicKeyword", var)
  else
    SetVariable("homeMusicKeyword", "toggleHomeMusic")
  end
  
  -- Save the last sector name
  var = GetVariable("worldRoomSectorName")
  if var ~= nil then
     --Note("sector name was set to: " .. tostring(var))
     roomSectorName = tostring(var)
  else
     roomSectorName = "unknown"
  end
  SetVariable("reinstall", 0)

   var = GetVariable("worldRoomName")
   if var ~= nil then
      ArraySet("msdpTable", "room_name", tostring(var))
      roomName = ArrayGet("msdpTable", "room_name")
      --Note("Room Name has been set to: " .. tostring(roomName))
   end

  var = GetVariable("worldSoundsEnabled")
  if var ~= nil then
     SetVariable("soundsEnabled", var)
  else
     SetVariable("soundsEnabled", 1)
  end

  -- Restart ambiance if reinstalling the plugin, if player is logged in
  SetVariable("lastterrain", "")
--  StartAmbiance()

  if tonumber(GetVariable("soundsEnabled")) == 0 then
    Note("You currently have all sounds disabled. To turn them on, type 'sound on'.")
  end
end

-- In this function, save the world variables
-- You must also declare the variables and use SetVariable() on them above where ambianceEnabled is initialized
function OnPluginSaveState()
  SetVariable("MSDPDebug", MSDPDebug)

  --[[
      
      Only save variables if we are not first installing the plugin, otherwise this will overwrite variables 
      like the room sector name, which we need to save between reinstallations

  ]]

  if tonumber(GetVariable("reinstall")) == 1 then
     --Note("Reinstalling the plugin, so we are not going to reinitializing variables.")
     return
  end

  local i = 1
  for i,v in pairs(soundpackTable) do
    -- Save the toggle variables (toggleSpellup, etc.)
    SetVariable("world" .. soundpackTable[i][2], GetVariable(soundpackTable[i][2]))
    --print(soundpackTable[i][2], GetVariable(soundpackTable[i][2]))
    i = i + 1
  end

  -- Save the music enabled/disabled status (0 or 1)
  SetVariable("worldMusicEnabled", GetVariable("musicEnabled"))
  -- Save the combat music enabled/disabled status (0 or 1)
  SetVariable("worldCombatMusicEnabled", GetVariable("combatMusicEnabled"))
  -- Save the combat enabled/disabled status (0 or 1)
  SetVariable("worldCombatEnabled", GetVariable("combatEnabled"))
  -- Save the ambiance enabled/disabled status (0 or 1)
  SetVariable("worldAmbianceEnabled", GetVariable("ambianceEnabled"))
  -- Save the socials enabled/disabled status (0 or 1)
  SetVariable("worldSocialsEnabled", GetVariable("socialsEnabled"))
  -- Save the weather ambience enabled/disabled status (0 or 1)
  SetVariable("worldWeatherAmbienceEnabled", GetVariable("weatherAmbienceEnabled"))

  SetVariable("worldSoundsEnabled", GetVariable("soundsEnabled"))

  -- Save room sector
  SetVariable("worldRoomSectorName", roomSectorName)

  -- Saving print sounds
  SetVariable("worldPrintSounds", GetVariable("printsounds"))

  -- Saving player home preference music
  SetVariable("worldHomeMusicKeyword", GetVariable("homeMusicKeyword"))

  -- Saving volume levels
  SetVariable("worldVolume1", GetVariable("volume1"))
  SetVariable("worldVolume2", GetVariable("volume2"))
  SetVariable("worldVolume3", GetVariable("volume3"))
  SetVariable("worldVolume4", GetVariable("volume4"))
  SetVariable("worldVolume5", GetVariable("volume5"))
  SetVariable("worldVolume6", GetVariable("volume6"))
  SetVariable("worldVolume7", GetVariable("volume7"))

  roomName = ArrayGet("msdpTable", "room_name")
  if roomName ~= nil then
     SetVariable("worldRoomName", tostring(roomName))
  end  
end

function OnPluginTelnetRequest (msg_type, data)
   if msg_type == MSDP and data == "WILL" then
      return true
   end -- if
  
   if msg_type == MSDP and data == "SENT_DO" then
      --Note ("Enabling MSDP.")
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'ROOM_NAME')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'LOOK')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'RUNTO')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'WATER_GARDEN')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'DRINK')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'ACHIEVEMENT')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'ACHIEVEMENT_CHANNEL')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'TUCK')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'GLYPH')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'CONTEMPLATE_GLYPH')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'ARRANGE_ROCKS')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'GOTMAIL')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'COMBO2')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'COMBO3')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'COMBO4')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'GMOTE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'TARGET_ENGAGED_MALE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'TARGET_ENGAGED_FEMALE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'STAR_MISS')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'TREE_WEDGE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'QUEST_LAST_TARGET')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'BLINDED_SELF')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'BLINDED_TARGET')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'QUEST_COIN')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'QUEST_COMPLETE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'WEREWOLF')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'EVIL_PUMPKIN')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'TURKEY')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'LEVEL_OTHER')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'CLEAN_CLOTH')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'CLEAN_FLOOR')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'EGG_HOUSE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'EGG_SELF')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'EGG_PLAYER')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'SHEAR_SHEEP')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'SOUL_EMBER')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'SUICIDE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'BUNNY_EXPLOSION')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'CLONE_SHATTER')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'CONFUSION')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'WEATHER')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'WEATHER_AMBIENCE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'UNIQUE_MOB')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'ADD_CLASS_OTHER')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'REPLACE_CLASS_OTHER')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'REPLACE_CLASS_SELF')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'EVOLVE_OTHER')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'EVOLVE_SELF')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'RESTART_OTHER')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'RESTART_SELF')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'DAMAGE_ITEM')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'POOFIN')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'POOFOUT')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'POOFSELF')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'GOLD_PILE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'INSTRUMENT')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'DAILY_START')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'DAILY_COMPLETE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'DAILY_TASK')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'CHICKEN_EGG')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'SHEEP_EAT')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'COW_POOP')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'COW_EAT')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'COW_MILK')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'CHICKEN_EAT')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'QUEST_FAIL')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'POTION_STEAL')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'POTION_SMASH')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'POTION_QUAFF')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'WAYPOINT_APPEAR')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'WAYPOINT_VANISH')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'WAYPOINT_PRAY')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'FULLY_INFUSED')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'GUESS_START')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'GUESS_END')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'GUESS_LETTER')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'SKILL_IMPROVE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'DRENCH_SELF')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'DRENCH_PLAYER')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'DRENCH_MISS')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'FILL_WATER_BALLOON')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'HINT')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'AREA_REPOP')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'BEGIN_SMELTING')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'SMELT_COOLDOWN')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'KEYRING')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'FLOGIN')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'WIZNET')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'LEAVE_PET_BEHIND')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'COLOSSEUM_WIN_OTHER')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'COLOSSEUM_LOSE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'HOME_RECALL_FEMALE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'HOME_RECALL_MALE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'GROUP_QUEST_COOLDOWN')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'GROUP_QUEST_START')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'GROUP_QUEST_REWARD_START')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'GROUP_QUEST_REWARD_CLOSE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'GIVE_ITEM')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'OBTAIN_ITEM')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'FLEE_NPC')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'FLEE_PC_OTHER')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'FLEE_PC_SELF')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'FLOGOUT')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'LOGIN_REMINDER')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'NEW_PLAYER')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'RETURNED_PLAYER')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'EMPTY_DRINK')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'EMPTY_FOUNTAIN')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'TIERUP_SELF')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'TIERUP_OTHER')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'BIRTHDAY')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'ARMOR_ROULETTE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'SIT')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'ENTER_INSTANCE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'EXIT_INSTANCE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'REVEAL')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'CREDIT_BUY')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'CREDIT_GIFT')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'CREDIT_RECEIVE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'PORTAL')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'WOOSH')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'RESTOCK')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'TANNIN_COMPLETE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'FILE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'LOW_HEALTH')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'LIGHT_OUT')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'SHARPEN_WEAPON')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'DULL_WEAPON')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'RECIPE_UNLOCK')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'COPY_RECIPE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'CRACK_STONE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'GRIND_STONE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'INFUSION')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'PRISM')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'SPINNING_WHEEL')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'TATTOO')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'SACRIFICE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'JOIN_FAITH')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'FAITH_LEVEL')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'LIKE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'SPILL_COINS')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'PRAYER')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'PRAYER_REMINDER')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'LEATHER_CREAKING')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'APPLY_RESIN')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'POUR_SAND')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'STAIN_GLASS')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'CUT_PAPER')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'FOLDING_PAPER')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'ATTACH')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'POUR_MOULD')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'POUR_OUT')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'POUR_IN')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'PAINT')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'KNIT')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'SEW')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'DRESS')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'ITEM_SURPRISE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'START_MISSION')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'COMPLETE_MISSION')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'SOAK')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'LIBERATE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'CAPTIVE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'LEPRECHAUN')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'CRUNCHY_BITE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'HUNGRY_BUNNY')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'FEATHER')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'FORAGE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'LABEL_MAP')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'MARK_MAP')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'DRAW_COMPASS')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'DRY_PAPER')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'UNPICK')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'MASH')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'BOTCHECK')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'SKILL_SELF')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'NON_ATTACK_SKILL')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'BUFF_EXPIRES')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'MELEE_TNW')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'MELEE_TW')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'MELEE_SNW')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'MELEE_SW')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'WEAR_ITEM')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'REMOVE_ITEM')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'WIELD_WEAPON')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'OPEN_DOOR')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'CLOSE_DOOR')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'SIGIL_ADD')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'SIGIL_FOUND')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'GROUP_JOIN')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'GROUP_INVITE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'PET_RELEASE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'RESTORE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'WEDDING')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'CHANNELS')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'HISTORY_BUFFER')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'MONEY')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'MUDPIES')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'QUEST_POINTS')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'FAUX_LEVEL')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'ROOM_SECTOR')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'HIDDEN_EXIT')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'BOSS_LAUGH')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'MINING_GEM')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'SHOP')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'BUNNY')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'SEED')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'SEND_ITEM')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'RECEIVE_ITEM')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'HAMMER_WOOD')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'FORAGE_SAND')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'HAMMER_METAL')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'FULL_MANA')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'FULL_HP')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'ENTER_AREA')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'AREA_VNUM')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'FIGHT_TYPE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'SPOUSE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'KNOCK_HOME')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'TREASURE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'BUFF_COMMAND')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'JUNKYARD')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'JUNKYARD_TIMER')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'BOSS_HP_PERCENT')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'MOB_HP_PERCENT')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'ROGUE_ELF')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'REINDEER')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'SPRITE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'IMMORTAL')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'BUFF_OFF')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'PLAYING')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'SAY')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'FCHAT')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'GHOUSE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'TELL')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'GTELL')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'BEEP_CHANNEL')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'YELL')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'AUCTION')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'LOGINS')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'LOGOUTS')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'EVENT_START')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'BURP')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'BEARHUG')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'STAB')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'BONK')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'BITE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'OBURP')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'SNIFFLE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'ANNOUNCEMENT')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'WOLFWHISTLE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'PASTRY')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'MROW')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'DEATH_MALE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'DEATH_FEMALE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'SUMMON_VANISH')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'SUMMON_APPEAR')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'SUMMONED')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'BECKON')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'ROAR')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'CHUCKLE_MALE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'CHUCKLE_FEMALE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'CHORTLE_MALE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'CHORTLE_FEMALE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'SCREAM_MALE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'SCREAM_FEMALE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'GASP_MALE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'GASP_FEMALE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'CRY_MALE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'CRY_FEMALE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'COUGH_MALE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'COUGH_FEMALE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'AHEM_MALE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'AHEM_FEMALE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'CACKLE_MALE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'CACKLE_FEMALE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'FART')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'GIGGLE_MALE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'GIGGLE_FEMALE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'YEEHAW_MALE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'YEEHAW_FEMALE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'HONK')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'MEOW')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'PURR')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'WOOF')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'MOB_GO_POOF')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'SIGH')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'POKE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'POKEYSTICK_MALE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'POKEYSTICK_FEMALE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'SQUEAL_MALE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'SQUEAL_FEMALE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'YAWN')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'ROFL_MALE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'ROFL_FEMALE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'PONDER_MALE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'PONDER_FEMALE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'COFFEE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'CHIRP')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'NUDGE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'COWBELL')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'SQUEAK')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'PING')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'BOUNCE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'PEWPEW')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'STRIPTEASE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'LAUGH_MALE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'LAUGH_FEMALE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'GIGGLEFART')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'SNORE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'NODDLE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'SNEEZE_MALE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'SNEEZE_FEMALE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'SLAP')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'INNOCENT')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'CHAINSAW')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'PUNCH')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'MOO')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'LICK')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'WORSHIP')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'UNEARTH')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'COLLECT_WET')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'COLLECT_RARE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'PILGRIMAGE_REQUEST')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'PILGRIMAGE_COMPLETE')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'PILGRIMAGE_TIMER')
      Send_MSDP_Packet(string.char(MSDP_VAR) .. 'REPORT' .. string.char(MSDP_VAL) .. 'PILGRIMAGE_OFFERING')
      return true
   end

   return false
end -- function OnPluginTelnetRequest

--function OnPluginDisable()
   --EnablePlugin(GetPluginID(), true)
   --ColourNote("white", "blue", "You are not allowed to disable the "..
   --GetPluginInfo(GetPluginID(), 1).." plugin. It is necessary for other plugins.")
--end

local function getmemoryusage()
   collectgarbage('collect')
   return collectgarbage('count')
end

function dumpmsdp(data)
   data = data or ""
   data = string.gsub(
      string.gsub(
         string.gsub(
            string.gsub(
               string.gsub(
                  string.gsub(data, string.char(MSDP_VAR), "<MSDP_VAR>"),
                  string.char(MSDP_VAL), "<MSDP_VAL>"),
               string.char(MSDP_TABLE_OPEN), "<MSDP_TABLE_OPEN>"),
            string.char(MSDP_TABLE_CLOSE), "<MSDP_TABLE_CLOSE>"),
         string.char(MSDP_ARRAY_OPEN), "<MSDP_ARRAY_OPEN>"),
      string.char(MSDP_ARRAY_CLOSE), "<MSDP_ARRAY_CLOSE>")
   ColourNote("darkorange", "", data)
end

-- Sends a request for a variable to see if there's been an update
function Send_MSDP_Packet (what)
   assert (what, "Send_MSDP_Packet passed a nil message.")
   local i = string.find(what, SPECIAL_CHARS)
   if i ~= nil then
      ColourNote("white", "blue", "WARNING: MSDP packet contains prohibited characters: "..utils.strjoin(utils.get_chars(what), ", "))
   end

   SendPkt (string.char (IAC, SB, MSDP) .. 
            what ..
            string.char (IAC, SE))
end

function parse_MSDP_request(data)
   local request = {}
   
   local parse_MSDP_variable
   local parse_MSDP_value
   
   local function ParserError(message)
      Note(message)
   end
   
   local function parse_MSDP_array(arg)
      local result = {}
      
      repeat
         local item = parse_MSDP_variable(arg)
         if nil == item then
            return nil
         end
         table.insert(result, item)
      until MSDP_ARRAY_CLOSE == data:byte(arg.from, arg.from)
      
      return result
   end
   
   local function parse_MSDP_table(arg)
      local result = {}
      
      repeat
         local item = parse_MSDP_variable(arg)

         if nil == item then
            return nil
         end
         for k, v in pairs(item) do
            result[k] = v
         end
     
      until MSDP_TABLE_CLOSE == data:byte(arg.from, arg.from)
      return result
   end
   
   function parse_MSDP_value(arg)
      local data = arg.data -- Ex: |QUEST_POINTS|15619
      local pos = arg.from -- Ex: 15

      --Note("Data: " .. data)
      --Note("Pos: " .. pos)
      --Note("Data Length: " .. data:len())

      -- data length is equal to the special starting char, variable name, value
      -- Example: |MONEY|374246
      -- data:len() will return 13, because it's 13 chars long

      -- If no value was sent, stop parsing here. This is the case when strings are sent as 0 length, such as ""
      if pos > data:len() then
         return ""
      end

      if MSDP_TABLE_OPEN == data:byte(pos, pos) then
         local a = {data = data, from = 1 + pos}
         result = parse_MSDP_table(a)
         pos = a.from
      elseif MSDP_ARRAY_OPEN == data:byte(pos, pos) then
         local a = {data = data, from = 1 + pos}
         result = parse_MSDP_array(a)
         pos = a.from
      else
         local s = ""
         while pos <= data:len() do
            local c = data:sub(pos, pos)
            
            if MSDP_ARRAY_CLOSE == data:byte(pos, pos) or MSDP_TABLE_CLOSE == data:byte(pos, pos) or MSDP_VAL == data:byte(pos, pos) or MSDP_VAR == data:byte(pos, pos)then
               -- Reached the end of the table
               break
            --[[elseif nil ~= string.find(SPECIAL_CHARS, c) then
               ParserError("MSDP value contains special characters.")
               return nil]]
            else
               s = s .. c
            end
            
            pos = pos + 1
         end
         
         result = s
      end
      
      arg.from = pos
      return result
   end
   
   function parse_MSDP_variable(arg)
      local data = arg.data
      local pos = arg.from
      local result = {}
      
      if 1 >= data:len() then
         --ParserError("Value too small in parse_MSDP_variable")
         return nil
      end
      
      if data:byte(pos, pos) ~= MSDP_VAR then
         --ParserError("MSDP variable does not start from MSDP_VAR. Current character is " .. string.format("\\x%02x", data:byte(pos, pos)))
         return nil
      end
      
      local name, value = "", nil
      
      pos = 1 + pos
      while pos <= data:len() do
         local c = data:sub(pos, pos)
         if string.char(MSDP_VAL) == c then
            local a = {data = data, from = 1 + pos}
            value = parse_MSDP_value(a)
            pos = a.from
            break
         --[[elseif nil ~= string.find(SPECIAL_CHARS, c) then
            ParserError("MSDP variable name contains special characters.")
            return nil]]
         else
            name = name .. c
         end
         pos = pos + 1
      end
      
      if nil == name then
         --Note ("parse_MSDP_variable was called with argument " .. tostring(arg) .. " resulting in a table error. Name field was " .. tostring(name) .. ".")
         --ParserError("Variable name is nil.")
         return nil
      end
      
      if nil == value then
         value = ""
         --Note("Value field was " .. tostring(value) .. ".")
      end

      if arg.from == data:len() then
         --ParserError("Unexpected end of value")
         return nil
      end
      
      arg.from = pos
      result[name] = value
      return result
   end
   return parse_MSDP_variable({data = data, from = 1})
end

PPI = require("ppi")
ppi = PPI.Load("aedf0cb0be5bf045860d54b7")

dir=world.GetInfo(67)

volume_names = {"sound effects volume", "ambiance volume", "music volume", "socials volume", "combat volume", "combat music volume", "weather ambience volume"}

-- IMPORTANT!!! Volume handle must be one word.
volume_handles = {"effects", "ambiance", "music", "socials", "combat", "combatmusic", "weather"}

current_volume = 1
SetVariable("lastterrain", "")

function playsound(keyword, snd)
  if tonumber(GetVariable("soundsEnabled")) == 0 then
    return
  end
   --current_volume = 1
   path = dir.."\\sounds\\"..snd
   --Note("Path is: " .. path)
   result = ppi.play(path,0,0, tonumber(GetVariable("volume1")))
   SetVariable("effect", result)
   if tonumber(GetVariable("printsounds")) == 1 then
     if result == 0 then
       Note("Could not play sound keyword '" .. keyword .. "' from directory " .. snd)
     else
       Note("Playing sound keyword '" .. keyword .. "' from directory " .. snd)
     end
   end
   return result
end

function playcombat(keyword, snd, pan)
  if tonumber(GetVariable("soundsEnabled")) == 0 then
    return
  end
  if tonumber(GetVariable("combatEnabled")) == 0 then
    return
  end
   --current_volume = 5
   path = dir.."\\sounds\\"..snd
   --Note("Path is: " .. path)
   if tonumber(GetVariable("printsounds")) == 1 then
     Note("Playing sound keyword '" .. keyword .. "' from directory " .. snd)
   end
   result = ppi.play(path,0,pan, tonumber(GetVariable("volume5")))
end

function stopsound(snd)
   if tonumber(snd)~=nil then
    ppi.stop(snd)
    -- Note("stopping sound: " .. snd)
   end
end


-- Gets the current volume level for any given sound category
function getCurrentVolume()
   if current_volume == 1 then
      return tonumber(GetVariable("volume1"))
   elseif current_volume == 2 then
      return tonumber(GetVariable("volume2"))
   elseif current_volume == 3 then
      return tonumber(GetVariable("volume3"))
   elseif current_volume == 4 then
      return tonumber(GetVariable("volume4"))
   elseif current_volume == 5 then
      return tonumber(GetVariable("volume5"))             
   elseif current_volume == 6 then
      return tonumber(GetVariable("volume6"))
   elseif current_volume == 7 then
      return tonumber(GetVariable("volume7"))
   else
      return tonumber(GetVariable("volume1"))
   end
end

-- Sets the volume level for a given sound category
function setCurrentVolume(num)
  if current_volume == 1 then
    SetVariable("volume1", num)
  elseif current_volume == 2 then
    SetVariable("volume2", num)
  elseif current_volume == 3 then
    SetVariable("volume3", num)
  elseif current_volume == 4 then
    SetVariable("volume4", num)
  elseif current_volume == 5 then
    SetVariable("volume5", num)    
  elseif current_volume == 6 then
    SetVariable("volume6", num)    
  elseif current_volume == 7 then
    SetVariable("volume7", num)
  else
    SetVariable("volume1", num)
  end
end

function volchange(direction)
   -- Turn the volume up
   if direction == 1 then
      if getCurrentVolume() >= 100 then
         print(volume_names[current_volume].." is already maxed.")
      else
         setCurrentVolume(getCurrentVolume() + 5)
         print("Increasing " .. volume_names[current_volume] .. " to " .. getCurrentVolume() .. ".")
         if getCurrentVolume() >= 100 then
            setCurrentVolume(100)
         end
         num = tonumber(GetVariable(volume_handles[current_volume]))
         if num ~= nil then
           ppi.setVol(getCurrentVolume(), num)
         end
      end
   end

   -- Turn the volume down
   if direction==2 then
      if getCurrentVolume() <= 0 then
         print(volume_names[current_volume].." is already muted.")
         setCurrentVolume(0)
      else
         setCurrentVolume(getCurrentVolume()-5)
         print("Decreasing " .. volume_names[current_volume] .. " to " .. getCurrentVolume() .. ".")
         if getCurrentVolume() <= 0 then
            setCurrentVolume(0)
         end
         --Note("current_volume variable: " .. current_volume .. " / " .. volume_handles[current_volume])
         num = tonumber(GetVariable(volume_handles[current_volume]))
         if num ~= nil then
           ppi.setVol(getCurrentVolume(), num)
         end
      end
   end
end

-- Unused function
-- IMPORTANT: add printsounds if check to this if you do use it
function playloop(snd)
  if tonumber(GetVariable("soundsEnabled")) == 0 then
    return
  end
   --current_volume = 3
   return ppi.play(dir.."\\sounds\\music\\"..snd,1,0,tonumber(GetVariable("volume3")))
end

function playsoundloop(keyword, snd, variableName,slot)
  if tonumber(GetVariable("soundsEnabled")) == 0 then
    return
  end
   -- current_volume = 1
   path = dir.."\\sounds\\"..snd
   --Note("Path is: " .. path)
   if tonumber(GetVariable("printsounds")) == 1 then
     Note("Playing sound keyword '" .. keyword .. "' from directory " .. snd)
   end
   result = ppi.play(path,slot,0, tonumber(GetVariable("volume3")))
   SetVariable(variableName, result)
   return result
end

-- variableName is "music", "combatmusic", or "weather" (must be one word, must match what's in volume_handles[].
-- in this function we are saving the result of ppi.play() into that variable.
function playmusic(keyword, snd, areaVnum, variableName,slot,fileType,volumeName,folderName)
  if tonumber(GetVariable("soundsEnabled")) == 0 then
    return
  end

  -- Don't loop if music is turned off
  -- If areaVnum is -1, it's combat music
  -- If areaVnum is -2, it's weather ambience
  -- Otherwise, it is area music
  if (areaVnum == -1) then
    if tonumber(GetVariable("combatMusicEnabled")) == 0 then
      return
    end
  elseif (areaVnum == -2) then
    if tonumber(GetVariable("weatherAmbienceEnabled")) == 0 then
      return
    end
  else
    if tonumber(GetVariable("musicEnabled")) == 0 then
      return
    end
  end

  --Note("Keyword: " .. keyword)
  --Note("snd: " .. snd)
  --Note("areaVnum: " .. areaVnum)

  --current_volume = 3
  if tonumber(GetVariable("printsounds")) == 1 then
    Note("Playing keyword '" .. keyword .. "' from directory \\"..folderName.."\\" .. snd)
  end
  --Note("Starting a song.")

  --Note("VolumeName: " .. volumeName)
  result = ppi.play(dir.."\\sounds\\"..folderName.."\\"..snd,slot,0,tonumber(GetVariable(volumeName)))

  SetVariable(variableName, result)
  --Note("VariableName: " .. variableName .. " / Result: " .. result)

  SetVariable(fileType, snd) -- Save the sound file for current music being played, such as "area25.ogg" or "combat_song_1"
  -- The below prints "combatMusicFile: combat_song_4.ogg" for example
  --Note(fileType .. " : " .. snd)
  return result
end

function playsocial(keyword, snd)
  if tonumber(GetVariable("soundsEnabled")) == 0 then
    return
  end
  if tonumber(GetVariable("socialsEnabled")) == 0 then
    return
  end
   path = dir.."\\sounds\\"..snd
   --Note("Path is: " .. path)
   if tonumber(GetVariable("printsounds")) == 1 then
     Note("Playing social sound keyword '" .. keyword .. "' from directory " .. snd)
   end
   result = ppi.play(path,0,0, tonumber(GetVariable("volume4")))
   SetVariable("socials", result)
end

function playamb(keyword, terrain)
  if tonumber(GetVariable("soundsEnabled")) == 0 then
    return
  end
   -- Play a new ambiance if terrain has changed, or if no ambiance is playing and ambiance is enabled

   num = tonumber(GetVariable("ambiance"))
   if GetVariable("lastterrain") ~= terrain or ppi == nil or num == 0 or num == nil or (ppi.isPlaying(num) == 0 and tonumber(GetVariable("ambianceEnabled")) == 1) then
      stopsound(GetVariable("ambiance"))
      path = dir.."sounds"..terrain
      --Note("Dir: " .. dir)
      --Note("Playamb path: "..path)

      if tonumber(GetVariable("printsounds")) == 1 then
        Note("Playing ambiance keyword '" .. keyword .. "' from directory " .. terrain)
      end
      -- (If you put a 1 as the 2nd parameter, it will loop, but we aren't doing that
      -- because then adjusting volume doesn't work when it loops around to the next sound.)
      result = ppi.play(path,2,0, tonumber(GetVariable("volume2")))
      SetVariable("ambiance", result)
      SetVariable("lastterrain", terrain)
      -- current_volume = 2
   end
end

function playstep(keyword, snd)
  if tonumber(GetVariable("soundsEnabled")) == 0 then
    return
  end
   -- Stop ambiance while running
   --Note("Playing step sound")
   stopsound(GetVariable("ambiance"))

  if tonumber(GetVariable("printsounds")) == 1 then
    Note("Playing sound keyword '" .. keyword .. "' from directory \\steps\\" .. snd)
  end

   path = dir.."\\sounds\\steps\\"..snd
   result = ppi.play(path, 3, 0, tonumber(GetVariable("volume1")))
   SetVariable("stepsound", result)
end

-- This function passes in whichever was the last line on the screen as variable sText
function OnPluginLineReceived (sText)
  return true
end

-- This returns the song file name for areaVnum, such as "area25.ogg"
function getAreaSongFile(areaVnum)
  homeMusicFile = ""
  homeMusicPreference = GetVariable("homeMusicKeyword")
  songToggleVariable = "toggleArea" .. areaVnum
  for i,v in pairs(soundpackTable) do
    -- Matches "toggleArea25" to the toggle in the soundpack
    if songToggleVariable == soundpackTable[i][2] then
      --Note("Found a song for area vnum " .. areaVnum .. ".")
      -- Returns the sound file name, such as "area25.ogg"
      return soundpackTable[i][4]
    end
    if homeMusicPreference == soundpackTable[i][2] then
      homeMusicFile = soundpackTable[i][4]
    end
  end
  -- Did not find a sound for that area
  --Note("Did not find a song for the area, so playing preference song.")
  return homeMusicFile
end

-- UNUSED as of now.
-- Checks if the current song that is playing is specific to an area
function currentSongIsAreaSpecific()
  num = tonumber(GetVariable("music"))
  fileName = GetVariable("musicFile")
  if num ~= nil and num ~= 0 and ppi.isPlaying(num) == 1 and fileName ~= nil then
    for i,v in pairs(soundpackTable) do
      -- Search for matching file name such as "area25.ogg" and check if it is set to "isAreaSpecific"
      if fileName == soundpackTable[i][4] and soundpackTable[i][7] == 1 then
        return true
      end
    end
  else
    return false
  end
end

function StartWeather()
  if tonumber(GetVariable("soundsEnabled")) == 0 then
    -- All sounds are disabled
    return
  end
  if tonumber(GetVariable("running")) == 1 then
     -- Note("Don't switch weather ambience while running, or that could get chaotic.")
     return
  end

  weatherType = tonumber(GetVariable("weatherType"))
  if weatherType == nil or weatherType == 0 or tonumber(GetVariable("weatherAmbienceEnabled")) == 0 or (weatherType > 7) then
    num = tonumber(GetVariable("weatherAmbiencePPI"))
    -- Weather ambience is disabled OR current weather ambience just finished
    if num ~= nil and num ~= 0 and ppi.isPlaying(num) == 1 then
      --Note("Fading out the current weather ambience")
      ppi.fadeout(num)
      SetVariable("weatherAmbiencePPI", 0)
    end
    if tonumber(GetVariable("weatherAmbienceEnabled")) == 0 then
      --Note("weather ambience is not enabled...")
      return
    end
    return true
  end

  if tonumber(GetVariable("weatherAmbienceEnabled")) == 0 then
    --Note("weather ambience is not enabled2...")
    return
  end

  -- Check if there is already an ambience file playing.
  -- if there is an ambience file playing, check if it is the same ambience as the new one that it's trying to start playing. If it is not the same, then fade out the current one and fade in the new ambience file below. (This would be the case if you change areas or the weather changes.)

  num = tonumber(GetVariable("weatherAmbiencePPI"))
  if num ~= nil and num ~= 0 and ppi.isPlaying(num) == 1 then
    -- get the name of the current song file that is playing (i.e. 3.ogg)
    currentSongFileName = GetVariable("weatherAmbienceFile")
    -- get the name of the song that is trying to start playing (i.e. 2.ogg)
    newFileName = weatherType .. ".ogg"

    --Note("current song: " .. currentSongFileName)
    --Note("new song: " .. newFileName)

    -- if current and new song are the same, then return (don't change song)
    if (currentSongFileName ~= nil) and (currentSongFileName == newFileName) then
       --Note("Weather ambience is already playing (" .. currentSongFileName .. ")")
       return
    else
      -- the current and new song are different, so fade out the old song and fade in the new one
      ppi.fadeout(num)
      SetVariable("weatherAmbiencePPI", 0)
    end
    -- if weatherType is 0, then the weather ambience should stop
    if (weatherType == 0) then
      ppi.fadeout(num)
      SetVariable("weatherAmbiencePPI", 0)
      --Note("fading out weather ambience2")
      return
    end
  end

  if not (weatherType == 0) then
    currentSongFileName = weatherType .. ".ogg"
    --Note("Weather type is: " .. weatherType .. " / Current file is: " .. currentSongFileName)
    result = playmusic(weatherType, currentSongFileName, -2, "weather", 5, "weatherAmbienceFile", "volume7", "weather_ambience")

    if result ~= nil then
      --Note("Starting to play weather ambience")
      SetVariable("weatherAmbiencePPI", result)
      SetVariable("weatherAmbienceFile", currentSongFileName)
    end
  end
end

function StartMusic()
  --Note("running StartMusic() function")
  if tonumber(GetVariable("soundsEnabled")) == 0 then
    return
  end
  if tonumber(GetVariable("running")) == 1 then
     -- Note("Don't switch music while running, or that could get chaotic.")
     return
  end

  fightType = tonumber(GetVariable("fightType"))
  if fightType == nil or fightType == 0 or tonumber(GetVariable("combatMusicEnabled")) == 0 then
    -- combat music is disabled OR combat just ended
    num = tonumber(GetVariable("combatmusic"))
    if num ~= nil and num ~= 0 and ppi.isPlaying(num) == 1 then
      -- Fade out the current combat song
      ppi.fadeout(num)
      SetVariable("combatmusic", 0)
      --Note("fading out combat music 1")
    end
    if tonumber(GetVariable("musicEnabled")) == 0 then
      -- music is not enabled
      --Note("music is not enabled...")
      return
    end
    -- areaVnum is the local variable in this function, and GetVariable is grabbing the global variable.
    areaVnum = tonumber(GetVariable("areaVnum"))
    if areaVnum == nil or areaVnum == 0 then
      -- return if you do not have an area vnum
      --Note("do not have an area vnum")
      return
    end
    --Note(areaVnum)
    num = tonumber(GetVariable("music"))
    if num ~= nil and num ~= 0 and ppi.isPlaying(num) == 1 then
      --Note("there is a song that's already playing.........")
      -- Song is already playing
      -- Check if song exists for areaVnum (i.e. area25)
      -- Yes?
      -- 1) That song is not playing, so fade out current song / start new song for area25.ogg
      -- 2) That song is already playing - do nothing.
      -- No?
      -- 1) Play /music/playerhome.ogg

      --Note("Searching for a song for area vnum " .. areaVnum .. ".")
      songToggleVariable = "toggleArea" .. areaVnum
      fileName = getAreaSongFile(areaVnum)
      if fileName ~= nil then
        -- The song file found "area25.ogg" does not match what's currently playing "area27.ogg", so switch it to the area-specific song. This happens if you go from one area to another.
        if fileName ~= GetVariable("musicFile") then
          -- Fade out the current song
          ppi.fadeout(num)
          --Note("Playing a song specific to the area: " .. fileName)
          --Note("musicFile: " .. GetVariable("musicFile"))
          playmusic(GetSoundKeyword(songToggleVariable), fileName, areaVnum, "music", 1, "musicFile", "volume3", "music")
          return
        end
        --Note("here: " .. fileName)
      else
        -- Went into a new area and a song was already playing
        -- If the song playing is area-specific, fade out and play new one.
        Note("Fading out area-specific song. This area does not have a song.")
        ppi.fadeout(num)
        return
      end
      --Note("No need to switch songs. Continuing to play current song.")
      return
    else
      -- Song is not playing
      -- Check if song exists for areaVnum (i.e. area25)
      -- Yes? Start song for that area (area25.ogg)
      -- No? Do nothing. If an area doesn't have a song, no music will play.

      fileName = getAreaSongFile(areaVnum)
      --Note("Filename is: " .. fileName)
      if fileName ~= nil then
        --Note("Play the new song for the area: " .. fileName)
        playmusic(GetSoundKeyword(songToggleVariable), fileName, areaVnum, "music", 1, "musicFile", "volume3", "music")
      else
        --Note("This area does not have a song.")
      end
      return
    end
    --Note("Testing...")
    return
  end

  --Note("made it down here1")
  -- If they are in combat and combat song is not playing, start one.
  if tonumber(GetVariable("combatMusicEnabled")) == 0 then
    -- Combat music is not enabled, so do not change the song
    --Note("combat music is disabled currently.")
    return
  end
  num = tonumber(GetVariable("music"))
  if num ~= nil and num ~= 0 and ppi.isPlaying(num) == 1 then
    -- Fade out the current song
    --Note("fading area music")
    ppi.fadeout(num)
    SetVariable("music", 0)
  end

  -- Check if there is already a combat song playing.
  -- if there is a combat song playing, check if it is the same song as the new one that it's trying to start playing. If it is not the same, then fade out the current one and fade in the new song below. (This would be the case if you are fighting a boss and then the boss dies and you are still in combat but with a non-boss mob.)

  num = tonumber(GetVariable("combatmusic"))
  if num ~= nil and num ~= 0 and ppi.isPlaying(num) == 1 then
    -- get the name of the current song file that is playing (i.e. combat_song_3.ogg)
    currentSongFileName = GetVariable("combatMusicFile")
    -- get the name of the song that is trying to start playing (i.e. combat_song_2.ogg)
    newFileName = "combat_song_" .. fightType .. ".ogg"

    --Note("current song: " .. currentSongFileName)
    --Note("new song: " .. newFileName)

    -- if current and new song are the same, then return (don't change song)
    if (currentSongFileName ~= nil) and (currentSongFileName == newFileName) then
       --Note("Combat song is already playing (" .. currentSongFileName .. ")")
       return
    else
      -- the current and new song are different, so fade out the old song and fade in the new one
      ppi.fadeout(num)
      SetVariable("combatmusic", 0)
    end
    -- if fightType is 0, then the combat music should stop
    if (fightType == 0) then
      ppi.fadeout(num)
      SetVariable("combatmusic", 0)
      --Note("fading out combat music2")
      return
    end
  end

  if not (fightType == 0) then
    --Note("Fight type is: " .. fightType)
    currentSongFileName = "combat_song_" .. fightType .. ".ogg"
    result = playmusic("combat_song_"..fightType, currentSongFileName, -1, "combatmusic", 4, "combatMusicFile", "volume6", "music")

    if result ~= nil then
      --Note("Starting to play combat song")
      SetVariable("combatmusic", result)
      SetVariable("combatMusicFile", currentSongFileName)
    end
  end
  return
end

-- This function will pan your target's melee sound to the left and your own to the right
-- It picks a random sound based on the weapon type
-- If the delay is 0, it is the sound from your target
-- If delay is > 0, it is your own sound
-- Sound order: Target melee, (delay)your melee, (delay)your sk/sp
function doWeaponMelee(delay, pan, weaponType, toggleName)
  keyword = GetSoundKeyword(toggleName)
  fileNum = 0
  lpan = pan
  rpan = pan
  if weaponType == 1 then
    fileNum = math.random(1, 12)
    weaponName = "sword"
  elseif weaponType == 2 then
    fileNum = math.random(1, 6)
    weaponName = "mace"
  elseif weaponType == 3 then
    fileNum = math.random(1, 4)
    weaponName = "dagger"
  elseif weaponType == 4 then
    fileNum = math.random(1, 8)
    weaponName = "axe"
  elseif weaponType == 5 then
    fileNum = math.random(1, 7)
    weaponName = "flail"
  elseif weaponType == 6 then
    fileNum = math.random(1, 5)
    weaponName = "whip"
  elseif weaponType == 7 then
    fileNum = math.random(1, 5)
    weaponName = "polearm"
  elseif weaponType == 8 then
    fileNum = math.random(1, 7)
    weaponName = "claw"
  elseif weaponType == 9 then
    fileNum = math.random(1, 4)
    weaponName = "bow"
  elseif weaponType == 10 then
    fileNum = math.random(1, 5)
    weaponName = "staff"
  elseif weaponType == 11 then
    fileNum = math.random(1, 5)
    weaponName = "spear"
  elseif weaponType == 12 then
    fileNum = math.random(1, 5)
    weaponName = "club"
  end
  if fileNum ~= 0 then
    mswfileName = "combat/weapontypes/" .. weaponName .. "/" .. fileNum .. ".ogg"
    if delay == 0 then
      -- Panning to the left (mob's melee)
      playcombat(keyword, mswfileName, tonumber(lpan))
    else
      -- Panning to the right (player's melee)
      DoAfterSpecial(tonumber(delay), [[playcombat(keyword, mswfileName, tonumber(rpan))]], 12)
    end
  end
end

-- Called 25 times a second
function OnPluginTick ()
  if IsConnected() then
    if playerIsPlaying == 1 then
      StartMusic()
      StartWeather()
      StartAmbiance()
    else
       num = tonumber(GetVariable("ambiance"))
       if num ~= nil and num ~= 0 then
          stopsound(num)
       end
    end
  else
    playerIsPlaying = 0
    stopsound(0)
  end
  return
end

Accelerator("shift+f1", "hpfull")
Accelerator("shift+f2", "manafull")
Accelerator("shift+f3", "limitbreak")
Accelerator("f1", "hppercent")
Accelerator("f2", "manapercent")
Accelerator("f3", "tnl")
Accelerator("f7", "recall")
Accelerator("f10", "voltoggle")
Accelerator("f11", "volup")
Accelerator("f12", "voldown")

function SpeakHpPercent(name, line, wildcards)
  Execute("tts_interrupt ".. wildcards[1] .. " % hp")
end
function SpeakFullHp(name, line, wildcards)
  Execute("tts_interrupt ".. wildcards[1] .." of ".. wildcards[2] .." hp")
end
function SpeakManaPercent(name, line, wildcards)
  Execute("tts_interrupt ".. wildcards[1] .. " % mana")
end
function SpeakFullMana(name, line, wildcards)
  Execute("tts_interrupt ".. wildcards[1] .." of ".. wildcards[2] .." mana")
end
function SpeakTnl(name, line, wildcards)
  Execute("tts_interrupt ".. wildcards[0])
end
]]>
</script>

</muclient>

<!-- vim: set ai ts=3 sw=3 tw=0 et syntax=lua :-->